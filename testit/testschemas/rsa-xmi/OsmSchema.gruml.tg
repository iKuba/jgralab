// JGraLab - The Java graph laboratory
//   Version : Carnotaurus
//   Revision: 1107
//   Build ID: 65

Schema de.uni_koblenz.jgralab.grumlschema.GrumlSchema;
GraphClass SchemaGraph ["There must be exactly one GraphClass." "count(V{structure.GraphClass}) = 1" "V{structure.GraphClass}"] ["The GraphClass may not be abstract." "forall gc: V{structure.GraphClass} @ not gc.isAbstract" "from gc: V{structure.GraphClass} with gc.isAbstract reportSet gc end"];
Package domains;
VertexClass BooleanDomain: Domain;
abstract VertexClass CollectionDomain: Domain;
abstract VertexClass CompositeDomain: Domain;
abstract VertexClass Domain { qualifiedName: String };
VertexClass DoubleDomain: Domain;
VertexClass EnumDomain: Domain { enumConstants: List<String> };
VertexClass IntDomain: Domain;
VertexClass ListDomain: CollectionDomain;
VertexClass LongDomain: Domain;
VertexClass MapDomain: Domain ["The key domain of a MapDomain must not be a collection, record, or map" "forall m: V{domains.MapDomain} @ (forall d: m -->{domains.HasKeyDomain} @ not hasType{domains.CollectionDomain, domains.RecordDomain, domains.MapDomain}(d))"];
VertexClass RecordDomain: Domain;
VertexClass SetDomain: CollectionDomain;
VertexClass StringDomain: Domain;
EdgeClass HasBaseDomain from CollectionDomain (0,*) to Domain (1,1);
EdgeClass HasKeyDomain from MapDomain (0,*) to Domain (1,1);
AggregationClass HasRecordDomainComponent from RecordDomain (0,*) to Domain (1,*) aggregate from { name: String };
EdgeClass HasValueDomain from MapDomain (0,*) to Domain (1,1);
Package structure;
VertexClass AggregationClass: EdgeClass { aggregateFrom: Boolean };
VertexClass Attribute { name: String };
abstract VertexClass AttributedElementClass { isAbstract: Boolean,  qualifiedName: String };
VertexClass CompositionClass: AggregationClass;
VertexClass Constraint { message: String,  offendingElementsQuery: String,  predicateQuery: String };
VertexClass EdgeClass: GraphElementClass;
VertexClass GraphClass: AttributedElementClass;
abstract VertexClass GraphElementClass: AttributedElementClass;
VertexClass Package { qualifiedName: String } ["A Package must either be default or subpackage, but not both" "forall p: V{structure.Package} @ inDegree{structure.ContainsDefaultPackage}(p) + inDegree{structure.ContainsSubPackage}(p) = 1"];
VertexClass Schema { name: String,  packagePrefix: String };
VertexClass VertexClass: GraphElementClass;
CompositionClass ContainsDefaultPackage from Schema (0,1) to Package (1,1) aggregate from;
CompositionClass ContainsDomain from Package (1,1) to domains.Domain (0,*) aggregate from;
CompositionClass ContainsGraphElementClass from Package (1,1) to GraphElementClass (0,*) aggregate from;
CompositionClass ContainsSubPackage from Package (0,1) to Package (0,*) aggregate from;
CompositionClass DefinesGraphClass from Schema (1,1) to GraphClass (1,1) aggregate from;
AggregationClass From from EdgeClass (0,*) to VertexClass (1,1) aggregate from { max: Integer,  min: Integer,  redefinedRoles: Set<String>,  roleName: String };
CompositionClass HasAttribute from AttributedElementClass (1,1) to Attribute (0,*) aggregate from;
CompositionClass HasConstraint from AttributedElementClass (1,1) to Constraint (0,*) aggregate from;
EdgeClass HasDomain from Attribute (0,*) to domains.Domain (1,1);
EdgeClass SpecializesEdgeClass from EdgeClass (0,*) to EdgeClass (0,*);
EdgeClass SpecializesVertexClass from VertexClass (0,*) to VertexClass (0,*);
AggregationClass To from EdgeClass (0,*) to VertexClass (1,1) aggregate from { max: Integer,  min: Integer,  redefinedRoles: Set<String>,  roleName: String };

Graph "5cc7be48-aaa03229-a1d365b0-1b79d8c7_354" SchemaGraph (1000 1000 52 91);
Package structure;
1 Schema <1 2> "OsmSchema" "de.uni_koblenz.jgstreetmap.osmschema";
2 GraphClass <-1> f "OsmGraph";
3 Package <-2 3 14 19 32 42 45 69 70 71> "";
4 Package <-3 4 9 16 22 17 24 25> "map";
5 VertexClass <-4 5 6 -23 -35 -34 -57 74 92> f "map.Node";
6 Attribute <-5 78> "longitude";
7 Attribute <-6 79> "latitude";
8 VertexClass <-7 -16 18 21 -72 73> f "map.Way";
10 VertexClass <-8 -52 -56> f "kdtree.NodeSet";
12 VertexClass <-9 10 11 12 13 -27 -73 -74 -77> t "map.OsmPrimitive";
13 Attribute <-10 80> "osmId";
14 Attribute <-11 81> "tags";
15 Attribute <-12 82> "timeStamp";
16 Attribute <-13 15> "user";
Package domains;
17 StringDomain <-14 -15 -29 -31 -67 -68> "String";
Package structure;
18 AggregationClass <7 -22 23> t f "map.HasNode";
9 Attribute <-18 20> "closed";
Package domains;
19 BooleanDomain <-19 -20 -37> "Boolean";
Package structure;
20 Attribute <-21 83> "wayType";
21 VertexClass <-17 72> f "map.Area";
22 VertexClass <-24 -26 77> f "map.Relation";
26 Attribute <-28 29> "memberType";
27 Attribute <-30 31> "memberRole";
28 AggregationClass <-25 26 27 28 30> t f "map.HasMember";
23 Package <-32 33 41> "routing";
24 EdgeClass <-33 34 35 36 38 39 40> f "routing.Segment";
30 Attribute <-36 37> "oneway";
31 Attribute <-38 84> "wayType";
32 Attribute <-39 85> "length";
33 Attribute <-40 86> "wayId";
Package domains;
25 EnumDomain <-41 -83 -84> ["NOWAY" "CYCLEWAY" "MOTORWAY" "PRIMARY" "SECONDARY" "TERTIARY" "RESIDENTIAL" "FOOTWAY" "UNSURFACED" "SERVICE" "WORMHOLE"] "routing.SegmentType";
Package structure;
29 Package <-42 43 48 52 55 50 54 60 63 47 61> "kdtree";
34 VertexClass <-43 44 -51 88 89> f "kdtree.KDTree";
35 Attribute <-44 46> "levels";
Package domains;
36 IntDomain <-45 -46> "Integer";
Package structure;
37 VertexClass <-48 49 -53 -64 -75 -76> t "kdtree.Key";
38 AggregationClass <51 -63 64> t f "kdtree.HasRoot";
39 Attribute <-49 87> "keyValue";
40 EdgeClass <53 -55 56> f "kdtree.HasNodeSet";
41 AggregationClass <8 -50 57> t f "kdtree.HasElement";
11 VertexClass <-54 -62 -65 75 90> f "kdtree.XKey";
42 VertexClass <-58 -60 -66 76 91> f "kdtree.YKey";
44 AggregationClass <62 -61 66> t f "kdtree.HasYChild";
45 AggregationClass <58 -47 65> t f "kdtree.HasXChild";
Package domains;
46 MapDomain <67 68 -69 -81> "Map<String, String>";
47 DoubleDomain <-70 -78 -79 -85 -87> "Double";
48 LongDomain <-71 -80 -82 -86> "Long";
Package structure;
49 Constraint <-88> "Each OSM Graph must contain exactly one KDTree vertex." \null "exists! t: V{kdtree.KDTree] @ true";
50 Constraint <-89> "KDTree must have at least one  level." "from t: V{KDTree} with t.levels<1 report t end" "forall t: V{kdtree.KDTree} @ t.levels>=1";
51 Constraint <-90> "Each XKey is either an inner node with 2 children or a leaf with a NodeSet." \null "forall k: V{kdtree.XKey} @ degree{kdtree.HasYChild}(v) = 2 xor degree{kdtree.HasNodeSet}(v) = 1";
52 Constraint <-91> "Each YKey is either an inner node with 2 childred or a leaf with a NodeSet." \null "forall k: V{kdtree.YKey} @ degree{kdtree.HasXChild}(v) = 2 xor degree{kdtree.HasNodeSet}(v) = 1";
53 Constraint <-92> "In each Node, |latitude| must be <= 90.0\u00b0 and  |longitude| must be <= 180.0\u00b0" "from n: V{Node} with abs(n.latitude)>90.0 or n.longitude>180.0 report n end" "forall n: V{map.Node0} @ abs(n.latitude) <= 90.0 and abs(n.longitude) <= 180.0";
1 DefinesGraphClass;
2 ContainsDefaultPackage;
3 ContainsSubPackage;
4 ContainsGraphElementClass;
5 HasAttribute;
6 HasAttribute;
7 From 2147483647 0 \null "way";
8 From 1 0 \null "set";
9 ContainsGraphElementClass;
10 HasAttribute;
11 HasAttribute;
12 HasAttribute;
13 HasAttribute;
14 ContainsDomain;
15 HasDomain;
16 ContainsGraphElementClass;
18 HasAttribute;
19 ContainsDomain;
20 HasDomain;
21 HasAttribute;
22 ContainsGraphElementClass;
23 To 2147483647 1 \null "node";
17 ContainsGraphElementClass;
24 ContainsGraphElementClass;
25 ContainsGraphElementClass;
26 From 2147483647 0 \null "relation";
27 To 2147483647 0 \null "member";
28 HasAttribute;
29 HasDomain;
30 HasAttribute;
31 HasDomain;
32 ContainsSubPackage;
33 ContainsGraphElementClass;
34 From 2147483647 0 \null "";
35 To 2147483647 0 \null "";
36 HasAttribute;
37 HasDomain;
38 HasAttribute;
39 HasAttribute;
40 HasAttribute;
41 ContainsDomain;
42 ContainsSubPackage;
43 ContainsGraphElementClass;
44 HasAttribute;
45 ContainsDomain;
46 HasDomain;
48 ContainsGraphElementClass;
49 HasAttribute;
51 From 1 0 \null "tree";
52 ContainsGraphElementClass;
53 From 1 1 \null "key";
55 ContainsGraphElementClass;
56 To 1 0 \null "set";
50 ContainsGraphElementClass;
57 To 2147483647 1 \null "element";
54 ContainsGraphElementClass;
58 From 1 0 \null "parent";
60 ContainsGraphElementClass;
62 From 1 0 \null "parent";
63 ContainsGraphElementClass;
64 To 1 1 \null "root";
47 ContainsGraphElementClass;
65 To 2 0 \null "child";
61 ContainsGraphElementClass;
66 To 2 0 \null "child";
Package domains;
67 HasKeyDomain;
68 HasValueDomain;
Package structure;
69 ContainsDomain;
70 ContainsDomain;
71 ContainsDomain;
72 SpecializesVertexClass;
73 SpecializesVertexClass;
74 SpecializesVertexClass;
75 SpecializesVertexClass;
76 SpecializesVertexClass;
77 SpecializesVertexClass;
78 HasDomain;
79 HasDomain;
80 HasDomain;
81 HasDomain;
82 HasDomain;
83 HasDomain;
84 HasDomain;
85 HasDomain;
86 HasDomain;
87 HasDomain;
88 HasConstraint;
89 HasConstraint;
90 HasConstraint;
91 HasConstraint;
92 HasConstraint;
