// JGraLab - The Java graph laboratory
//   Version : Carnotaurus
//   Revision: 1107
//   Build ID: 65

Schema de.uni_koblenz.jgralab.grumlschema.GrumlSchema;
GraphClass SchemaGraph ["There must be exactly one GraphClass." "count(V{structure.GraphClass}) = 1" "V{structure.GraphClass}"] ["The GraphClass may not be abstract." "forall gc: V{structure.GraphClass} @ not gc.isAbstract" "from gc: V{structure.GraphClass} with gc.isAbstract reportSet gc end"];
Package domains;
VertexClass BooleanDomain: Domain;
abstract VertexClass CollectionDomain: Domain;
abstract VertexClass CompositeDomain: Domain;
abstract VertexClass Domain { qualifiedName: String };
VertexClass DoubleDomain: Domain;
VertexClass EnumDomain: Domain { enumConstants: List<String> };
VertexClass IntDomain: Domain;
VertexClass ListDomain: CollectionDomain;
VertexClass LongDomain: Domain;
VertexClass MapDomain: Domain ["The key domain of a MapDomain must not be a collection, record, or map" "forall m: V{domains.MapDomain} @ (forall d: m -->{domains.HasKeyDomain} @ not hasType{domains.CollectionDomain, domains.RecordDomain, domains.MapDomain}(d))"];
VertexClass RecordDomain: Domain;
VertexClass SetDomain: CollectionDomain;
VertexClass StringDomain: Domain;
EdgeClass HasBaseDomain from CollectionDomain (0,*) to Domain (1,1);
EdgeClass HasKeyDomain from MapDomain (0,*) to Domain (1,1);
AggregationClass HasRecordDomainComponent from RecordDomain (0,*) to Domain (1,*) aggregate from { name: String };
EdgeClass HasValueDomain from MapDomain (0,*) to Domain (1,1);
Package structure;
VertexClass AggregationClass: EdgeClass { aggregateFrom: Boolean };
VertexClass Attribute { name: String };
abstract VertexClass AttributedElementClass { isAbstract: Boolean,  qualifiedName: String };
VertexClass CompositionClass: AggregationClass;
VertexClass Constraint { message: String,  offendingElementsQuery: String,  predicateQuery: String };
VertexClass EdgeClass: GraphElementClass;
VertexClass GraphClass: AttributedElementClass;
abstract VertexClass GraphElementClass: AttributedElementClass;
VertexClass Package { qualifiedName: String } ["A Package must either be default or subpackage, but not both" "forall p: V{structure.Package} @ inDegree{structure.ContainsDefaultPackage}(p) + inDegree{structure.ContainsSubPackage}(p) = 1"];
VertexClass Schema { name: String,  packagePrefix: String };
VertexClass VertexClass: GraphElementClass;
CompositionClass ContainsDefaultPackage from Schema (0,1) to Package (1,1) aggregate from;
CompositionClass ContainsDomain from Package (1,1) to domains.Domain (0,*) aggregate from;
CompositionClass ContainsGraphElementClass from Package (1,1) to GraphElementClass (0,*) aggregate from;
CompositionClass ContainsSubPackage from Package (0,1) to Package (0,*) aggregate from;
CompositionClass DefinesGraphClass from Schema (1,1) to GraphClass (1,1) aggregate from;
AggregationClass From from EdgeClass (0,*) to VertexClass (1,1) aggregate from { max: Integer,  min: Integer,  redefinedRoles: Set<String>,  roleName: String };
CompositionClass HasAttribute from AttributedElementClass (1,1) to Attribute (0,*) aggregate from;
CompositionClass HasConstraint from AttributedElementClass (1,1) to Constraint (0,*) aggregate from;
EdgeClass HasDomain from Attribute (0,*) to domains.Domain (1,1);
EdgeClass SpecializesEdgeClass from EdgeClass (0,*) to EdgeClass (0,*);
EdgeClass SpecializesVertexClass from VertexClass (0,*) to VertexClass (0,*);
AggregationClass To from EdgeClass (0,*) to VertexClass (1,1) aggregate from { max: Integer,  min: Integer,  redefinedRoles: Set<String>,  roleName: String };

Graph "288f493c-f0ed6efc-99475eae-63e10e52_216" SchemaGraph (1000 1000 24 43);
Package structure;
1 Schema <1 2> "Test" "test";
2 GraphClass <-1 25 26 46> f "GC";
3 Package <-2 4 7 9 10 12 14 15 17 18 20 11 23 29 30 33 34> "";
Package domains;
5 RecordDomain <-4 3 5 -28> "Position";
8 RecordDomain <-7 6 8 -45> "Polygon";
10 BooleanDomain <-9 -8> "Boolean";
Package structure;
9 VertexClass <-10 -13 -43> f "A";
11 VertexClass <-12 -21 -42> f "B";
12 EdgeClass <13 -20 21> f "Ab";
13 VertexClass <-14 -41 43 -22> f "C";
14 VertexClass <-15 -40 42 -16> f "D";
16 VertexClass <-17 41 -24> f "E";
17 VertexClass <-18 40 -19> f "F";
18 CompositionClass <19 -23 24> t f "Ef";
20 AggregationClass <16 -11 22> f t "Cd";
15 Attribute <-25 44> "lastUpdate";
19 Attribute <-26 45> "boundary";
Package domains;
22 ListDomain <28 -29 -6> "List<Position>";
24 IntDomain <-30 -36 -39> "Integer";
25 DoubleDomain <-33 -3 -5> "Double";
Package structure;
26 Package <-34 35 37> "util";
Package domains;
27 EnumDomain <-35 -38> ["JAN" "FEB" "MAR" "APR" "MAY" "JUN" "JUL" "AUG" "SEP" "OCT" "NOV" "DEC"] "util.Month";
29 RecordDomain <-37 36 38 39 -44> "util.Date";
Package structure;
4 Constraint <-46> "Nur ein Test" \null "true";
1 DefinesGraphClass;
2 ContainsDefaultPackage;
4 ContainsDomain;
Package domains;
3 HasRecordDomainComponent "lon";
5 HasRecordDomainComponent "lat";
Package structure;
7 ContainsDomain;
Package domains;
6 HasRecordDomainComponent "points";
8 HasRecordDomainComponent "closed";
Package structure;
9 ContainsDomain;
10 ContainsGraphElementClass;
12 ContainsGraphElementClass;
13 From 1 1 \null "a";
14 ContainsGraphElementClass;
15 ContainsGraphElementClass;
16 From 2147483647 0 \null "d";
17 ContainsGraphElementClass;
18 ContainsGraphElementClass;
19 From 1 1 {"a" "c"} "f";
20 ContainsGraphElementClass;
21 To 1 1 \null "b";
11 ContainsGraphElementClass;
22 To 1 1 \null "c";
23 ContainsGraphElementClass;
24 To 2147483647 0 {"b"} "e";
25 HasAttribute;
26 HasAttribute;
Package domains;
28 HasBaseDomain;
Package structure;
29 ContainsDomain;
30 ContainsDomain;
33 ContainsDomain;
34 ContainsSubPackage;
35 ContainsDomain;
37 ContainsDomain;
Package domains;
36 HasRecordDomainComponent "day";
38 HasRecordDomainComponent "month";
39 HasRecordDomainComponent "year";
Package structure;
40 SpecializesVertexClass;
41 SpecializesVertexClass;
42 SpecializesVertexClass;
43 SpecializesVertexClass;
44 HasDomain;
45 HasDomain;
46 HasConstraint;
