//
// JGraLab - The Java graph laboratory
// (c) 2006-2007 Institute for Software Technology
//               University of Koblenz-Landau, Germany
//
//               ist@uni-koblenz.de
//
// Please report bugs to http://serres.uni-koblenz.de/bugzilla
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//

TGraph 2;
Schema de.uni_koblenz.jgralab.greql2.schema.Greql2Schema;
GraphClass Greql2;

EnumDomain IterationType (STAR, PLUS);
EnumDomain QuantificationType (FORALL, EXISTS, EXISTSONE);
RecordDomain SourcePosition (offset:Integer, length: Integer);

// A common superclass for all vertices of GReQL2-vertices
abstract VertexClass Greql2Vertex;

VertexClass AlternativePathDescription: PathDescription;
//VertexClass AttributeId: Identifier;
VertexClass BackwardVertexSet: PathExpression;
VertexClass BagComprehension: ComprehensionWithTableHeader;
VertexClass BagConstruction: ValueConstruction;
VertexClass BoolLiteral: Literal { boolValue: Boolean };
//VertexClass CfGrammar: Expression;
VertexClass ConditionalExpression: Expression;
VertexClass Declaration: Greql2Vertex;
VertexClass Definition: Greql2Vertex;
VertexClass Direction: Greql2Vertex { dirValue: String };
VertexClass EdgePathDescription: PrimaryPathDescription;
VertexClass EdgeRestriction: Greql2Vertex;
VertexClass EdgeSetExpression: ElementSetExpression;
VertexClass EdgeSubgraphExpression: SubgraphExpression;
VertexClass EdgeVertexList: Greql2Vertex;
VertexClass ExponentiatedPathDescription: PathDescription;
VertexClass ForwardVertexSet: PathExpression;
VertexClass FunctionApplication: Expression;
VertexClass FunctionId: Identifier;
VertexClass Greql2Expression: Greql2Vertex { importedTypes: Set<String>, queryText: String, optimizer: String, costModel: String };
VertexClass Identifier : Expression { name: String };
VertexClass IntLiteral: Literal { intValue: Integer };
VertexClass IntermediateVertexPathDescription: PathDescription;
VertexClass IteratedPathDescription: PathDescription { times: IterationType };
VertexClass LetExpression: DefinitionExpression;
VertexClass ListConstruction: ValueConstruction;
VertexClass ListRangeConstruction: ListConstruction;
VertexClass Literal: Expression;
VertexClass MapConstruction : ValueConstruction;
VertexClass MapComprehension : Comprehension;
//VertexClass Nonterminal: Symbol;
VertexClass NullLiteral: Literal;
VertexClass OptionalPathDescription: PathDescription;
VertexClass PathExistence: PathExpression;
VertexClass QuantifiedExpression: Expression;
VertexClass Quantifier: Greql2Vertex { type: QuantificationType };
VertexClass RealLiteral: Literal { realValue: Double };
VertexClass RecordConstruction: ValueConstruction;
VertexClass RecordElement: Greql2Vertex;
VertexClass RecordId: Identifier;
abstract VertexClass TypeOrRoleId: Identifier;
VertexClass RoleId: TypeOrRoleId;
VertexClass SequentialPathDescription: PathDescription;
VertexClass SetComprehension: Comprehension;
VertexClass SetConstruction: ValueConstruction;
VertexClass SimpleDeclaration: Greql2Vertex;
VertexClass SimplePathDescription: PrimaryPathDescription;
VertexClass AggregationPathDescription: PrimaryPathDescription {outAggregation: Boolean};
VertexClass StringLiteral: Literal { stringValue: String };
VertexClass TableComprehension: ComprehensionWithTableHeader;
abstract VertexClass ThisLiteral: Literal,Variable;
VertexClass ThisVertex: ThisLiteral;
VertexClass ThisEdge: ThisLiteral;
VertexClass TransposedPathDescription: PathDescription;
VertexClass TupleConstruction: ValueConstruction;
VertexClass TypeId: TypeOrRoleId { excluded: Boolean, type: Boolean };
VertexClass Variable: Identifier;
VertexClass VertexSetExpression: ElementSetExpression;
VertexClass VertexSubgraphExpression: SubgraphExpression;
VertexClass WhereExpression: DefinitionExpression;
abstract VertexClass Comprehension: Expression;
abstract VertexClass ComprehensionWithTableHeader: Comprehension;
abstract VertexClass DefinitionExpression: Expression;
abstract VertexClass ElementSetExpression: Expression;
abstract VertexClass Expression: Greql2Vertex;
abstract VertexClass PathDescription: Expression;
abstract VertexClass PathExpression: Expression;
abstract VertexClass PrimaryPathDescription: PathDescription;
abstract VertexClass SubgraphExpression: Expression;
abstract VertexClass ValueConstruction: Expression;

// A common super-class for all Edges that connect PathDescription vertices
abstract EdgeClass IsPathDescriptionOf : Greql2Aggregation from PathDescription (0,*) aggregation shared to PathDescription(0,*) ;

//EdgeClass IsImportedTypeOf from TypeId (0,*) to Greql2Expression (0,1) ;
EdgeClass IsAlternativePathOf: IsPathDescriptionOf from PathDescription (2,*) role alternatePath aggregation shared to AlternativePathDescription (0,*);
EdgeClass IsArgumentOf: Greql2Aggregation from Expression (0,*) role argument aggregation shared to FunctionApplication (0,*);
EdgeClass IsBoundExprOfDefinition: IsBoundExprOf from Expression (1,1) role boundExprOfDefinition aggregation shared to DefinitionExpression (0,1);
EdgeClass IsBoundExprOfQuantifier: IsBoundExprOf from Expression (1,1) role boundExprOfQuantifier aggregation shared to QuantifiedExpression (0,*);
EdgeClass IsBoundVarOf: Greql2Aggregation from Variable (0,*) role boundVar aggregation shared to Greql2Expression (0,1);
EdgeClass IsColumnHeaderExprOf: Greql2Aggregation from Expression (0,*) role columnHeader  aggregation shared to TableComprehension (0,*);
EdgeClass IsCompDeclOf: Greql2Aggregation from Declaration (1,1) role compDecl aggregation shared to Comprehension (0,1);
// zero or one, cause MapComprehensions don't have a compResultDef but keyExpr, and valueExpr.
EdgeClass IsCompResultDefOf: Greql2Aggregation from Expression (0,1) role compResultDef aggregation shared to Comprehension (0,*);
EdgeClass IsConditionOf: Greql2Aggregation from Expression (1,1) role condition aggregation shared to ConditionalExpression (0,*);
EdgeClass IsConstraintOf: Greql2Aggregation from Expression (0,*) role constraint aggregation shared to Declaration (0,*);
EdgeClass IsDeclaredVarOf: Greql2Aggregation from Variable (1,*) role declaredVar aggregation shared to SimpleDeclaration (0,1);
EdgeClass IsDefinitionOf: Greql2Aggregation from Definition (1,*) role definition aggregation shared to DefinitionExpression (1,*);
EdgeClass IsDirectionOf: Greql2Aggregation from Direction (1,1) role direction aggregation shared to PrimaryPathDescription (1,*);
EdgeClass IsEdgeExprOf: Greql2Aggregation from Expression (1,1) role edgeExpr aggregation shared to EdgePathDescription (0,*);
EdgeClass IsEdgeOrVertexExprOf: Greql2Aggregation from Expression (2,*) role edgeOrVertexExpr aggregation shared to EdgeVertexList (0,*);
EdgeClass IsEdgeRestrOf: Greql2Aggregation from EdgeRestriction (0,*) role edgeRestr aggregation shared to PrimaryPathDescription (0,*);
EdgeClass IsElementOf: Greql2Aggregation from EdgeVertexList (0,*) role element aggregation shared to EdgeVertexList (0,*);
EdgeClass IsExponentOf: Greql2Aggregation from IntLiteral (1,1) role exponent aggregation shared to ExponentiatedPathDescription (0,*);
EdgeClass IsExponentiatedPathOf: IsPathDescriptionOf from PathDescription (1,1) role exponentiatedPath aggregation shared to ExponentiatedPathDescription (0,*);
EdgeClass IsExprOf:Greql2Aggregation from Expression (1,1) role expr aggregation shared to Definition (0,*);
EdgeClass IsFalseExprOf: Greql2Aggregation from Expression (1,1) role falseExpr aggregation shared to ConditionalExpression (0,*);
EdgeClass IsFirstValueOf: Greql2Aggregation from Expression (1,1) role firstValue aggregation shared to ListRangeConstruction (0,*);
EdgeClass IsFunctionIdOf: Greql2Aggregation from FunctionId (1,1) role functionId  aggregation shared to FunctionApplication (1,*);
EdgeClass IsGoalRestrOf: Greql2Aggregation from Expression (0,1) role goalRestr aggregation shared to PathDescription (0,*);
EdgeClass IsIdOf: Greql2Aggregation from Identifier (0,1) role identifier aggregation shared to Greql2Expression (0,*);
EdgeClass IsIntermediateVertexOf: Greql2Aggregation from Expression (1,1) role intermediateVertex aggregation shared to IntermediateVertexPathDescription (0,*);
EdgeClass IsIteratedPathOf: IsPathDescriptionOf from PathDescription (1,1) role iteratedPath aggregation shared to IteratedPathDescription (0,*);
EdgeClass IsLastValueOf: Greql2Aggregation from Expression (1,1) role lastValue aggregation shared to ListRangeConstruction (0,*);
EdgeClass IsNullExprOf: Greql2Aggregation from Expression (1,1) role nullExpr aggregation shared to ConditionalExpression (0,*);
EdgeClass IsOptionalPathOf: IsPathDescriptionOf from PathDescription (1,1) role optionalPath aggregation shared to OptionalPathDescription (0,*);
EdgeClass IsPartOf: Greql2Aggregation from Expression (0,*) role part aggregation shared to ValueConstruction (0,*);
EdgeClass IsPathOf: Greql2Aggregation from Expression (1,1) role path aggregation shared to PathExpression (0,*);
EdgeClass IsQuantifiedDeclOf: Greql2Aggregation from Declaration (1,1) role quantifiedDecl aggregation shared to QuantifiedExpression (0,1);
EdgeClass IsQuantifierOf: Greql2Aggregation from Quantifier (1,1) role quantifier aggregation shared to QuantifiedExpression (1,*);
EdgeClass IsQueryExprOf: Greql2Aggregation from Expression (1,1) role queryExpr aggregation shared to Greql2Expression (0,*);
EdgeClass IsRecordElementOf: Greql2Aggregation from RecordElement (1,*) role recordElement aggregation shared to RecordConstruction (1,*);
EdgeClass IsRecordExprOf: Greql2Aggregation from Expression (1,1) role recordExpr aggregation shared to RecordElement (0,*);
EdgeClass IsRecordIdOf: Greql2Aggregation from RecordId (1,1) role recordId aggregation shared to RecordElement (1,*);
EdgeClass IsRoleIdOf: Greql2Aggregation from RoleId (0,*) role roleId aggregation shared to EdgeRestriction (1,*);
EdgeClass IsBooleanPredicateOfEdgeRestriction: Greql2Aggregation from Expression (0,1) role booleanPredicate aggregation shared to EdgeRestriction (0,1);
EdgeClass IsRowHeaderExprOf: Greql2Aggregation from Expression (0,*) role rowHeaderExpr aggregation shared to TableComprehension (0,*);
EdgeClass IsSequenceElementOf: IsPathDescriptionOf from PathDescription (2,*) role sequenceElement aggregation shared to SequentialPathDescription (0,*);
EdgeClass IsSimpleDeclOf: Greql2Aggregation from SimpleDeclaration (1,*) role simpleDecl aggregation shared to Declaration (1,1);
EdgeClass IsStartExprOf: Greql2Aggregation from Expression (0,1) role startExpr aggregation shared to PathExpression (0,*);
EdgeClass IsStartRestrOf: Greql2Aggregation from Expression (0,1) role startRestr aggregation shared to PathDescription (0,*);
EdgeClass IsSubPathOf: IsPathDescriptionOf from PathDescription (2,2) role subPath aggregation shared to IntermediateVertexPathDescription (0,*);
EdgeClass IsSubgraphOf: Greql2Aggregation from Expression (0,1) role subgraph aggregation shared to Declaration (0,*);
EdgeClass IsTableHeaderOf: Greql2Aggregation from Expression (0,*) role tableHeader aggregation shared to ComprehensionWithTableHeader (0,*);
EdgeClass IsTargetExprOf: Greql2Aggregation from Expression (0,1) role targetExpr aggregation shared to PathExpression (0,*);
EdgeClass IsKeyExprOfConstruction : Greql2Aggregation from Expression (0,*) role keyExpr aggregation shared to MapConstruction (0,*);
EdgeClass IsValueExprOfConstruction : Greql2Aggregation from Expression (0,*) role valueExpr aggregation shared to MapConstruction (0,*);
EdgeClass IsKeyExprOfComprehension : Greql2Aggregation from Expression (1,1) role keyExpr aggregation shared to MapComprehension (0,*);
EdgeClass IsValueExprOfComprehension : Greql2Aggregation from Expression (1,1) role valueExpr aggregation shared to MapComprehension (0,*);
EdgeClass IsTransposedPathOf: IsPathDescriptionOf from PathDescription (1,1) role transposedPath aggregation shared to TransposedPathDescription (0,*);
EdgeClass IsTrueExprOf: Greql2Aggregation from Expression (1,1) role trueExpr aggregation shared to ConditionalExpression (0,*);
EdgeClass IsTypeExprOfDeclaration: IsTypeExprOf from Expression (0,1) role typeExpr aggregation shared to SimpleDeclaration (0,*);
EdgeClass IsTypeExprOfFunction: IsTypeExprOf from Expression (0,1) role typeExpr aggregation shared to FunctionApplication (0,*);
EdgeClass IsTypeIdOf: Greql2Aggregation from TypeId (0,*) role typeId aggregation shared to EdgeRestriction (0,*);
EdgeClass IsTypeRestrOf: Greql2Aggregation from TypeId (0,*) role typeRestr aggregation shared to Expression (0,*);
EdgeClass IsVarOf: Greql2Aggregation from Variable (1,1) role var aggregation shared to Definition (0,1);
abstract EdgeClass Greql2Aggregation from Greql2Vertex (0,*) aggregation shared to Greql2Vertex (0,*) { sourcePositions: List<SourcePosition> } ;
abstract EdgeClass IsBoundExprOf: Greql2Aggregation from Expression (1,1) aggregation shared to Greql2Vertex (0,*);
abstract EdgeClass IsTypeExprOf: Greql2Aggregation from Expression (0,*) aggregation shared to Greql2Vertex (0,*);
