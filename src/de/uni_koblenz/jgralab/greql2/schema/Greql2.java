/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.Aggregation;
import de.uni_koblenz.jgralab.Composition;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.impl.Greql2Impl;

import de.uni_koblenz.jgralab.greql2.schema.AlternativePathDescription;
import de.uni_koblenz.jgralab.greql2.schema.CfGrammar;
import de.uni_koblenz.jgralab.greql2.schema.Comprehension;
import de.uni_koblenz.jgralab.greql2.schema.ComprehensionWithTableHeader;
import de.uni_koblenz.jgralab.greql2.schema.ConditionalExpression;
import de.uni_koblenz.jgralab.greql2.schema.Declaration;
import de.uni_koblenz.jgralab.greql2.schema.Definition;
import de.uni_koblenz.jgralab.greql2.schema.DefinitionExpression;
import de.uni_koblenz.jgralab.greql2.schema.Direction;
import de.uni_koblenz.jgralab.greql2.schema.EdgePathDescription;
import de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction;
import de.uni_koblenz.jgralab.greql2.schema.EdgeVertexList;
import de.uni_koblenz.jgralab.greql2.schema.ExponentiatedPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.Expression;
import de.uni_koblenz.jgralab.greql2.schema.FunctionApplication;
import de.uni_koblenz.jgralab.greql2.schema.FunctionId;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Expression;
import de.uni_koblenz.jgralab.greql2.schema.Identifier;
import de.uni_koblenz.jgralab.greql2.schema.IntLiteral;
import de.uni_koblenz.jgralab.greql2.schema.IntermediateVertexPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.IteratedPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.ListRangeConstruction;
import de.uni_koblenz.jgralab.greql2.schema.Nonterminal;
import de.uni_koblenz.jgralab.greql2.schema.OptionalPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.PathDescription;
import de.uni_koblenz.jgralab.greql2.schema.PathExpression;
import de.uni_koblenz.jgralab.greql2.schema.PathSystemConstruction;
import de.uni_koblenz.jgralab.greql2.schema.PrimaryPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.Production;
import de.uni_koblenz.jgralab.greql2.schema.QuantifiedExpression;
import de.uni_koblenz.jgralab.greql2.schema.Quantifier;
import de.uni_koblenz.jgralab.greql2.schema.RecordConstruction;
import de.uni_koblenz.jgralab.greql2.schema.RecordElement;
import de.uni_koblenz.jgralab.greql2.schema.RecordId;
import de.uni_koblenz.jgralab.greql2.schema.RestrictedExpression;
import de.uni_koblenz.jgralab.greql2.schema.RightSide;
import de.uni_koblenz.jgralab.greql2.schema.RoleId;
import de.uni_koblenz.jgralab.greql2.schema.SequentialPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration;
import de.uni_koblenz.jgralab.greql2.schema.Symbol;
import de.uni_koblenz.jgralab.greql2.schema.TableComprehension;
import de.uni_koblenz.jgralab.greql2.schema.TransposedPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.TypeId;
import de.uni_koblenz.jgralab.greql2.schema.ValueConstruction;
import de.uni_koblenz.jgralab.greql2.schema.Variable;

public interface Greql2 extends Graph {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<Greql2Impl> IMPLEMENTATION_CLASS = Greql2Impl.class;

	// ------------------------ Code for AlternativePathDescription ------------------------

	/**
	 * @return the AlternativePathDescription vertex with specified <code>id</code>
	 */
	public AlternativePathDescription getAlternativePathDescription(int id);

	/**
	 * @return the first AlternativePathDescription vertex in this graph
	 */
	public AlternativePathDescription getFirstAlternativePathDescription();

	/**
	 * @return the first AlternativePathDescription vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of AlternativePathDescription are accepted
	 */
	public AlternativePathDescription getFirstAlternativePathDescription(boolean noSubClasses);

	/**
	 * Creates a new AlternativePathDescription vertex in this graph.
	 *
	*/
	public AlternativePathDescription createAlternativePathDescription();

	/**
	 * Creates a new AlternativePathDescription vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public AlternativePathDescription createAlternativePathDescription(int id);

	// ------------------------ Code for AttributeId ------------------------

	/**
	 * @return the AttributeId vertex with specified <code>id</code>
	 */
	public AttributeId getAttributeId(int id);

	/**
	 * @return the first AttributeId vertex in this graph
	 */
	public AttributeId getFirstAttributeId();

	/**
	 * @return the first AttributeId vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of AttributeId are accepted
	 */
	public AttributeId getFirstAttributeId(boolean noSubClasses);

	/**
	 * Creates a new AttributeId vertex in this graph.
	 *
	*/
	public AttributeId createAttributeId();

	/**
	 * Creates a new AttributeId vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public AttributeId createAttributeId(int id);

	// ------------------------ Code for BackwardVertexSet ------------------------

	/**
	 * @return the BackwardVertexSet vertex with specified <code>id</code>
	 */
	public BackwardVertexSet getBackwardVertexSet(int id);

	/**
	 * @return the first BackwardVertexSet vertex in this graph
	 */
	public BackwardVertexSet getFirstBackwardVertexSet();

	/**
	 * @return the first BackwardVertexSet vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of BackwardVertexSet are accepted
	 */
	public BackwardVertexSet getFirstBackwardVertexSet(boolean noSubClasses);

	/**
	 * Creates a new BackwardVertexSet vertex in this graph.
	 *
	*/
	public BackwardVertexSet createBackwardVertexSet();

	/**
	 * Creates a new BackwardVertexSet vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public BackwardVertexSet createBackwardVertexSet(int id);

	// ------------------------ Code for BagComprehension ------------------------

	/**
	 * @return the BagComprehension vertex with specified <code>id</code>
	 */
	public BagComprehension getBagComprehension(int id);

	/**
	 * @return the first BagComprehension vertex in this graph
	 */
	public BagComprehension getFirstBagComprehension();

	/**
	 * @return the first BagComprehension vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of BagComprehension are accepted
	 */
	public BagComprehension getFirstBagComprehension(boolean noSubClasses);

	/**
	 * Creates a new BagComprehension vertex in this graph.
	 *
	*/
	public BagComprehension createBagComprehension();

	/**
	 * Creates a new BagComprehension vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public BagComprehension createBagComprehension(int id);

	// ------------------------ Code for BagConstruction ------------------------

	/**
	 * @return the BagConstruction vertex with specified <code>id</code>
	 */
	public BagConstruction getBagConstruction(int id);

	/**
	 * @return the first BagConstruction vertex in this graph
	 */
	public BagConstruction getFirstBagConstruction();

	/**
	 * @return the first BagConstruction vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of BagConstruction are accepted
	 */
	public BagConstruction getFirstBagConstruction(boolean noSubClasses);

	/**
	 * Creates a new BagConstruction vertex in this graph.
	 *
	*/
	public BagConstruction createBagConstruction();

	/**
	 * Creates a new BagConstruction vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public BagConstruction createBagConstruction(int id);

	// ------------------------ Code for BoolLiteral ------------------------

	/**
	 * @return the BoolLiteral vertex with specified <code>id</code>
	 */
	public BoolLiteral getBoolLiteral(int id);

	/**
	 * @return the first BoolLiteral vertex in this graph
	 */
	public BoolLiteral getFirstBoolLiteral();

	/**
	 * @return the first BoolLiteral vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of BoolLiteral are accepted
	 */
	public BoolLiteral getFirstBoolLiteral(boolean noSubClasses);

	/**
	 * Creates a new BoolLiteral vertex in this graph.
	 *
	*/
	public BoolLiteral createBoolLiteral();

	/**
	 * Creates a new BoolLiteral vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public BoolLiteral createBoolLiteral(int id);

	// ------------------------ Code for CfGrammar ------------------------

	/**
	 * @return the CfGrammar vertex with specified <code>id</code>
	 */
	public CfGrammar getCfGrammar(int id);

	/**
	 * @return the first CfGrammar vertex in this graph
	 */
	public CfGrammar getFirstCfGrammar();

	/**
	 * @return the first CfGrammar vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of CfGrammar are accepted
	 */
	public CfGrammar getFirstCfGrammar(boolean noSubClasses);

	/**
	 * Creates a new CfGrammar vertex in this graph.
	 *
	*/
	public CfGrammar createCfGrammar();

	/**
	 * Creates a new CfGrammar vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public CfGrammar createCfGrammar(int id);

	// ------------------------ Code for Comprehension ------------------------

	/**
	 * @return the Comprehension vertex with specified <code>id</code>
	 */
	public Comprehension getComprehension(int id);

	/**
	 * @return the first Comprehension vertex in this graph
	 */
	public Comprehension getFirstComprehension();

	// ------------------------ Code for ComprehensionWithTableHeader ------------------------

	/**
	 * @return the ComprehensionWithTableHeader vertex with specified <code>id</code>
	 */
	public ComprehensionWithTableHeader getComprehensionWithTableHeader(int id);

	/**
	 * @return the first ComprehensionWithTableHeader vertex in this graph
	 */
	public ComprehensionWithTableHeader getFirstComprehensionWithTableHeader();

	// ------------------------ Code for ConditionalExpression ------------------------

	/**
	 * @return the ConditionalExpression vertex with specified <code>id</code>
	 */
	public ConditionalExpression getConditionalExpression(int id);

	/**
	 * @return the first ConditionalExpression vertex in this graph
	 */
	public ConditionalExpression getFirstConditionalExpression();

	/**
	 * @return the first ConditionalExpression vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ConditionalExpression are accepted
	 */
	public ConditionalExpression getFirstConditionalExpression(boolean noSubClasses);

	/**
	 * Creates a new ConditionalExpression vertex in this graph.
	 *
	*/
	public ConditionalExpression createConditionalExpression();

	/**
	 * Creates a new ConditionalExpression vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public ConditionalExpression createConditionalExpression(int id);

	// ------------------------ Code for Declaration ------------------------

	/**
	 * @return the Declaration vertex with specified <code>id</code>
	 */
	public Declaration getDeclaration(int id);

	/**
	 * @return the first Declaration vertex in this graph
	 */
	public Declaration getFirstDeclaration();

	/**
	 * @return the first Declaration vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Declaration are accepted
	 */
	public Declaration getFirstDeclaration(boolean noSubClasses);

	/**
	 * Creates a new Declaration vertex in this graph.
	 *
	*/
	public Declaration createDeclaration();

	/**
	 * Creates a new Declaration vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public Declaration createDeclaration(int id);

	// ------------------------ Code for Definition ------------------------

	/**
	 * @return the Definition vertex with specified <code>id</code>
	 */
	public Definition getDefinition(int id);

	/**
	 * @return the first Definition vertex in this graph
	 */
	public Definition getFirstDefinition();

	/**
	 * @return the first Definition vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Definition are accepted
	 */
	public Definition getFirstDefinition(boolean noSubClasses);

	/**
	 * Creates a new Definition vertex in this graph.
	 *
	*/
	public Definition createDefinition();

	/**
	 * Creates a new Definition vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public Definition createDefinition(int id);

	// ------------------------ Code for DefinitionExpression ------------------------

	/**
	 * @return the DefinitionExpression vertex with specified <code>id</code>
	 */
	public DefinitionExpression getDefinitionExpression(int id);

	/**
	 * @return the first DefinitionExpression vertex in this graph
	 */
	public DefinitionExpression getFirstDefinitionExpression();

	// ------------------------ Code for Direction ------------------------

	/**
	 * @return the Direction vertex with specified <code>id</code>
	 */
	public Direction getDirection(int id);

	/**
	 * @return the first Direction vertex in this graph
	 */
	public Direction getFirstDirection();

	/**
	 * @return the first Direction vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Direction are accepted
	 */
	public Direction getFirstDirection(boolean noSubClasses);

	/**
	 * Creates a new Direction vertex in this graph.
	 *
	*/
	public Direction createDirection();

	/**
	 * Creates a new Direction vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public Direction createDirection(int id);

	// ------------------------ Code for EdgePathDescription ------------------------

	/**
	 * @return the EdgePathDescription vertex with specified <code>id</code>
	 */
	public EdgePathDescription getEdgePathDescription(int id);

	/**
	 * @return the first EdgePathDescription vertex in this graph
	 */
	public EdgePathDescription getFirstEdgePathDescription();

	/**
	 * @return the first EdgePathDescription vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of EdgePathDescription are accepted
	 */
	public EdgePathDescription getFirstEdgePathDescription(boolean noSubClasses);

	/**
	 * Creates a new EdgePathDescription vertex in this graph.
	 *
	*/
	public EdgePathDescription createEdgePathDescription();

	/**
	 * Creates a new EdgePathDescription vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public EdgePathDescription createEdgePathDescription(int id);

	// ------------------------ Code for EdgeRestriction ------------------------

	/**
	 * @return the EdgeRestriction vertex with specified <code>id</code>
	 */
	public EdgeRestriction getEdgeRestriction(int id);

	/**
	 * @return the first EdgeRestriction vertex in this graph
	 */
	public EdgeRestriction getFirstEdgeRestriction();

	/**
	 * @return the first EdgeRestriction vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of EdgeRestriction are accepted
	 */
	public EdgeRestriction getFirstEdgeRestriction(boolean noSubClasses);

	/**
	 * Creates a new EdgeRestriction vertex in this graph.
	 *
	*/
	public EdgeRestriction createEdgeRestriction();

	/**
	 * Creates a new EdgeRestriction vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public EdgeRestriction createEdgeRestriction(int id);

	// ------------------------ Code for EdgeSetExpression ------------------------

	/**
	 * @return the EdgeSetExpression vertex with specified <code>id</code>
	 */
	public EdgeSetExpression getEdgeSetExpression(int id);

	/**
	 * @return the first EdgeSetExpression vertex in this graph
	 */
	public EdgeSetExpression getFirstEdgeSetExpression();

	/**
	 * @return the first EdgeSetExpression vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of EdgeSetExpression are accepted
	 */
	public EdgeSetExpression getFirstEdgeSetExpression(boolean noSubClasses);

	/**
	 * Creates a new EdgeSetExpression vertex in this graph.
	 *
	*/
	public EdgeSetExpression createEdgeSetExpression();

	/**
	 * Creates a new EdgeSetExpression vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public EdgeSetExpression createEdgeSetExpression(int id);

	// ------------------------ Code for EdgeSubgraphExpression ------------------------

	/**
	 * @return the EdgeSubgraphExpression vertex with specified <code>id</code>
	 */
	public EdgeSubgraphExpression getEdgeSubgraphExpression(int id);

	/**
	 * @return the first EdgeSubgraphExpression vertex in this graph
	 */
	public EdgeSubgraphExpression getFirstEdgeSubgraphExpression();

	/**
	 * @return the first EdgeSubgraphExpression vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of EdgeSubgraphExpression are accepted
	 */
	public EdgeSubgraphExpression getFirstEdgeSubgraphExpression(boolean noSubClasses);

	/**
	 * Creates a new EdgeSubgraphExpression vertex in this graph.
	 *
	*/
	public EdgeSubgraphExpression createEdgeSubgraphExpression();

	/**
	 * Creates a new EdgeSubgraphExpression vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public EdgeSubgraphExpression createEdgeSubgraphExpression(int id);

	// ------------------------ Code for EdgeVertexList ------------------------

	/**
	 * @return the EdgeVertexList vertex with specified <code>id</code>
	 */
	public EdgeVertexList getEdgeVertexList(int id);

	/**
	 * @return the first EdgeVertexList vertex in this graph
	 */
	public EdgeVertexList getFirstEdgeVertexList();

	/**
	 * @return the first EdgeVertexList vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of EdgeVertexList are accepted
	 */
	public EdgeVertexList getFirstEdgeVertexList(boolean noSubClasses);

	/**
	 * Creates a new EdgeVertexList vertex in this graph.
	 *
	*/
	public EdgeVertexList createEdgeVertexList();

	/**
	 * Creates a new EdgeVertexList vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public EdgeVertexList createEdgeVertexList(int id);

	// ------------------------ Code for ElementSetExpression ------------------------

	/**
	 * @return the ElementSetExpression vertex with specified <code>id</code>
	 */
	public ElementSetExpression getElementSetExpression(int id);

	/**
	 * @return the first ElementSetExpression vertex in this graph
	 */
	public ElementSetExpression getFirstElementSetExpression();

	// ------------------------ Code for ExponentiatedPathDescription ------------------------

	/**
	 * @return the ExponentiatedPathDescription vertex with specified <code>id</code>
	 */
	public ExponentiatedPathDescription getExponentiatedPathDescription(int id);

	/**
	 * @return the first ExponentiatedPathDescription vertex in this graph
	 */
	public ExponentiatedPathDescription getFirstExponentiatedPathDescription();

	/**
	 * @return the first ExponentiatedPathDescription vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ExponentiatedPathDescription are accepted
	 */
	public ExponentiatedPathDescription getFirstExponentiatedPathDescription(boolean noSubClasses);

	/**
	 * Creates a new ExponentiatedPathDescription vertex in this graph.
	 *
	*/
	public ExponentiatedPathDescription createExponentiatedPathDescription();

	/**
	 * Creates a new ExponentiatedPathDescription vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public ExponentiatedPathDescription createExponentiatedPathDescription(int id);

	// ------------------------ Code for Expression ------------------------

	/**
	 * @return the Expression vertex with specified <code>id</code>
	 */
	public Expression getExpression(int id);

	/**
	 * @return the first Expression vertex in this graph
	 */
	public Expression getFirstExpression();

	// ------------------------ Code for ForwardVertexSet ------------------------

	/**
	 * @return the ForwardVertexSet vertex with specified <code>id</code>
	 */
	public ForwardVertexSet getForwardVertexSet(int id);

	/**
	 * @return the first ForwardVertexSet vertex in this graph
	 */
	public ForwardVertexSet getFirstForwardVertexSet();

	/**
	 * @return the first ForwardVertexSet vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ForwardVertexSet are accepted
	 */
	public ForwardVertexSet getFirstForwardVertexSet(boolean noSubClasses);

	/**
	 * Creates a new ForwardVertexSet vertex in this graph.
	 *
	*/
	public ForwardVertexSet createForwardVertexSet();

	/**
	 * Creates a new ForwardVertexSet vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public ForwardVertexSet createForwardVertexSet(int id);

	// ------------------------ Code for FunctionApplication ------------------------

	/**
	 * @return the FunctionApplication vertex with specified <code>id</code>
	 */
	public FunctionApplication getFunctionApplication(int id);

	/**
	 * @return the first FunctionApplication vertex in this graph
	 */
	public FunctionApplication getFirstFunctionApplication();

	/**
	 * @return the first FunctionApplication vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of FunctionApplication are accepted
	 */
	public FunctionApplication getFirstFunctionApplication(boolean noSubClasses);

	/**
	 * Creates a new FunctionApplication vertex in this graph.
	 *
	*/
	public FunctionApplication createFunctionApplication();

	/**
	 * Creates a new FunctionApplication vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public FunctionApplication createFunctionApplication(int id);

	// ------------------------ Code for FunctionId ------------------------

	/**
	 * @return the FunctionId vertex with specified <code>id</code>
	 */
	public FunctionId getFunctionId(int id);

	/**
	 * @return the first FunctionId vertex in this graph
	 */
	public FunctionId getFirstFunctionId();

	/**
	 * @return the first FunctionId vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of FunctionId are accepted
	 */
	public FunctionId getFirstFunctionId(boolean noSubClasses);

	/**
	 * Creates a new FunctionId vertex in this graph.
	 *
	*/
	public FunctionId createFunctionId();

	/**
	 * Creates a new FunctionId vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public FunctionId createFunctionId(int id);

	// ------------------------ Code for Greql2Aggregation ------------------------

	/**
	 * @return the Greql2Aggregation edge with specified <code>id</code>
	 */
	public Greql2Aggregation getGreql2Aggregation(int id);

	/**
	 * @return the first Greql2Aggregation edge in this graph
	 */
	public Greql2Aggregation getFirstGreql2AggregationInGraph();

	// ------------------------ Code for Greql2Expression ------------------------

	/**
	 * @return the Greql2Expression vertex with specified <code>id</code>
	 */
	public Greql2Expression getGreql2Expression(int id);

	/**
	 * @return the first Greql2Expression vertex in this graph
	 */
	public Greql2Expression getFirstGreql2Expression();

	/**
	 * @return the first Greql2Expression vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Greql2Expression are accepted
	 */
	public Greql2Expression getFirstGreql2Expression(boolean noSubClasses);

	/**
	 * Creates a new Greql2Expression vertex in this graph.
	 *
	*/
	public Greql2Expression createGreql2Expression();

	/**
	 * Creates a new Greql2Expression vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public Greql2Expression createGreql2Expression(int id);

	// ------------------------ Code for Greql2Vertex ------------------------

	/**
	 * @return the Greql2Vertex vertex with specified <code>id</code>
	 */
	public Greql2Vertex getGreql2Vertex(int id);

	/**
	 * @return the first Greql2Vertex vertex in this graph
	 */
	public Greql2Vertex getFirstGreql2Vertex();

	// ------------------------ Code for Identifier ------------------------

	/**
	 * @return the Identifier vertex with specified <code>id</code>
	 */
	public Identifier getIdentifier(int id);

	/**
	 * @return the first Identifier vertex in this graph
	 */
	public Identifier getFirstIdentifier();

	/**
	 * @return the first Identifier vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Identifier are accepted
	 */
	public Identifier getFirstIdentifier(boolean noSubClasses);

	/**
	 * Creates a new Identifier vertex in this graph.
	 *
	*/
	public Identifier createIdentifier();

	/**
	 * Creates a new Identifier vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public Identifier createIdentifier(int id);

	// ------------------------ Code for IntLiteral ------------------------

	/**
	 * @return the IntLiteral vertex with specified <code>id</code>
	 */
	public IntLiteral getIntLiteral(int id);

	/**
	 * @return the first IntLiteral vertex in this graph
	 */
	public IntLiteral getFirstIntLiteral();

	/**
	 * @return the first IntLiteral vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IntLiteral are accepted
	 */
	public IntLiteral getFirstIntLiteral(boolean noSubClasses);

	/**
	 * Creates a new IntLiteral vertex in this graph.
	 *
	*/
	public IntLiteral createIntLiteral();

	/**
	 * Creates a new IntLiteral vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public IntLiteral createIntLiteral(int id);

	// ------------------------ Code for IntermediateVertexPathDescription ------------------------

	/**
	 * @return the IntermediateVertexPathDescription vertex with specified <code>id</code>
	 */
	public IntermediateVertexPathDescription getIntermediateVertexPathDescription(int id);

	/**
	 * @return the first IntermediateVertexPathDescription vertex in this graph
	 */
	public IntermediateVertexPathDescription getFirstIntermediateVertexPathDescription();

	/**
	 * @return the first IntermediateVertexPathDescription vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IntermediateVertexPathDescription are accepted
	 */
	public IntermediateVertexPathDescription getFirstIntermediateVertexPathDescription(boolean noSubClasses);

	/**
	 * Creates a new IntermediateVertexPathDescription vertex in this graph.
	 *
	*/
	public IntermediateVertexPathDescription createIntermediateVertexPathDescription();

	/**
	 * Creates a new IntermediateVertexPathDescription vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public IntermediateVertexPathDescription createIntermediateVertexPathDescription(int id);

	// ------------------------ Code for IsAlternativePathOf ------------------------

	/**
	 * @return the IsAlternativePathOf edge with specified <code>id</code>
	 */
	public IsAlternativePathOf getIsAlternativePathOf(int id);

	/**
	 * @return the first IsAlternativePathOf edge in this graph
	 */
	public IsAlternativePathOf getFirstIsAlternativePathOfInGraph();

	/**
	 * @return the first IsAlternativePathOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsAlternativePathOf are accepted
	 */
	public IsAlternativePathOf getFirstIsAlternativePathOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsAlternativePathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsAlternativePathOf createIsAlternativePathOf(PathDescription alpha, AlternativePathDescription omega);

	/**
	 * Creates a new IsAlternativePathOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsAlternativePathOf createIsAlternativePathOf(int id, PathDescription alpha, AlternativePathDescription omega);

	// ------------------------ Code for IsArgumentOf ------------------------

	/**
	 * @return the IsArgumentOf edge with specified <code>id</code>
	 */
	public IsArgumentOf getIsArgumentOf(int id);

	/**
	 * @return the first IsArgumentOf edge in this graph
	 */
	public IsArgumentOf getFirstIsArgumentOfInGraph();

	/**
	 * @return the first IsArgumentOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsArgumentOf are accepted
	 */
	public IsArgumentOf getFirstIsArgumentOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsArgumentOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsArgumentOf createIsArgumentOf(Expression alpha, FunctionApplication omega);

	/**
	 * Creates a new IsArgumentOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsArgumentOf createIsArgumentOf(int id, Expression alpha, FunctionApplication omega);

	// ------------------------ Code for IsBoundExprOf ------------------------

	/**
	 * @return the IsBoundExprOf edge with specified <code>id</code>
	 */
	public IsBoundExprOf getIsBoundExprOf(int id);

	/**
	 * @return the first IsBoundExprOf edge in this graph
	 */
	public IsBoundExprOf getFirstIsBoundExprOfInGraph();

	// ------------------------ Code for IsBoundExprOfDefinition ------------------------

	/**
	 * @return the IsBoundExprOfDefinition edge with specified <code>id</code>
	 */
	public IsBoundExprOfDefinition getIsBoundExprOfDefinition(int id);

	/**
	 * @return the first IsBoundExprOfDefinition edge in this graph
	 */
	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinitionInGraph();

	/**
	 * @return the first IsBoundExprOfDefinition edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsBoundExprOfDefinition are accepted
	 */
	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinitionInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsBoundExprOfDefinition edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsBoundExprOfDefinition createIsBoundExprOfDefinition(Expression alpha, DefinitionExpression omega);

	/**
	 * Creates a new IsBoundExprOfDefinition edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsBoundExprOfDefinition createIsBoundExprOfDefinition(int id, Expression alpha, DefinitionExpression omega);

	// ------------------------ Code for IsBoundExprOfQuantifier ------------------------

	/**
	 * @return the IsBoundExprOfQuantifier edge with specified <code>id</code>
	 */
	public IsBoundExprOfQuantifier getIsBoundExprOfQuantifier(int id);

	/**
	 * @return the first IsBoundExprOfQuantifier edge in this graph
	 */
	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifierInGraph();

	/**
	 * @return the first IsBoundExprOfQuantifier edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsBoundExprOfQuantifier are accepted
	 */
	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifierInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsBoundExprOfQuantifier edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsBoundExprOfQuantifier createIsBoundExprOfQuantifier(Expression alpha, QuantifiedExpression omega);

	/**
	 * Creates a new IsBoundExprOfQuantifier edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsBoundExprOfQuantifier createIsBoundExprOfQuantifier(int id, Expression alpha, QuantifiedExpression omega);

	// ------------------------ Code for IsBoundVarOf ------------------------

	/**
	 * @return the IsBoundVarOf edge with specified <code>id</code>
	 */
	public IsBoundVarOf getIsBoundVarOf(int id);

	/**
	 * @return the first IsBoundVarOf edge in this graph
	 */
	public IsBoundVarOf getFirstIsBoundVarOfInGraph();

	/**
	 * @return the first IsBoundVarOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsBoundVarOf are accepted
	 */
	public IsBoundVarOf getFirstIsBoundVarOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsBoundVarOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsBoundVarOf createIsBoundVarOf(Variable alpha, Greql2Expression omega);

	/**
	 * Creates a new IsBoundVarOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsBoundVarOf createIsBoundVarOf(int id, Variable alpha, Greql2Expression omega);

	// ------------------------ Code for IsColumnHeaderExprOf ------------------------

	/**
	 * @return the IsColumnHeaderExprOf edge with specified <code>id</code>
	 */
	public IsColumnHeaderExprOf getIsColumnHeaderExprOf(int id);

	/**
	 * @return the first IsColumnHeaderExprOf edge in this graph
	 */
	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOfInGraph();

	/**
	 * @return the first IsColumnHeaderExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsColumnHeaderExprOf are accepted
	 */
	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsColumnHeaderExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsColumnHeaderExprOf createIsColumnHeaderExprOf(Expression alpha, TableComprehension omega);

	/**
	 * Creates a new IsColumnHeaderExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsColumnHeaderExprOf createIsColumnHeaderExprOf(int id, Expression alpha, TableComprehension omega);

	// ------------------------ Code for IsCompDeclOf ------------------------

	/**
	 * @return the IsCompDeclOf edge with specified <code>id</code>
	 */
	public IsCompDeclOf getIsCompDeclOf(int id);

	/**
	 * @return the first IsCompDeclOf edge in this graph
	 */
	public IsCompDeclOf getFirstIsCompDeclOfInGraph();

	/**
	 * @return the first IsCompDeclOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsCompDeclOf are accepted
	 */
	public IsCompDeclOf getFirstIsCompDeclOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsCompDeclOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsCompDeclOf createIsCompDeclOf(Declaration alpha, Comprehension omega);

	/**
	 * Creates a new IsCompDeclOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsCompDeclOf createIsCompDeclOf(int id, Declaration alpha, Comprehension omega);

	// ------------------------ Code for IsCompResultDefOf ------------------------

	/**
	 * @return the IsCompResultDefOf edge with specified <code>id</code>
	 */
	public IsCompResultDefOf getIsCompResultDefOf(int id);

	/**
	 * @return the first IsCompResultDefOf edge in this graph
	 */
	public IsCompResultDefOf getFirstIsCompResultDefOfInGraph();

	/**
	 * @return the first IsCompResultDefOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsCompResultDefOf are accepted
	 */
	public IsCompResultDefOf getFirstIsCompResultDefOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsCompResultDefOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsCompResultDefOf createIsCompResultDefOf(Expression alpha, Comprehension omega);

	/**
	 * Creates a new IsCompResultDefOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsCompResultDefOf createIsCompResultDefOf(int id, Expression alpha, Comprehension omega);

	// ------------------------ Code for IsConditionOf ------------------------

	/**
	 * @return the IsConditionOf edge with specified <code>id</code>
	 */
	public IsConditionOf getIsConditionOf(int id);

	/**
	 * @return the first IsConditionOf edge in this graph
	 */
	public IsConditionOf getFirstIsConditionOfInGraph();

	/**
	 * @return the first IsConditionOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsConditionOf are accepted
	 */
	public IsConditionOf getFirstIsConditionOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsConditionOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsConditionOf createIsConditionOf(Expression alpha, ConditionalExpression omega);

	/**
	 * Creates a new IsConditionOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsConditionOf createIsConditionOf(int id, Expression alpha, ConditionalExpression omega);

	// ------------------------ Code for IsConstraintOf ------------------------

	/**
	 * @return the IsConstraintOf edge with specified <code>id</code>
	 */
	public IsConstraintOf getIsConstraintOf(int id);

	/**
	 * @return the first IsConstraintOf edge in this graph
	 */
	public IsConstraintOf getFirstIsConstraintOfInGraph();

	/**
	 * @return the first IsConstraintOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsConstraintOf are accepted
	 */
	public IsConstraintOf getFirstIsConstraintOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsConstraintOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsConstraintOf createIsConstraintOf(Expression alpha, Declaration omega);

	/**
	 * Creates a new IsConstraintOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsConstraintOf createIsConstraintOf(int id, Expression alpha, Declaration omega);

	// ------------------------ Code for IsDeclaredVarOf ------------------------

	/**
	 * @return the IsDeclaredVarOf edge with specified <code>id</code>
	 */
	public IsDeclaredVarOf getIsDeclaredVarOf(int id);

	/**
	 * @return the first IsDeclaredVarOf edge in this graph
	 */
	public IsDeclaredVarOf getFirstIsDeclaredVarOfInGraph();

	/**
	 * @return the first IsDeclaredVarOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsDeclaredVarOf are accepted
	 */
	public IsDeclaredVarOf getFirstIsDeclaredVarOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsDeclaredVarOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsDeclaredVarOf createIsDeclaredVarOf(Variable alpha, SimpleDeclaration omega);

	/**
	 * Creates a new IsDeclaredVarOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsDeclaredVarOf createIsDeclaredVarOf(int id, Variable alpha, SimpleDeclaration omega);

	// ------------------------ Code for IsDefinitionOf ------------------------

	/**
	 * @return the IsDefinitionOf edge with specified <code>id</code>
	 */
	public IsDefinitionOf getIsDefinitionOf(int id);

	/**
	 * @return the first IsDefinitionOf edge in this graph
	 */
	public IsDefinitionOf getFirstIsDefinitionOfInGraph();

	/**
	 * @return the first IsDefinitionOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsDefinitionOf are accepted
	 */
	public IsDefinitionOf getFirstIsDefinitionOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsDefinitionOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsDefinitionOf createIsDefinitionOf(Definition alpha, DefinitionExpression omega);

	/**
	 * Creates a new IsDefinitionOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsDefinitionOf createIsDefinitionOf(int id, Definition alpha, DefinitionExpression omega);

	// ------------------------ Code for IsDirectionOf ------------------------

	/**
	 * @return the IsDirectionOf edge with specified <code>id</code>
	 */
	public IsDirectionOf getIsDirectionOf(int id);

	/**
	 * @return the first IsDirectionOf edge in this graph
	 */
	public IsDirectionOf getFirstIsDirectionOfInGraph();

	/**
	 * @return the first IsDirectionOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsDirectionOf are accepted
	 */
	public IsDirectionOf getFirstIsDirectionOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsDirectionOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsDirectionOf createIsDirectionOf(Direction alpha, PrimaryPathDescription omega);

	/**
	 * Creates a new IsDirectionOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsDirectionOf createIsDirectionOf(int id, Direction alpha, PrimaryPathDescription omega);

	// ------------------------ Code for IsEdgeExprOf ------------------------

	/**
	 * @return the IsEdgeExprOf edge with specified <code>id</code>
	 */
	public IsEdgeExprOf getIsEdgeExprOf(int id);

	/**
	 * @return the first IsEdgeExprOf edge in this graph
	 */
	public IsEdgeExprOf getFirstIsEdgeExprOfInGraph();

	/**
	 * @return the first IsEdgeExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeExprOf are accepted
	 */
	public IsEdgeExprOf getFirstIsEdgeExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsEdgeExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsEdgeExprOf createIsEdgeExprOf(Expression alpha, EdgePathDescription omega);

	/**
	 * Creates a new IsEdgeExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsEdgeExprOf createIsEdgeExprOf(int id, Expression alpha, EdgePathDescription omega);

	// ------------------------ Code for IsEdgeOrVertexExprOf ------------------------

	/**
	 * @return the IsEdgeOrVertexExprOf edge with specified <code>id</code>
	 */
	public IsEdgeOrVertexExprOf getIsEdgeOrVertexExprOf(int id);

	/**
	 * @return the first IsEdgeOrVertexExprOf edge in this graph
	 */
	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOfInGraph();

	/**
	 * @return the first IsEdgeOrVertexExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeOrVertexExprOf are accepted
	 */
	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsEdgeOrVertexExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsEdgeOrVertexExprOf createIsEdgeOrVertexExprOf(Expression alpha, EdgeVertexList omega);

	/**
	 * Creates a new IsEdgeOrVertexExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsEdgeOrVertexExprOf createIsEdgeOrVertexExprOf(int id, Expression alpha, EdgeVertexList omega);

	// ------------------------ Code for IsEdgeRestrOf ------------------------

	/**
	 * @return the IsEdgeRestrOf edge with specified <code>id</code>
	 */
	public IsEdgeRestrOf getIsEdgeRestrOf(int id);

	/**
	 * @return the first IsEdgeRestrOf edge in this graph
	 */
	public IsEdgeRestrOf getFirstIsEdgeRestrOfInGraph();

	/**
	 * @return the first IsEdgeRestrOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeRestrOf are accepted
	 */
	public IsEdgeRestrOf getFirstIsEdgeRestrOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsEdgeRestrOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsEdgeRestrOf createIsEdgeRestrOf(EdgeRestriction alpha, PrimaryPathDescription omega);

	/**
	 * Creates a new IsEdgeRestrOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsEdgeRestrOf createIsEdgeRestrOf(int id, EdgeRestriction alpha, PrimaryPathDescription omega);

	// ------------------------ Code for IsEdgeVertexListOf ------------------------

	/**
	 * @return the IsEdgeVertexListOf edge with specified <code>id</code>
	 */
	public IsEdgeVertexListOf getIsEdgeVertexListOf(int id);

	/**
	 * @return the first IsEdgeVertexListOf edge in this graph
	 */
	public IsEdgeVertexListOf getFirstIsEdgeVertexListOfInGraph();

	/**
	 * @return the first IsEdgeVertexListOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeVertexListOf are accepted
	 */
	public IsEdgeVertexListOf getFirstIsEdgeVertexListOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsEdgeVertexListOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsEdgeVertexListOf createIsEdgeVertexListOf(EdgeVertexList alpha, PathSystemConstruction omega);

	/**
	 * Creates a new IsEdgeVertexListOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsEdgeVertexListOf createIsEdgeVertexListOf(int id, EdgeVertexList alpha, PathSystemConstruction omega);

	// ------------------------ Code for IsElementOf ------------------------

	/**
	 * @return the IsElementOf edge with specified <code>id</code>
	 */
	public IsElementOf getIsElementOf(int id);

	/**
	 * @return the first IsElementOf edge in this graph
	 */
	public IsElementOf getFirstIsElementOfInGraph();

	/**
	 * @return the first IsElementOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsElementOf are accepted
	 */
	public IsElementOf getFirstIsElementOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsElementOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsElementOf createIsElementOf(EdgeVertexList alpha, EdgeVertexList omega);

	/**
	 * Creates a new IsElementOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsElementOf createIsElementOf(int id, EdgeVertexList alpha, EdgeVertexList omega);

	// ------------------------ Code for IsExponentOf ------------------------

	/**
	 * @return the IsExponentOf edge with specified <code>id</code>
	 */
	public IsExponentOf getIsExponentOf(int id);

	/**
	 * @return the first IsExponentOf edge in this graph
	 */
	public IsExponentOf getFirstIsExponentOfInGraph();

	/**
	 * @return the first IsExponentOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsExponentOf are accepted
	 */
	public IsExponentOf getFirstIsExponentOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsExponentOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsExponentOf createIsExponentOf(IntLiteral alpha, ExponentiatedPathDescription omega);

	/**
	 * Creates a new IsExponentOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsExponentOf createIsExponentOf(int id, IntLiteral alpha, ExponentiatedPathDescription omega);

	// ------------------------ Code for IsExponentiatedPathOf ------------------------

	/**
	 * @return the IsExponentiatedPathOf edge with specified <code>id</code>
	 */
	public IsExponentiatedPathOf getIsExponentiatedPathOf(int id);

	/**
	 * @return the first IsExponentiatedPathOf edge in this graph
	 */
	public IsExponentiatedPathOf getFirstIsExponentiatedPathOfInGraph();

	/**
	 * @return the first IsExponentiatedPathOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsExponentiatedPathOf are accepted
	 */
	public IsExponentiatedPathOf getFirstIsExponentiatedPathOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsExponentiatedPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsExponentiatedPathOf createIsExponentiatedPathOf(PathDescription alpha, ExponentiatedPathDescription omega);

	/**
	 * Creates a new IsExponentiatedPathOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsExponentiatedPathOf createIsExponentiatedPathOf(int id, PathDescription alpha, ExponentiatedPathDescription omega);

	// ------------------------ Code for IsExprOf ------------------------

	/**
	 * @return the IsExprOf edge with specified <code>id</code>
	 */
	public IsExprOf getIsExprOf(int id);

	/**
	 * @return the first IsExprOf edge in this graph
	 */
	public IsExprOf getFirstIsExprOfInGraph();

	/**
	 * @return the first IsExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsExprOf are accepted
	 */
	public IsExprOf getFirstIsExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsExprOf createIsExprOf(Expression alpha, Definition omega);

	/**
	 * Creates a new IsExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsExprOf createIsExprOf(int id, Expression alpha, Definition omega);

	// ------------------------ Code for IsFalseExprOf ------------------------

	/**
	 * @return the IsFalseExprOf edge with specified <code>id</code>
	 */
	public IsFalseExprOf getIsFalseExprOf(int id);

	/**
	 * @return the first IsFalseExprOf edge in this graph
	 */
	public IsFalseExprOf getFirstIsFalseExprOfInGraph();

	/**
	 * @return the first IsFalseExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsFalseExprOf are accepted
	 */
	public IsFalseExprOf getFirstIsFalseExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsFalseExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsFalseExprOf createIsFalseExprOf(Expression alpha, ConditionalExpression omega);

	/**
	 * Creates a new IsFalseExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsFalseExprOf createIsFalseExprOf(int id, Expression alpha, ConditionalExpression omega);

	// ------------------------ Code for IsFirstValueOf ------------------------

	/**
	 * @return the IsFirstValueOf edge with specified <code>id</code>
	 */
	public IsFirstValueOf getIsFirstValueOf(int id);

	/**
	 * @return the first IsFirstValueOf edge in this graph
	 */
	public IsFirstValueOf getFirstIsFirstValueOfInGraph();

	/**
	 * @return the first IsFirstValueOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsFirstValueOf are accepted
	 */
	public IsFirstValueOf getFirstIsFirstValueOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsFirstValueOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsFirstValueOf createIsFirstValueOf(Expression alpha, ListRangeConstruction omega);

	/**
	 * Creates a new IsFirstValueOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsFirstValueOf createIsFirstValueOf(int id, Expression alpha, ListRangeConstruction omega);

	// ------------------------ Code for IsFunctionIdOf ------------------------

	/**
	 * @return the IsFunctionIdOf edge with specified <code>id</code>
	 */
	public IsFunctionIdOf getIsFunctionIdOf(int id);

	/**
	 * @return the first IsFunctionIdOf edge in this graph
	 */
	public IsFunctionIdOf getFirstIsFunctionIdOfInGraph();

	/**
	 * @return the first IsFunctionIdOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsFunctionIdOf are accepted
	 */
	public IsFunctionIdOf getFirstIsFunctionIdOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsFunctionIdOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsFunctionIdOf createIsFunctionIdOf(FunctionId alpha, FunctionApplication omega);

	/**
	 * Creates a new IsFunctionIdOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsFunctionIdOf createIsFunctionIdOf(int id, FunctionId alpha, FunctionApplication omega);

	// ------------------------ Code for IsGoalRestrOf ------------------------

	/**
	 * @return the IsGoalRestrOf edge with specified <code>id</code>
	 */
	public IsGoalRestrOf getIsGoalRestrOf(int id);

	/**
	 * @return the first IsGoalRestrOf edge in this graph
	 */
	public IsGoalRestrOf getFirstIsGoalRestrOfInGraph();

	/**
	 * @return the first IsGoalRestrOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsGoalRestrOf are accepted
	 */
	public IsGoalRestrOf getFirstIsGoalRestrOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsGoalRestrOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsGoalRestrOf createIsGoalRestrOf(Expression alpha, PathDescription omega);

	/**
	 * Creates a new IsGoalRestrOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsGoalRestrOf createIsGoalRestrOf(int id, Expression alpha, PathDescription omega);

	// ------------------------ Code for IsIdOf ------------------------

	/**
	 * @return the IsIdOf edge with specified <code>id</code>
	 */
	public IsIdOf getIsIdOf(int id);

	/**
	 * @return the first IsIdOf edge in this graph
	 */
	public IsIdOf getFirstIsIdOfInGraph();

	/**
	 * @return the first IsIdOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsIdOf are accepted
	 */
	public IsIdOf getFirstIsIdOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsIdOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsIdOf createIsIdOf(Identifier alpha, Greql2Expression omega);

	/**
	 * Creates a new IsIdOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsIdOf createIsIdOf(int id, Identifier alpha, Greql2Expression omega);

	// ------------------------ Code for IsIntermediateVertexOf ------------------------

	/**
	 * @return the IsIntermediateVertexOf edge with specified <code>id</code>
	 */
	public IsIntermediateVertexOf getIsIntermediateVertexOf(int id);

	/**
	 * @return the first IsIntermediateVertexOf edge in this graph
	 */
	public IsIntermediateVertexOf getFirstIsIntermediateVertexOfInGraph();

	/**
	 * @return the first IsIntermediateVertexOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsIntermediateVertexOf are accepted
	 */
	public IsIntermediateVertexOf getFirstIsIntermediateVertexOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsIntermediateVertexOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsIntermediateVertexOf createIsIntermediateVertexOf(Expression alpha, IntermediateVertexPathDescription omega);

	/**
	 * Creates a new IsIntermediateVertexOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsIntermediateVertexOf createIsIntermediateVertexOf(int id, Expression alpha, IntermediateVertexPathDescription omega);

	// ------------------------ Code for IsIteratedPathOf ------------------------

	/**
	 * @return the IsIteratedPathOf edge with specified <code>id</code>
	 */
	public IsIteratedPathOf getIsIteratedPathOf(int id);

	/**
	 * @return the first IsIteratedPathOf edge in this graph
	 */
	public IsIteratedPathOf getFirstIsIteratedPathOfInGraph();

	/**
	 * @return the first IsIteratedPathOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsIteratedPathOf are accepted
	 */
	public IsIteratedPathOf getFirstIsIteratedPathOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsIteratedPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsIteratedPathOf createIsIteratedPathOf(PathDescription alpha, IteratedPathDescription omega);

	/**
	 * Creates a new IsIteratedPathOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsIteratedPathOf createIsIteratedPathOf(int id, PathDescription alpha, IteratedPathDescription omega);

	// ------------------------ Code for IsLastValueOf ------------------------

	/**
	 * @return the IsLastValueOf edge with specified <code>id</code>
	 */
	public IsLastValueOf getIsLastValueOf(int id);

	/**
	 * @return the first IsLastValueOf edge in this graph
	 */
	public IsLastValueOf getFirstIsLastValueOfInGraph();

	/**
	 * @return the first IsLastValueOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsLastValueOf are accepted
	 */
	public IsLastValueOf getFirstIsLastValueOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsLastValueOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsLastValueOf createIsLastValueOf(Expression alpha, ListRangeConstruction omega);

	/**
	 * Creates a new IsLastValueOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsLastValueOf createIsLastValueOf(int id, Expression alpha, ListRangeConstruction omega);

	// ------------------------ Code for IsLeftSideOf ------------------------

	/**
	 * @return the IsLeftSideOf edge with specified <code>id</code>
	 */
	public IsLeftSideOf getIsLeftSideOf(int id);

	/**
	 * @return the first IsLeftSideOf edge in this graph
	 */
	public IsLeftSideOf getFirstIsLeftSideOfInGraph();

	/**
	 * @return the first IsLeftSideOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsLeftSideOf are accepted
	 */
	public IsLeftSideOf getFirstIsLeftSideOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsLeftSideOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsLeftSideOf createIsLeftSideOf(Nonterminal alpha, Production omega);

	/**
	 * Creates a new IsLeftSideOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsLeftSideOf createIsLeftSideOf(int id, Nonterminal alpha, Production omega);

	// ------------------------ Code for IsNullExprOf ------------------------

	/**
	 * @return the IsNullExprOf edge with specified <code>id</code>
	 */
	public IsNullExprOf getIsNullExprOf(int id);

	/**
	 * @return the first IsNullExprOf edge in this graph
	 */
	public IsNullExprOf getFirstIsNullExprOfInGraph();

	/**
	 * @return the first IsNullExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsNullExprOf are accepted
	 */
	public IsNullExprOf getFirstIsNullExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsNullExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsNullExprOf createIsNullExprOf(Expression alpha, ConditionalExpression omega);

	/**
	 * Creates a new IsNullExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsNullExprOf createIsNullExprOf(int id, Expression alpha, ConditionalExpression omega);

	// ------------------------ Code for IsOptionalPathOf ------------------------

	/**
	 * @return the IsOptionalPathOf edge with specified <code>id</code>
	 */
	public IsOptionalPathOf getIsOptionalPathOf(int id);

	/**
	 * @return the first IsOptionalPathOf edge in this graph
	 */
	public IsOptionalPathOf getFirstIsOptionalPathOfInGraph();

	/**
	 * @return the first IsOptionalPathOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsOptionalPathOf are accepted
	 */
	public IsOptionalPathOf getFirstIsOptionalPathOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsOptionalPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsOptionalPathOf createIsOptionalPathOf(PathDescription alpha, OptionalPathDescription omega);

	/**
	 * Creates a new IsOptionalPathOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsOptionalPathOf createIsOptionalPathOf(int id, PathDescription alpha, OptionalPathDescription omega);

	// ------------------------ Code for IsPartOf ------------------------

	/**
	 * @return the IsPartOf edge with specified <code>id</code>
	 */
	public IsPartOf getIsPartOf(int id);

	/**
	 * @return the first IsPartOf edge in this graph
	 */
	public IsPartOf getFirstIsPartOfInGraph();

	/**
	 * @return the first IsPartOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsPartOf are accepted
	 */
	public IsPartOf getFirstIsPartOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsPartOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsPartOf createIsPartOf(Expression alpha, ValueConstruction omega);

	/**
	 * Creates a new IsPartOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsPartOf createIsPartOf(int id, Expression alpha, ValueConstruction omega);

	// ------------------------ Code for IsPathDescriptionOf ------------------------

	/**
	 * @return the IsPathDescriptionOf edge with specified <code>id</code>
	 */
	public IsPathDescriptionOf getIsPathDescriptionOf(int id);

	/**
	 * @return the first IsPathDescriptionOf edge in this graph
	 */
	public IsPathDescriptionOf getFirstIsPathDescriptionOfInGraph();

	// ------------------------ Code for IsPathOf ------------------------

	/**
	 * @return the IsPathOf edge with specified <code>id</code>
	 */
	public IsPathOf getIsPathOf(int id);

	/**
	 * @return the first IsPathOf edge in this graph
	 */
	public IsPathOf getFirstIsPathOfInGraph();

	/**
	 * @return the first IsPathOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsPathOf are accepted
	 */
	public IsPathOf getFirstIsPathOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsPathOf createIsPathOf(Expression alpha, PathExpression omega);

	/**
	 * Creates a new IsPathOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsPathOf createIsPathOf(int id, Expression alpha, PathExpression omega);

	// ------------------------ Code for IsProductionOf ------------------------

	/**
	 * @return the IsProductionOf edge with specified <code>id</code>
	 */
	public IsProductionOf getIsProductionOf(int id);

	/**
	 * @return the first IsProductionOf edge in this graph
	 */
	public IsProductionOf getFirstIsProductionOfInGraph();

	/**
	 * @return the first IsProductionOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsProductionOf are accepted
	 */
	public IsProductionOf getFirstIsProductionOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsProductionOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsProductionOf createIsProductionOf(Production alpha, CfGrammar omega);

	/**
	 * Creates a new IsProductionOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsProductionOf createIsProductionOf(int id, Production alpha, CfGrammar omega);

	// ------------------------ Code for IsQuantifiedDeclOf ------------------------

	/**
	 * @return the IsQuantifiedDeclOf edge with specified <code>id</code>
	 */
	public IsQuantifiedDeclOf getIsQuantifiedDeclOf(int id);

	/**
	 * @return the first IsQuantifiedDeclOf edge in this graph
	 */
	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOfInGraph();

	/**
	 * @return the first IsQuantifiedDeclOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsQuantifiedDeclOf are accepted
	 */
	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsQuantifiedDeclOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsQuantifiedDeclOf createIsQuantifiedDeclOf(Declaration alpha, QuantifiedExpression omega);

	/**
	 * Creates a new IsQuantifiedDeclOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsQuantifiedDeclOf createIsQuantifiedDeclOf(int id, Declaration alpha, QuantifiedExpression omega);

	// ------------------------ Code for IsQuantifierOf ------------------------

	/**
	 * @return the IsQuantifierOf edge with specified <code>id</code>
	 */
	public IsQuantifierOf getIsQuantifierOf(int id);

	/**
	 * @return the first IsQuantifierOf edge in this graph
	 */
	public IsQuantifierOf getFirstIsQuantifierOfInGraph();

	/**
	 * @return the first IsQuantifierOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsQuantifierOf are accepted
	 */
	public IsQuantifierOf getFirstIsQuantifierOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsQuantifierOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsQuantifierOf createIsQuantifierOf(Quantifier alpha, QuantifiedExpression omega);

	/**
	 * Creates a new IsQuantifierOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsQuantifierOf createIsQuantifierOf(int id, Quantifier alpha, QuantifiedExpression omega);

	// ------------------------ Code for IsQueryExprOf ------------------------

	/**
	 * @return the IsQueryExprOf edge with specified <code>id</code>
	 */
	public IsQueryExprOf getIsQueryExprOf(int id);

	/**
	 * @return the first IsQueryExprOf edge in this graph
	 */
	public IsQueryExprOf getFirstIsQueryExprOfInGraph();

	/**
	 * @return the first IsQueryExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsQueryExprOf are accepted
	 */
	public IsQueryExprOf getFirstIsQueryExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsQueryExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsQueryExprOf createIsQueryExprOf(Expression alpha, Greql2Expression omega);

	/**
	 * Creates a new IsQueryExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsQueryExprOf createIsQueryExprOf(int id, Expression alpha, Greql2Expression omega);

	// ------------------------ Code for IsRecordElementOf ------------------------

	/**
	 * @return the IsRecordElementOf edge with specified <code>id</code>
	 */
	public IsRecordElementOf getIsRecordElementOf(int id);

	/**
	 * @return the first IsRecordElementOf edge in this graph
	 */
	public IsRecordElementOf getFirstIsRecordElementOfInGraph();

	/**
	 * @return the first IsRecordElementOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRecordElementOf are accepted
	 */
	public IsRecordElementOf getFirstIsRecordElementOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsRecordElementOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRecordElementOf createIsRecordElementOf(RecordElement alpha, RecordConstruction omega);

	/**
	 * Creates a new IsRecordElementOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRecordElementOf createIsRecordElementOf(int id, RecordElement alpha, RecordConstruction omega);

	// ------------------------ Code for IsRecordExprOf ------------------------

	/**
	 * @return the IsRecordExprOf edge with specified <code>id</code>
	 */
	public IsRecordExprOf getIsRecordExprOf(int id);

	/**
	 * @return the first IsRecordExprOf edge in this graph
	 */
	public IsRecordExprOf getFirstIsRecordExprOfInGraph();

	/**
	 * @return the first IsRecordExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRecordExprOf are accepted
	 */
	public IsRecordExprOf getFirstIsRecordExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsRecordExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRecordExprOf createIsRecordExprOf(Expression alpha, RecordElement omega);

	/**
	 * Creates a new IsRecordExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRecordExprOf createIsRecordExprOf(int id, Expression alpha, RecordElement omega);

	// ------------------------ Code for IsRecordIdOf ------------------------

	/**
	 * @return the IsRecordIdOf edge with specified <code>id</code>
	 */
	public IsRecordIdOf getIsRecordIdOf(int id);

	/**
	 * @return the first IsRecordIdOf edge in this graph
	 */
	public IsRecordIdOf getFirstIsRecordIdOfInGraph();

	/**
	 * @return the first IsRecordIdOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRecordIdOf are accepted
	 */
	public IsRecordIdOf getFirstIsRecordIdOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsRecordIdOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRecordIdOf createIsRecordIdOf(RecordId alpha, RecordElement omega);

	/**
	 * Creates a new IsRecordIdOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRecordIdOf createIsRecordIdOf(int id, RecordId alpha, RecordElement omega);

	// ------------------------ Code for IsRestrictedExprOf ------------------------

	/**
	 * @return the IsRestrictedExprOf edge with specified <code>id</code>
	 */
	public IsRestrictedExprOf getIsRestrictedExprOf(int id);

	/**
	 * @return the first IsRestrictedExprOf edge in this graph
	 */
	public IsRestrictedExprOf getFirstIsRestrictedExprOfInGraph();

	/**
	 * @return the first IsRestrictedExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRestrictedExprOf are accepted
	 */
	public IsRestrictedExprOf getFirstIsRestrictedExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsRestrictedExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRestrictedExprOf createIsRestrictedExprOf(Expression alpha, RestrictedExpression omega);

	/**
	 * Creates a new IsRestrictedExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRestrictedExprOf createIsRestrictedExprOf(int id, Expression alpha, RestrictedExpression omega);

	// ------------------------ Code for IsRestrictionOf ------------------------

	/**
	 * @return the IsRestrictionOf edge with specified <code>id</code>
	 */
	public IsRestrictionOf getIsRestrictionOf(int id);

	/**
	 * @return the first IsRestrictionOf edge in this graph
	 */
	public IsRestrictionOf getFirstIsRestrictionOfInGraph();

	/**
	 * @return the first IsRestrictionOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRestrictionOf are accepted
	 */
	public IsRestrictionOf getFirstIsRestrictionOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsRestrictionOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRestrictionOf createIsRestrictionOf(Expression alpha, RestrictedExpression omega);

	/**
	 * Creates a new IsRestrictionOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRestrictionOf createIsRestrictionOf(int id, Expression alpha, RestrictedExpression omega);

	// ------------------------ Code for IsRightSideOf ------------------------

	/**
	 * @return the IsRightSideOf edge with specified <code>id</code>
	 */
	public IsRightSideOf getIsRightSideOf(int id);

	/**
	 * @return the first IsRightSideOf edge in this graph
	 */
	public IsRightSideOf getFirstIsRightSideOfInGraph();

	/**
	 * @return the first IsRightSideOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRightSideOf are accepted
	 */
	public IsRightSideOf getFirstIsRightSideOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsRightSideOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRightSideOf createIsRightSideOf(RightSide alpha, Production omega);

	/**
	 * Creates a new IsRightSideOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRightSideOf createIsRightSideOf(int id, RightSide alpha, Production omega);

	// ------------------------ Code for IsRoleIdOf ------------------------

	/**
	 * @return the IsRoleIdOf edge with specified <code>id</code>
	 */
	public IsRoleIdOf getIsRoleIdOf(int id);

	/**
	 * @return the first IsRoleIdOf edge in this graph
	 */
	public IsRoleIdOf getFirstIsRoleIdOfInGraph();

	/**
	 * @return the first IsRoleIdOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRoleIdOf are accepted
	 */
	public IsRoleIdOf getFirstIsRoleIdOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsRoleIdOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRoleIdOf createIsRoleIdOf(RoleId alpha, EdgeRestriction omega);

	/**
	 * Creates a new IsRoleIdOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRoleIdOf createIsRoleIdOf(int id, RoleId alpha, EdgeRestriction omega);

	// ------------------------ Code for IsRootOf ------------------------

	/**
	 * @return the IsRootOf edge with specified <code>id</code>
	 */
	public IsRootOf getIsRootOf(int id);

	/**
	 * @return the first IsRootOf edge in this graph
	 */
	public IsRootOf getFirstIsRootOfInGraph();

	/**
	 * @return the first IsRootOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRootOf are accepted
	 */
	public IsRootOf getFirstIsRootOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsRootOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRootOf createIsRootOf(Expression alpha, PathSystemConstruction omega);

	/**
	 * Creates a new IsRootOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRootOf createIsRootOf(int id, Expression alpha, PathSystemConstruction omega);

	// ------------------------ Code for IsRowHeaderExprOf ------------------------

	/**
	 * @return the IsRowHeaderExprOf edge with specified <code>id</code>
	 */
	public IsRowHeaderExprOf getIsRowHeaderExprOf(int id);

	/**
	 * @return the first IsRowHeaderExprOf edge in this graph
	 */
	public IsRowHeaderExprOf getFirstIsRowHeaderExprOfInGraph();

	/**
	 * @return the first IsRowHeaderExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRowHeaderExprOf are accepted
	 */
	public IsRowHeaderExprOf getFirstIsRowHeaderExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsRowHeaderExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRowHeaderExprOf createIsRowHeaderExprOf(Expression alpha, TableComprehension omega);

	/**
	 * Creates a new IsRowHeaderExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsRowHeaderExprOf createIsRowHeaderExprOf(int id, Expression alpha, TableComprehension omega);

	// ------------------------ Code for IsSequenceElementOf ------------------------

	/**
	 * @return the IsSequenceElementOf edge with specified <code>id</code>
	 */
	public IsSequenceElementOf getIsSequenceElementOf(int id);

	/**
	 * @return the first IsSequenceElementOf edge in this graph
	 */
	public IsSequenceElementOf getFirstIsSequenceElementOfInGraph();

	/**
	 * @return the first IsSequenceElementOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSequenceElementOf are accepted
	 */
	public IsSequenceElementOf getFirstIsSequenceElementOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsSequenceElementOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSequenceElementOf createIsSequenceElementOf(PathDescription alpha, SequentialPathDescription omega);

	/**
	 * Creates a new IsSequenceElementOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSequenceElementOf createIsSequenceElementOf(int id, PathDescription alpha, SequentialPathDescription omega);

	// ------------------------ Code for IsSimpleDeclOf ------------------------

	/**
	 * @return the IsSimpleDeclOf edge with specified <code>id</code>
	 */
	public IsSimpleDeclOf getIsSimpleDeclOf(int id);

	/**
	 * @return the first IsSimpleDeclOf edge in this graph
	 */
	public IsSimpleDeclOf getFirstIsSimpleDeclOfInGraph();

	/**
	 * @return the first IsSimpleDeclOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSimpleDeclOf are accepted
	 */
	public IsSimpleDeclOf getFirstIsSimpleDeclOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsSimpleDeclOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSimpleDeclOf createIsSimpleDeclOf(SimpleDeclaration alpha, Declaration omega);

	/**
	 * Creates a new IsSimpleDeclOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSimpleDeclOf createIsSimpleDeclOf(int id, SimpleDeclaration alpha, Declaration omega);

	// ------------------------ Code for IsStartExprOf ------------------------

	/**
	 * @return the IsStartExprOf edge with specified <code>id</code>
	 */
	public IsStartExprOf getIsStartExprOf(int id);

	/**
	 * @return the first IsStartExprOf edge in this graph
	 */
	public IsStartExprOf getFirstIsStartExprOfInGraph();

	/**
	 * @return the first IsStartExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsStartExprOf are accepted
	 */
	public IsStartExprOf getFirstIsStartExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsStartExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsStartExprOf createIsStartExprOf(Expression alpha, PathExpression omega);

	/**
	 * Creates a new IsStartExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsStartExprOf createIsStartExprOf(int id, Expression alpha, PathExpression omega);

	// ------------------------ Code for IsStartRestrOf ------------------------

	/**
	 * @return the IsStartRestrOf edge with specified <code>id</code>
	 */
	public IsStartRestrOf getIsStartRestrOf(int id);

	/**
	 * @return the first IsStartRestrOf edge in this graph
	 */
	public IsStartRestrOf getFirstIsStartRestrOfInGraph();

	/**
	 * @return the first IsStartRestrOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsStartRestrOf are accepted
	 */
	public IsStartRestrOf getFirstIsStartRestrOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsStartRestrOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsStartRestrOf createIsStartRestrOf(Expression alpha, PathDescription omega);

	/**
	 * Creates a new IsStartRestrOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsStartRestrOf createIsStartRestrOf(int id, Expression alpha, PathDescription omega);

	// ------------------------ Code for IsSubPathOf ------------------------

	/**
	 * @return the IsSubPathOf edge with specified <code>id</code>
	 */
	public IsSubPathOf getIsSubPathOf(int id);

	/**
	 * @return the first IsSubPathOf edge in this graph
	 */
	public IsSubPathOf getFirstIsSubPathOfInGraph();

	/**
	 * @return the first IsSubPathOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubPathOf are accepted
	 */
	public IsSubPathOf getFirstIsSubPathOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsSubPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSubPathOf createIsSubPathOf(PathDescription alpha, IntermediateVertexPathDescription omega);

	/**
	 * Creates a new IsSubPathOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSubPathOf createIsSubPathOf(int id, PathDescription alpha, IntermediateVertexPathDescription omega);

	// ------------------------ Code for IsSubgraphOf ------------------------

	/**
	 * @return the IsSubgraphOf edge with specified <code>id</code>
	 */
	public IsSubgraphOf getIsSubgraphOf(int id);

	/**
	 * @return the first IsSubgraphOf edge in this graph
	 */
	public IsSubgraphOf getFirstIsSubgraphOfInGraph();

	/**
	 * @return the first IsSubgraphOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubgraphOf are accepted
	 */
	public IsSubgraphOf getFirstIsSubgraphOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsSubgraphOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSubgraphOf createIsSubgraphOf(Expression alpha, Declaration omega);

	/**
	 * Creates a new IsSubgraphOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSubgraphOf createIsSubgraphOf(int id, Expression alpha, Declaration omega);

	// ------------------------ Code for IsSymbolOf ------------------------

	/**
	 * @return the IsSymbolOf edge with specified <code>id</code>
	 */
	public IsSymbolOf getIsSymbolOf(int id);

	/**
	 * @return the first IsSymbolOf edge in this graph
	 */
	public IsSymbolOf getFirstIsSymbolOfInGraph();

	/**
	 * @return the first IsSymbolOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSymbolOf are accepted
	 */
	public IsSymbolOf getFirstIsSymbolOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsSymbolOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSymbolOf createIsSymbolOf(Symbol alpha, RightSide omega);

	/**
	 * Creates a new IsSymbolOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSymbolOf createIsSymbolOf(int id, Symbol alpha, RightSide omega);

	// ------------------------ Code for IsTableHeaderOf ------------------------

	/**
	 * @return the IsTableHeaderOf edge with specified <code>id</code>
	 */
	public IsTableHeaderOf getIsTableHeaderOf(int id);

	/**
	 * @return the first IsTableHeaderOf edge in this graph
	 */
	public IsTableHeaderOf getFirstIsTableHeaderOfInGraph();

	/**
	 * @return the first IsTableHeaderOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTableHeaderOf are accepted
	 */
	public IsTableHeaderOf getFirstIsTableHeaderOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsTableHeaderOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTableHeaderOf createIsTableHeaderOf(Expression alpha, ComprehensionWithTableHeader omega);

	/**
	 * Creates a new IsTableHeaderOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTableHeaderOf createIsTableHeaderOf(int id, Expression alpha, ComprehensionWithTableHeader omega);

	// ------------------------ Code for IsTargetExprOf ------------------------

	/**
	 * @return the IsTargetExprOf edge with specified <code>id</code>
	 */
	public IsTargetExprOf getIsTargetExprOf(int id);

	/**
	 * @return the first IsTargetExprOf edge in this graph
	 */
	public IsTargetExprOf getFirstIsTargetExprOfInGraph();

	/**
	 * @return the first IsTargetExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTargetExprOf are accepted
	 */
	public IsTargetExprOf getFirstIsTargetExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsTargetExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTargetExprOf createIsTargetExprOf(Expression alpha, PathExpression omega);

	/**
	 * Creates a new IsTargetExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTargetExprOf createIsTargetExprOf(int id, Expression alpha, PathExpression omega);

	// ------------------------ Code for IsTransposedPathOf ------------------------

	/**
	 * @return the IsTransposedPathOf edge with specified <code>id</code>
	 */
	public IsTransposedPathOf getIsTransposedPathOf(int id);

	/**
	 * @return the first IsTransposedPathOf edge in this graph
	 */
	public IsTransposedPathOf getFirstIsTransposedPathOfInGraph();

	/**
	 * @return the first IsTransposedPathOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTransposedPathOf are accepted
	 */
	public IsTransposedPathOf getFirstIsTransposedPathOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsTransposedPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTransposedPathOf createIsTransposedPathOf(PathDescription alpha, TransposedPathDescription omega);

	/**
	 * Creates a new IsTransposedPathOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTransposedPathOf createIsTransposedPathOf(int id, PathDescription alpha, TransposedPathDescription omega);

	// ------------------------ Code for IsTrueExprOf ------------------------

	/**
	 * @return the IsTrueExprOf edge with specified <code>id</code>
	 */
	public IsTrueExprOf getIsTrueExprOf(int id);

	/**
	 * @return the first IsTrueExprOf edge in this graph
	 */
	public IsTrueExprOf getFirstIsTrueExprOfInGraph();

	/**
	 * @return the first IsTrueExprOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTrueExprOf are accepted
	 */
	public IsTrueExprOf getFirstIsTrueExprOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsTrueExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTrueExprOf createIsTrueExprOf(Expression alpha, ConditionalExpression omega);

	/**
	 * Creates a new IsTrueExprOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTrueExprOf createIsTrueExprOf(int id, Expression alpha, ConditionalExpression omega);

	// ------------------------ Code for IsTypeExprOf ------------------------

	/**
	 * @return the IsTypeExprOf edge with specified <code>id</code>
	 */
	public IsTypeExprOf getIsTypeExprOf(int id);

	/**
	 * @return the first IsTypeExprOf edge in this graph
	 */
	public IsTypeExprOf getFirstIsTypeExprOfInGraph();

	// ------------------------ Code for IsTypeExprOfDeclaration ------------------------

	/**
	 * @return the IsTypeExprOfDeclaration edge with specified <code>id</code>
	 */
	public IsTypeExprOfDeclaration getIsTypeExprOfDeclaration(int id);

	/**
	 * @return the first IsTypeExprOfDeclaration edge in this graph
	 */
	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclarationInGraph();

	/**
	 * @return the first IsTypeExprOfDeclaration edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeExprOfDeclaration are accepted
	 */
	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclarationInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsTypeExprOfDeclaration edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTypeExprOfDeclaration createIsTypeExprOfDeclaration(Expression alpha, SimpleDeclaration omega);

	/**
	 * Creates a new IsTypeExprOfDeclaration edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTypeExprOfDeclaration createIsTypeExprOfDeclaration(int id, Expression alpha, SimpleDeclaration omega);

	// ------------------------ Code for IsTypeExprOfFunction ------------------------

	/**
	 * @return the IsTypeExprOfFunction edge with specified <code>id</code>
	 */
	public IsTypeExprOfFunction getIsTypeExprOfFunction(int id);

	/**
	 * @return the first IsTypeExprOfFunction edge in this graph
	 */
	public IsTypeExprOfFunction getFirstIsTypeExprOfFunctionInGraph();

	/**
	 * @return the first IsTypeExprOfFunction edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeExprOfFunction are accepted
	 */
	public IsTypeExprOfFunction getFirstIsTypeExprOfFunctionInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsTypeExprOfFunction edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTypeExprOfFunction createIsTypeExprOfFunction(Expression alpha, FunctionApplication omega);

	/**
	 * Creates a new IsTypeExprOfFunction edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTypeExprOfFunction createIsTypeExprOfFunction(int id, Expression alpha, FunctionApplication omega);

	// ------------------------ Code for IsTypeIdOf ------------------------

	/**
	 * @return the IsTypeIdOf edge with specified <code>id</code>
	 */
	public IsTypeIdOf getIsTypeIdOf(int id);

	/**
	 * @return the first IsTypeIdOf edge in this graph
	 */
	public IsTypeIdOf getFirstIsTypeIdOfInGraph();

	/**
	 * @return the first IsTypeIdOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeIdOf are accepted
	 */
	public IsTypeIdOf getFirstIsTypeIdOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsTypeIdOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTypeIdOf createIsTypeIdOf(TypeId alpha, EdgeRestriction omega);

	/**
	 * Creates a new IsTypeIdOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTypeIdOf createIsTypeIdOf(int id, TypeId alpha, EdgeRestriction omega);

	// ------------------------ Code for IsTypeRestrOf ------------------------

	/**
	 * @return the IsTypeRestrOf edge with specified <code>id</code>
	 */
	public IsTypeRestrOf getIsTypeRestrOf(int id);

	/**
	 * @return the first IsTypeRestrOf edge in this graph
	 */
	public IsTypeRestrOf getFirstIsTypeRestrOfInGraph();

	/**
	 * @return the first IsTypeRestrOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeRestrOf are accepted
	 */
	public IsTypeRestrOf getFirstIsTypeRestrOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsTypeRestrOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTypeRestrOf createIsTypeRestrOf(TypeId alpha, Expression omega);

	/**
	 * Creates a new IsTypeRestrOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsTypeRestrOf createIsTypeRestrOf(int id, TypeId alpha, Expression omega);

	// ------------------------ Code for IsVarOf ------------------------

	/**
	 * @return the IsVarOf edge with specified <code>id</code>
	 */
	public IsVarOf getIsVarOf(int id);

	/**
	 * @return the first IsVarOf edge in this graph
	 */
	public IsVarOf getFirstIsVarOfInGraph();

	/**
	 * @return the first IsVarOf edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsVarOf are accepted
	 */
	public IsVarOf getFirstIsVarOfInGraph(boolean noSubClasses);

	/**
	 * Creates a new IsVarOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsVarOf createIsVarOf(Variable alpha, Definition omega);

	/**
	 * Creates a new IsVarOf edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsVarOf createIsVarOf(int id, Variable alpha, Definition omega);

	// ------------------------ Code for IteratedPathDescription ------------------------

	/**
	 * @return the IteratedPathDescription vertex with specified <code>id</code>
	 */
	public IteratedPathDescription getIteratedPathDescription(int id);

	/**
	 * @return the first IteratedPathDescription vertex in this graph
	 */
	public IteratedPathDescription getFirstIteratedPathDescription();

	/**
	 * @return the first IteratedPathDescription vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IteratedPathDescription are accepted
	 */
	public IteratedPathDescription getFirstIteratedPathDescription(boolean noSubClasses);

	/**
	 * Creates a new IteratedPathDescription vertex in this graph.
	 *
	*/
	public IteratedPathDescription createIteratedPathDescription();

	/**
	 * Creates a new IteratedPathDescription vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public IteratedPathDescription createIteratedPathDescription(int id);

	// ------------------------ Code for LetExpression ------------------------

	/**
	 * @return the LetExpression vertex with specified <code>id</code>
	 */
	public LetExpression getLetExpression(int id);

	/**
	 * @return the first LetExpression vertex in this graph
	 */
	public LetExpression getFirstLetExpression();

	/**
	 * @return the first LetExpression vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of LetExpression are accepted
	 */
	public LetExpression getFirstLetExpression(boolean noSubClasses);

	/**
	 * Creates a new LetExpression vertex in this graph.
	 *
	*/
	public LetExpression createLetExpression();

	/**
	 * Creates a new LetExpression vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public LetExpression createLetExpression(int id);

	// ------------------------ Code for ListConstruction ------------------------

	/**
	 * @return the ListConstruction vertex with specified <code>id</code>
	 */
	public ListConstruction getListConstruction(int id);

	/**
	 * @return the first ListConstruction vertex in this graph
	 */
	public ListConstruction getFirstListConstruction();

	/**
	 * @return the first ListConstruction vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ListConstruction are accepted
	 */
	public ListConstruction getFirstListConstruction(boolean noSubClasses);

	/**
	 * Creates a new ListConstruction vertex in this graph.
	 *
	*/
	public ListConstruction createListConstruction();

	/**
	 * Creates a new ListConstruction vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public ListConstruction createListConstruction(int id);

	// ------------------------ Code for ListRangeConstruction ------------------------

	/**
	 * @return the ListRangeConstruction vertex with specified <code>id</code>
	 */
	public ListRangeConstruction getListRangeConstruction(int id);

	/**
	 * @return the first ListRangeConstruction vertex in this graph
	 */
	public ListRangeConstruction getFirstListRangeConstruction();

	/**
	 * @return the first ListRangeConstruction vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ListRangeConstruction are accepted
	 */
	public ListRangeConstruction getFirstListRangeConstruction(boolean noSubClasses);

	/**
	 * Creates a new ListRangeConstruction vertex in this graph.
	 *
	*/
	public ListRangeConstruction createListRangeConstruction();

	/**
	 * Creates a new ListRangeConstruction vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public ListRangeConstruction createListRangeConstruction(int id);

	// ------------------------ Code for Literal ------------------------

	/**
	 * @return the Literal vertex with specified <code>id</code>
	 */
	public Literal getLiteral(int id);

	/**
	 * @return the first Literal vertex in this graph
	 */
	public Literal getFirstLiteral();

	/**
	 * @return the first Literal vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Literal are accepted
	 */
	public Literal getFirstLiteral(boolean noSubClasses);

	/**
	 * Creates a new Literal vertex in this graph.
	 *
	*/
	public Literal createLiteral();

	/**
	 * Creates a new Literal vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public Literal createLiteral(int id);

	// ------------------------ Code for Nonterminal ------------------------

	/**
	 * @return the Nonterminal vertex with specified <code>id</code>
	 */
	public Nonterminal getNonterminal(int id);

	/**
	 * @return the first Nonterminal vertex in this graph
	 */
	public Nonterminal getFirstNonterminal();

	/**
	 * @return the first Nonterminal vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Nonterminal are accepted
	 */
	public Nonterminal getFirstNonterminal(boolean noSubClasses);

	/**
	 * Creates a new Nonterminal vertex in this graph.
	 *
	*/
	public Nonterminal createNonterminal();

	/**
	 * Creates a new Nonterminal vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public Nonterminal createNonterminal(int id);

	// ------------------------ Code for NullLiteral ------------------------

	/**
	 * @return the NullLiteral vertex with specified <code>id</code>
	 */
	public NullLiteral getNullLiteral(int id);

	/**
	 * @return the first NullLiteral vertex in this graph
	 */
	public NullLiteral getFirstNullLiteral();

	/**
	 * @return the first NullLiteral vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of NullLiteral are accepted
	 */
	public NullLiteral getFirstNullLiteral(boolean noSubClasses);

	/**
	 * Creates a new NullLiteral vertex in this graph.
	 *
	*/
	public NullLiteral createNullLiteral();

	/**
	 * Creates a new NullLiteral vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public NullLiteral createNullLiteral(int id);

	// ------------------------ Code for OptionalPathDescription ------------------------

	/**
	 * @return the OptionalPathDescription vertex with specified <code>id</code>
	 */
	public OptionalPathDescription getOptionalPathDescription(int id);

	/**
	 * @return the first OptionalPathDescription vertex in this graph
	 */
	public OptionalPathDescription getFirstOptionalPathDescription();

	/**
	 * @return the first OptionalPathDescription vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of OptionalPathDescription are accepted
	 */
	public OptionalPathDescription getFirstOptionalPathDescription(boolean noSubClasses);

	/**
	 * Creates a new OptionalPathDescription vertex in this graph.
	 *
	*/
	public OptionalPathDescription createOptionalPathDescription();

	/**
	 * Creates a new OptionalPathDescription vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public OptionalPathDescription createOptionalPathDescription(int id);

	// ------------------------ Code for PathConstruction ------------------------

	/**
	 * @return the PathConstruction vertex with specified <code>id</code>
	 */
	public PathConstruction getPathConstruction(int id);

	/**
	 * @return the first PathConstruction vertex in this graph
	 */
	public PathConstruction getFirstPathConstruction();

	/**
	 * @return the first PathConstruction vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of PathConstruction are accepted
	 */
	public PathConstruction getFirstPathConstruction(boolean noSubClasses);

	/**
	 * Creates a new PathConstruction vertex in this graph.
	 *
	*/
	public PathConstruction createPathConstruction();

	/**
	 * Creates a new PathConstruction vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public PathConstruction createPathConstruction(int id);

	// ------------------------ Code for PathDescription ------------------------

	/**
	 * @return the PathDescription vertex with specified <code>id</code>
	 */
	public PathDescription getPathDescription(int id);

	/**
	 * @return the first PathDescription vertex in this graph
	 */
	public PathDescription getFirstPathDescription();

	// ------------------------ Code for PathExistence ------------------------

	/**
	 * @return the PathExistence vertex with specified <code>id</code>
	 */
	public PathExistence getPathExistence(int id);

	/**
	 * @return the first PathExistence vertex in this graph
	 */
	public PathExistence getFirstPathExistence();

	/**
	 * @return the first PathExistence vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of PathExistence are accepted
	 */
	public PathExistence getFirstPathExistence(boolean noSubClasses);

	/**
	 * Creates a new PathExistence vertex in this graph.
	 *
	*/
	public PathExistence createPathExistence();

	/**
	 * Creates a new PathExistence vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public PathExistence createPathExistence(int id);

	// ------------------------ Code for PathExpression ------------------------

	/**
	 * @return the PathExpression vertex with specified <code>id</code>
	 */
	public PathExpression getPathExpression(int id);

	/**
	 * @return the first PathExpression vertex in this graph
	 */
	public PathExpression getFirstPathExpression();

	// ------------------------ Code for PathSystemConstruction ------------------------

	/**
	 * @return the PathSystemConstruction vertex with specified <code>id</code>
	 */
	public PathSystemConstruction getPathSystemConstruction(int id);

	/**
	 * @return the first PathSystemConstruction vertex in this graph
	 */
	public PathSystemConstruction getFirstPathSystemConstruction();

	/**
	 * @return the first PathSystemConstruction vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of PathSystemConstruction are accepted
	 */
	public PathSystemConstruction getFirstPathSystemConstruction(boolean noSubClasses);

	/**
	 * Creates a new PathSystemConstruction vertex in this graph.
	 *
	*/
	public PathSystemConstruction createPathSystemConstruction();

	/**
	 * Creates a new PathSystemConstruction vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public PathSystemConstruction createPathSystemConstruction(int id);

	// ------------------------ Code for PrimaryPathDescription ------------------------

	/**
	 * @return the PrimaryPathDescription vertex with specified <code>id</code>
	 */
	public PrimaryPathDescription getPrimaryPathDescription(int id);

	/**
	 * @return the first PrimaryPathDescription vertex in this graph
	 */
	public PrimaryPathDescription getFirstPrimaryPathDescription();

	// ------------------------ Code for Production ------------------------

	/**
	 * @return the Production vertex with specified <code>id</code>
	 */
	public Production getProduction(int id);

	/**
	 * @return the first Production vertex in this graph
	 */
	public Production getFirstProduction();

	/**
	 * @return the first Production vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Production are accepted
	 */
	public Production getFirstProduction(boolean noSubClasses);

	/**
	 * Creates a new Production vertex in this graph.
	 *
	*/
	public Production createProduction();

	/**
	 * Creates a new Production vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public Production createProduction(int id);

	// ------------------------ Code for QuantifiedExpression ------------------------

	/**
	 * @return the QuantifiedExpression vertex with specified <code>id</code>
	 */
	public QuantifiedExpression getQuantifiedExpression(int id);

	/**
	 * @return the first QuantifiedExpression vertex in this graph
	 */
	public QuantifiedExpression getFirstQuantifiedExpression();

	/**
	 * @return the first QuantifiedExpression vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of QuantifiedExpression are accepted
	 */
	public QuantifiedExpression getFirstQuantifiedExpression(boolean noSubClasses);

	/**
	 * Creates a new QuantifiedExpression vertex in this graph.
	 *
	*/
	public QuantifiedExpression createQuantifiedExpression();

	/**
	 * Creates a new QuantifiedExpression vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public QuantifiedExpression createQuantifiedExpression(int id);

	// ------------------------ Code for Quantifier ------------------------

	/**
	 * @return the Quantifier vertex with specified <code>id</code>
	 */
	public Quantifier getQuantifier(int id);

	/**
	 * @return the first Quantifier vertex in this graph
	 */
	public Quantifier getFirstQuantifier();

	/**
	 * @return the first Quantifier vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Quantifier are accepted
	 */
	public Quantifier getFirstQuantifier(boolean noSubClasses);

	/**
	 * Creates a new Quantifier vertex in this graph.
	 *
	*/
	public Quantifier createQuantifier();

	/**
	 * Creates a new Quantifier vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public Quantifier createQuantifier(int id);

	// ------------------------ Code for RealLiteral ------------------------

	/**
	 * @return the RealLiteral vertex with specified <code>id</code>
	 */
	public RealLiteral getRealLiteral(int id);

	/**
	 * @return the first RealLiteral vertex in this graph
	 */
	public RealLiteral getFirstRealLiteral();

	/**
	 * @return the first RealLiteral vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of RealLiteral are accepted
	 */
	public RealLiteral getFirstRealLiteral(boolean noSubClasses);

	/**
	 * Creates a new RealLiteral vertex in this graph.
	 *
	*/
	public RealLiteral createRealLiteral();

	/**
	 * Creates a new RealLiteral vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public RealLiteral createRealLiteral(int id);

	// ------------------------ Code for RecordConstruction ------------------------

	/**
	 * @return the RecordConstruction vertex with specified <code>id</code>
	 */
	public RecordConstruction getRecordConstruction(int id);

	/**
	 * @return the first RecordConstruction vertex in this graph
	 */
	public RecordConstruction getFirstRecordConstruction();

	/**
	 * @return the first RecordConstruction vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of RecordConstruction are accepted
	 */
	public RecordConstruction getFirstRecordConstruction(boolean noSubClasses);

	/**
	 * Creates a new RecordConstruction vertex in this graph.
	 *
	*/
	public RecordConstruction createRecordConstruction();

	/**
	 * Creates a new RecordConstruction vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public RecordConstruction createRecordConstruction(int id);

	// ------------------------ Code for RecordElement ------------------------

	/**
	 * @return the RecordElement vertex with specified <code>id</code>
	 */
	public RecordElement getRecordElement(int id);

	/**
	 * @return the first RecordElement vertex in this graph
	 */
	public RecordElement getFirstRecordElement();

	/**
	 * @return the first RecordElement vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of RecordElement are accepted
	 */
	public RecordElement getFirstRecordElement(boolean noSubClasses);

	/**
	 * Creates a new RecordElement vertex in this graph.
	 *
	*/
	public RecordElement createRecordElement();

	/**
	 * Creates a new RecordElement vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public RecordElement createRecordElement(int id);

	// ------------------------ Code for RecordId ------------------------

	/**
	 * @return the RecordId vertex with specified <code>id</code>
	 */
	public RecordId getRecordId(int id);

	/**
	 * @return the first RecordId vertex in this graph
	 */
	public RecordId getFirstRecordId();

	/**
	 * @return the first RecordId vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of RecordId are accepted
	 */
	public RecordId getFirstRecordId(boolean noSubClasses);

	/**
	 * Creates a new RecordId vertex in this graph.
	 *
	*/
	public RecordId createRecordId();

	/**
	 * Creates a new RecordId vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public RecordId createRecordId(int id);

	// ------------------------ Code for RestrictedExpression ------------------------

	/**
	 * @return the RestrictedExpression vertex with specified <code>id</code>
	 */
	public RestrictedExpression getRestrictedExpression(int id);

	/**
	 * @return the first RestrictedExpression vertex in this graph
	 */
	public RestrictedExpression getFirstRestrictedExpression();

	/**
	 * @return the first RestrictedExpression vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of RestrictedExpression are accepted
	 */
	public RestrictedExpression getFirstRestrictedExpression(boolean noSubClasses);

	/**
	 * Creates a new RestrictedExpression vertex in this graph.
	 *
	*/
	public RestrictedExpression createRestrictedExpression();

	/**
	 * Creates a new RestrictedExpression vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public RestrictedExpression createRestrictedExpression(int id);

	// ------------------------ Code for RightSide ------------------------

	/**
	 * @return the RightSide vertex with specified <code>id</code>
	 */
	public RightSide getRightSide(int id);

	/**
	 * @return the first RightSide vertex in this graph
	 */
	public RightSide getFirstRightSide();

	/**
	 * @return the first RightSide vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of RightSide are accepted
	 */
	public RightSide getFirstRightSide(boolean noSubClasses);

	/**
	 * Creates a new RightSide vertex in this graph.
	 *
	*/
	public RightSide createRightSide();

	/**
	 * Creates a new RightSide vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public RightSide createRightSide(int id);

	// ------------------------ Code for RoleId ------------------------

	/**
	 * @return the RoleId vertex with specified <code>id</code>
	 */
	public RoleId getRoleId(int id);

	/**
	 * @return the first RoleId vertex in this graph
	 */
	public RoleId getFirstRoleId();

	/**
	 * @return the first RoleId vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of RoleId are accepted
	 */
	public RoleId getFirstRoleId(boolean noSubClasses);

	/**
	 * Creates a new RoleId vertex in this graph.
	 *
	*/
	public RoleId createRoleId();

	/**
	 * Creates a new RoleId vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public RoleId createRoleId(int id);

	// ------------------------ Code for SequentialPathDescription ------------------------

	/**
	 * @return the SequentialPathDescription vertex with specified <code>id</code>
	 */
	public SequentialPathDescription getSequentialPathDescription(int id);

	/**
	 * @return the first SequentialPathDescription vertex in this graph
	 */
	public SequentialPathDescription getFirstSequentialPathDescription();

	/**
	 * @return the first SequentialPathDescription vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of SequentialPathDescription are accepted
	 */
	public SequentialPathDescription getFirstSequentialPathDescription(boolean noSubClasses);

	/**
	 * Creates a new SequentialPathDescription vertex in this graph.
	 *
	*/
	public SequentialPathDescription createSequentialPathDescription();

	/**
	 * Creates a new SequentialPathDescription vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public SequentialPathDescription createSequentialPathDescription(int id);

	// ------------------------ Code for SetComprehension ------------------------

	/**
	 * @return the SetComprehension vertex with specified <code>id</code>
	 */
	public SetComprehension getSetComprehension(int id);

	/**
	 * @return the first SetComprehension vertex in this graph
	 */
	public SetComprehension getFirstSetComprehension();

	/**
	 * @return the first SetComprehension vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of SetComprehension are accepted
	 */
	public SetComprehension getFirstSetComprehension(boolean noSubClasses);

	/**
	 * Creates a new SetComprehension vertex in this graph.
	 *
	*/
	public SetComprehension createSetComprehension();

	/**
	 * Creates a new SetComprehension vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public SetComprehension createSetComprehension(int id);

	// ------------------------ Code for SetConstruction ------------------------

	/**
	 * @return the SetConstruction vertex with specified <code>id</code>
	 */
	public SetConstruction getSetConstruction(int id);

	/**
	 * @return the first SetConstruction vertex in this graph
	 */
	public SetConstruction getFirstSetConstruction();

	/**
	 * @return the first SetConstruction vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of SetConstruction are accepted
	 */
	public SetConstruction getFirstSetConstruction(boolean noSubClasses);

	/**
	 * Creates a new SetConstruction vertex in this graph.
	 *
	*/
	public SetConstruction createSetConstruction();

	/**
	 * Creates a new SetConstruction vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public SetConstruction createSetConstruction(int id);

	// ------------------------ Code for SimpleDeclaration ------------------------

	/**
	 * @return the SimpleDeclaration vertex with specified <code>id</code>
	 */
	public SimpleDeclaration getSimpleDeclaration(int id);

	/**
	 * @return the first SimpleDeclaration vertex in this graph
	 */
	public SimpleDeclaration getFirstSimpleDeclaration();

	/**
	 * @return the first SimpleDeclaration vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of SimpleDeclaration are accepted
	 */
	public SimpleDeclaration getFirstSimpleDeclaration(boolean noSubClasses);

	/**
	 * Creates a new SimpleDeclaration vertex in this graph.
	 *
	*/
	public SimpleDeclaration createSimpleDeclaration();

	/**
	 * Creates a new SimpleDeclaration vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public SimpleDeclaration createSimpleDeclaration(int id);

	// ------------------------ Code for SimplePathDescription ------------------------

	/**
	 * @return the SimplePathDescription vertex with specified <code>id</code>
	 */
	public SimplePathDescription getSimplePathDescription(int id);

	/**
	 * @return the first SimplePathDescription vertex in this graph
	 */
	public SimplePathDescription getFirstSimplePathDescription();

	/**
	 * @return the first SimplePathDescription vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of SimplePathDescription are accepted
	 */
	public SimplePathDescription getFirstSimplePathDescription(boolean noSubClasses);

	/**
	 * Creates a new SimplePathDescription vertex in this graph.
	 *
	*/
	public SimplePathDescription createSimplePathDescription();

	/**
	 * Creates a new SimplePathDescription vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public SimplePathDescription createSimplePathDescription(int id);

	// ------------------------ Code for StringLiteral ------------------------

	/**
	 * @return the StringLiteral vertex with specified <code>id</code>
	 */
	public StringLiteral getStringLiteral(int id);

	/**
	 * @return the first StringLiteral vertex in this graph
	 */
	public StringLiteral getFirstStringLiteral();

	/**
	 * @return the first StringLiteral vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of StringLiteral are accepted
	 */
	public StringLiteral getFirstStringLiteral(boolean noSubClasses);

	/**
	 * Creates a new StringLiteral vertex in this graph.
	 *
	*/
	public StringLiteral createStringLiteral();

	/**
	 * Creates a new StringLiteral vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public StringLiteral createStringLiteral(int id);

	// ------------------------ Code for SubgraphExpression ------------------------

	/**
	 * @return the SubgraphExpression vertex with specified <code>id</code>
	 */
	public SubgraphExpression getSubgraphExpression(int id);

	/**
	 * @return the first SubgraphExpression vertex in this graph
	 */
	public SubgraphExpression getFirstSubgraphExpression();

	// ------------------------ Code for Symbol ------------------------

	/**
	 * @return the Symbol vertex with specified <code>id</code>
	 */
	public Symbol getSymbol(int id);

	/**
	 * @return the first Symbol vertex in this graph
	 */
	public Symbol getFirstSymbol();

	/**
	 * @return the first Symbol vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Symbol are accepted
	 */
	public Symbol getFirstSymbol(boolean noSubClasses);

	/**
	 * Creates a new Symbol vertex in this graph.
	 *
	*/
	public Symbol createSymbol();

	/**
	 * Creates a new Symbol vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public Symbol createSymbol(int id);

	// ------------------------ Code for TableComprehension ------------------------

	/**
	 * @return the TableComprehension vertex with specified <code>id</code>
	 */
	public TableComprehension getTableComprehension(int id);

	/**
	 * @return the first TableComprehension vertex in this graph
	 */
	public TableComprehension getFirstTableComprehension();

	/**
	 * @return the first TableComprehension vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of TableComprehension are accepted
	 */
	public TableComprehension getFirstTableComprehension(boolean noSubClasses);

	/**
	 * Creates a new TableComprehension vertex in this graph.
	 *
	*/
	public TableComprehension createTableComprehension();

	/**
	 * Creates a new TableComprehension vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public TableComprehension createTableComprehension(int id);

	// ------------------------ Code for ThisLiteral ------------------------

	/**
	 * @return the ThisLiteral vertex with specified <code>id</code>
	 */
	public ThisLiteral getThisLiteral(int id);

	/**
	 * @return the first ThisLiteral vertex in this graph
	 */
	public ThisLiteral getFirstThisLiteral();

	/**
	 * @return the first ThisLiteral vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ThisLiteral are accepted
	 */
	public ThisLiteral getFirstThisLiteral(boolean noSubClasses);

	/**
	 * Creates a new ThisLiteral vertex in this graph.
	 *
	*/
	public ThisLiteral createThisLiteral();

	/**
	 * Creates a new ThisLiteral vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public ThisLiteral createThisLiteral(int id);

	// ------------------------ Code for TransposedPathDescription ------------------------

	/**
	 * @return the TransposedPathDescription vertex with specified <code>id</code>
	 */
	public TransposedPathDescription getTransposedPathDescription(int id);

	/**
	 * @return the first TransposedPathDescription vertex in this graph
	 */
	public TransposedPathDescription getFirstTransposedPathDescription();

	/**
	 * @return the first TransposedPathDescription vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of TransposedPathDescription are accepted
	 */
	public TransposedPathDescription getFirstTransposedPathDescription(boolean noSubClasses);

	/**
	 * Creates a new TransposedPathDescription vertex in this graph.
	 *
	*/
	public TransposedPathDescription createTransposedPathDescription();

	/**
	 * Creates a new TransposedPathDescription vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public TransposedPathDescription createTransposedPathDescription(int id);

	// ------------------------ Code for TupleConstruction ------------------------

	/**
	 * @return the TupleConstruction vertex with specified <code>id</code>
	 */
	public TupleConstruction getTupleConstruction(int id);

	/**
	 * @return the first TupleConstruction vertex in this graph
	 */
	public TupleConstruction getFirstTupleConstruction();

	/**
	 * @return the first TupleConstruction vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of TupleConstruction are accepted
	 */
	public TupleConstruction getFirstTupleConstruction(boolean noSubClasses);

	/**
	 * Creates a new TupleConstruction vertex in this graph.
	 *
	*/
	public TupleConstruction createTupleConstruction();

	/**
	 * Creates a new TupleConstruction vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public TupleConstruction createTupleConstruction(int id);

	// ------------------------ Code for TypeId ------------------------

	/**
	 * @return the TypeId vertex with specified <code>id</code>
	 */
	public TypeId getTypeId(int id);

	/**
	 * @return the first TypeId vertex in this graph
	 */
	public TypeId getFirstTypeId();

	/**
	 * @return the first TypeId vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of TypeId are accepted
	 */
	public TypeId getFirstTypeId(boolean noSubClasses);

	/**
	 * Creates a new TypeId vertex in this graph.
	 *
	*/
	public TypeId createTypeId();

	/**
	 * Creates a new TypeId vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public TypeId createTypeId(int id);

	// ------------------------ Code for ValueConstruction ------------------------

	/**
	 * @return the ValueConstruction vertex with specified <code>id</code>
	 */
	public ValueConstruction getValueConstruction(int id);

	/**
	 * @return the first ValueConstruction vertex in this graph
	 */
	public ValueConstruction getFirstValueConstruction();

	// ------------------------ Code for Variable ------------------------

	/**
	 * @return the Variable vertex with specified <code>id</code>
	 */
	public Variable getVariable(int id);

	/**
	 * @return the first Variable vertex in this graph
	 */
	public Variable getFirstVariable();

	/**
	 * @return the first Variable vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Variable are accepted
	 */
	public Variable getFirstVariable(boolean noSubClasses);

	/**
	 * Creates a new Variable vertex in this graph.
	 *
	*/
	public Variable createVariable();

	/**
	 * Creates a new Variable vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public Variable createVariable(int id);

	// ------------------------ Code for VertexSetExpression ------------------------

	/**
	 * @return the VertexSetExpression vertex with specified <code>id</code>
	 */
	public VertexSetExpression getVertexSetExpression(int id);

	/**
	 * @return the first VertexSetExpression vertex in this graph
	 */
	public VertexSetExpression getFirstVertexSetExpression();

	/**
	 * @return the first VertexSetExpression vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of VertexSetExpression are accepted
	 */
	public VertexSetExpression getFirstVertexSetExpression(boolean noSubClasses);

	/**
	 * Creates a new VertexSetExpression vertex in this graph.
	 *
	*/
	public VertexSetExpression createVertexSetExpression();

	/**
	 * Creates a new VertexSetExpression vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public VertexSetExpression createVertexSetExpression(int id);

	// ------------------------ Code for VertexSubgraphExpression ------------------------

	/**
	 * @return the VertexSubgraphExpression vertex with specified <code>id</code>
	 */
	public VertexSubgraphExpression getVertexSubgraphExpression(int id);

	/**
	 * @return the first VertexSubgraphExpression vertex in this graph
	 */
	public VertexSubgraphExpression getFirstVertexSubgraphExpression();

	/**
	 * @return the first VertexSubgraphExpression vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of VertexSubgraphExpression are accepted
	 */
	public VertexSubgraphExpression getFirstVertexSubgraphExpression(boolean noSubClasses);

	/**
	 * Creates a new VertexSubgraphExpression vertex in this graph.
	 *
	*/
	public VertexSubgraphExpression createVertexSubgraphExpression();

	/**
	 * Creates a new VertexSubgraphExpression vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public VertexSubgraphExpression createVertexSubgraphExpression(int id);

	// ------------------------ Code for WhereExpression ------------------------

	/**
	 * @return the WhereExpression vertex with specified <code>id</code>
	 */
	public WhereExpression getWhereExpression(int id);

	/**
	 * @return the first WhereExpression vertex in this graph
	 */
	public WhereExpression getFirstWhereExpression();

	/**
	 * @return the first WhereExpression vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of WhereExpression are accepted
	 */
	public WhereExpression getFirstWhereExpression(boolean noSubClasses);

	/**
	 * Creates a new WhereExpression vertex in this graph.
	 *
	*/
	public WhereExpression createWhereExpression();

	/**
	 * Creates a new WhereExpression vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public WhereExpression createWhereExpression(int id);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsTypeRestrOf or subtypes
	 */
	public Iterable<? extends IsTypeRestrOf> getIsTypeRestrOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeRestrOf
	 * @param noSubClasses toggles wether subclasses of IsTypeRestrOf should be excluded
	 */
	public Iterable<? extends IsTypeRestrOf> getIsTypeRestrOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsConditionOf or subtypes
	 */
	public Iterable<? extends IsConditionOf> getIsConditionOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConditionOf
	 * @param noSubClasses toggles wether subclasses of IsConditionOf should be excluded
	 */
	public Iterable<? extends IsConditionOf> getIsConditionOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsRestrictedExprOf or subtypes
	 */
	public Iterable<? extends IsRestrictedExprOf> getIsRestrictedExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRestrictedExprOf
	 * @param noSubClasses toggles wether subclasses of IsRestrictedExprOf should be excluded
	 */
	public Iterable<? extends IsRestrictedExprOf> getIsRestrictedExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsDefinitionOf or subtypes
	 */
	public Iterable<? extends IsDefinitionOf> getIsDefinitionOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDefinitionOf
	 * @param noSubClasses toggles wether subclasses of IsDefinitionOf should be excluded
	 */
	public Iterable<? extends IsDefinitionOf> getIsDefinitionOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsPathOf or subtypes
	 */
	public Iterable<? extends IsPathOf> getIsPathOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsPathOf
	 * @param noSubClasses toggles wether subclasses of IsPathOf should be excluded
	 */
	public Iterable<? extends IsPathOf> getIsPathOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsTypeExprOf or subtypes
	 */
	public Iterable<? extends IsTypeExprOf> getIsTypeExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOf
	 * @param noSubClasses toggles wether subclasses of IsTypeExprOf should be excluded
	 */
	public Iterable<? extends IsTypeExprOf> getIsTypeExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsDirectionOf or subtypes
	 */
	public Iterable<? extends IsDirectionOf> getIsDirectionOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDirectionOf
	 * @param noSubClasses toggles wether subclasses of IsDirectionOf should be excluded
	 */
	public Iterable<? extends IsDirectionOf> getIsDirectionOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsSubPathOf or subtypes
	 */
	public Iterable<? extends IsSubPathOf> getIsSubPathOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubPathOf
	 * @param noSubClasses toggles wether subclasses of IsSubPathOf should be excluded
	 */
	public Iterable<? extends IsSubPathOf> getIsSubPathOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsBoundVarOf or subtypes
	 */
	public Iterable<? extends IsBoundVarOf> getIsBoundVarOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundVarOf
	 * @param noSubClasses toggles wether subclasses of IsBoundVarOf should be excluded
	 */
	public Iterable<? extends IsBoundVarOf> getIsBoundVarOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsDeclaredVarOf or subtypes
	 */
	public Iterable<? extends IsDeclaredVarOf> getIsDeclaredVarOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDeclaredVarOf
	 * @param noSubClasses toggles wether subclasses of IsDeclaredVarOf should be excluded
	 */
	public Iterable<? extends IsDeclaredVarOf> getIsDeclaredVarOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsTypeIdOf or subtypes
	 */
	public Iterable<? extends IsTypeIdOf> getIsTypeIdOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeIdOf
	 * @param noSubClasses toggles wether subclasses of IsTypeIdOf should be excluded
	 */
	public Iterable<? extends IsTypeIdOf> getIsTypeIdOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsElementOf or subtypes
	 */
	public Iterable<? extends IsElementOf> getIsElementOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsElementOf
	 * @param noSubClasses toggles wether subclasses of IsElementOf should be excluded
	 */
	public Iterable<? extends IsElementOf> getIsElementOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsBoundExprOfQuantifier or subtypes
	 */
	public Iterable<? extends IsBoundExprOfQuantifier> getIsBoundExprOfQuantifierEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOfQuantifier
	 * @param noSubClasses toggles wether subclasses of IsBoundExprOfQuantifier should be excluded
	 */
	public Iterable<? extends IsBoundExprOfQuantifier> getIsBoundExprOfQuantifierEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsRowHeaderExprOf or subtypes
	 */
	public Iterable<? extends IsRowHeaderExprOf> getIsRowHeaderExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRowHeaderExprOf
	 * @param noSubClasses toggles wether subclasses of IsRowHeaderExprOf should be excluded
	 */
	public Iterable<? extends IsRowHeaderExprOf> getIsRowHeaderExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsArgumentOf or subtypes
	 */
	public Iterable<? extends IsArgumentOf> getIsArgumentOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsArgumentOf
	 * @param noSubClasses toggles wether subclasses of IsArgumentOf should be excluded
	 */
	public Iterable<? extends IsArgumentOf> getIsArgumentOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsTypeExprOfFunction or subtypes
	 */
	public Iterable<? extends IsTypeExprOfFunction> getIsTypeExprOfFunctionEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfFunction
	 * @param noSubClasses toggles wether subclasses of IsTypeExprOfFunction should be excluded
	 */
	public Iterable<? extends IsTypeExprOfFunction> getIsTypeExprOfFunctionEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsCompResultDefOf or subtypes
	 */
	public Iterable<? extends IsCompResultDefOf> getIsCompResultDefOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsCompResultDefOf
	 * @param noSubClasses toggles wether subclasses of IsCompResultDefOf should be excluded
	 */
	public Iterable<? extends IsCompResultDefOf> getIsCompResultDefOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsLastValueOf or subtypes
	 */
	public Iterable<? extends IsLastValueOf> getIsLastValueOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsLastValueOf
	 * @param noSubClasses toggles wether subclasses of IsLastValueOf should be excluded
	 */
	public Iterable<? extends IsLastValueOf> getIsLastValueOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsFirstValueOf or subtypes
	 */
	public Iterable<? extends IsFirstValueOf> getIsFirstValueOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsFirstValueOf
	 * @param noSubClasses toggles wether subclasses of IsFirstValueOf should be excluded
	 */
	public Iterable<? extends IsFirstValueOf> getIsFirstValueOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsEdgeRestrOf or subtypes
	 */
	public Iterable<? extends IsEdgeRestrOf> getIsEdgeRestrOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeRestrOf
	 * @param noSubClasses toggles wether subclasses of IsEdgeRestrOf should be excluded
	 */
	public Iterable<? extends IsEdgeRestrOf> getIsEdgeRestrOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsSequenceElementOf or subtypes
	 */
	public Iterable<? extends IsSequenceElementOf> getIsSequenceElementOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSequenceElementOf
	 * @param noSubClasses toggles wether subclasses of IsSequenceElementOf should be excluded
	 */
	public Iterable<? extends IsSequenceElementOf> getIsSequenceElementOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsPartOf or subtypes
	 */
	public Iterable<? extends IsPartOf> getIsPartOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsPartOf
	 * @param noSubClasses toggles wether subclasses of IsPartOf should be excluded
	 */
	public Iterable<? extends IsPartOf> getIsPartOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsBoundExprOf or subtypes
	 */
	public Iterable<? extends IsBoundExprOf> getIsBoundExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOf
	 * @param noSubClasses toggles wether subclasses of IsBoundExprOf should be excluded
	 */
	public Iterable<? extends IsBoundExprOf> getIsBoundExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsIntermediateVertexOf or subtypes
	 */
	public Iterable<? extends IsIntermediateVertexOf> getIsIntermediateVertexOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsIntermediateVertexOf
	 * @param noSubClasses toggles wether subclasses of IsIntermediateVertexOf should be excluded
	 */
	public Iterable<? extends IsIntermediateVertexOf> getIsIntermediateVertexOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsRecordElementOf or subtypes
	 */
	public Iterable<? extends IsRecordElementOf> getIsRecordElementOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordElementOf
	 * @param noSubClasses toggles wether subclasses of IsRecordElementOf should be excluded
	 */
	public Iterable<? extends IsRecordElementOf> getIsRecordElementOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsPathDescriptionOf or subtypes
	 */
	public Iterable<? extends IsPathDescriptionOf> getIsPathDescriptionOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsPathDescriptionOf
	 * @param noSubClasses toggles wether subclasses of IsPathDescriptionOf should be excluded
	 */
	public Iterable<? extends IsPathDescriptionOf> getIsPathDescriptionOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsRecordIdOf or subtypes
	 */
	public Iterable<? extends IsRecordIdOf> getIsRecordIdOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordIdOf
	 * @param noSubClasses toggles wether subclasses of IsRecordIdOf should be excluded
	 */
	public Iterable<? extends IsRecordIdOf> getIsRecordIdOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsExponentiatedPathOf or subtypes
	 */
	public Iterable<? extends IsExponentiatedPathOf> getIsExponentiatedPathOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsExponentiatedPathOf
	 * @param noSubClasses toggles wether subclasses of IsExponentiatedPathOf should be excluded
	 */
	public Iterable<? extends IsExponentiatedPathOf> getIsExponentiatedPathOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsStartRestrOf or subtypes
	 */
	public Iterable<? extends IsStartRestrOf> getIsStartRestrOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsStartRestrOf
	 * @param noSubClasses toggles wether subclasses of IsStartRestrOf should be excluded
	 */
	public Iterable<? extends IsStartRestrOf> getIsStartRestrOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsTypeExprOfDeclaration or subtypes
	 */
	public Iterable<? extends IsTypeExprOfDeclaration> getIsTypeExprOfDeclarationEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration
	 * @param noSubClasses toggles wether subclasses of IsTypeExprOfDeclaration should be excluded
	 */
	public Iterable<? extends IsTypeExprOfDeclaration> getIsTypeExprOfDeclarationEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsIteratedPathOf or subtypes
	 */
	public Iterable<? extends IsIteratedPathOf> getIsIteratedPathOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsIteratedPathOf
	 * @param noSubClasses toggles wether subclasses of IsIteratedPathOf should be excluded
	 */
	public Iterable<? extends IsIteratedPathOf> getIsIteratedPathOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsExprOf or subtypes
	 */
	public Iterable<? extends IsExprOf> getIsExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsExprOf
	 * @param noSubClasses toggles wether subclasses of IsExprOf should be excluded
	 */
	public Iterable<? extends IsExprOf> getIsExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsConstraintOf or subtypes
	 */
	public Iterable<? extends IsConstraintOf> getIsConstraintOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConstraintOf
	 * @param noSubClasses toggles wether subclasses of IsConstraintOf should be excluded
	 */
	public Iterable<? extends IsConstraintOf> getIsConstraintOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsRecordExprOf or subtypes
	 */
	public Iterable<? extends IsRecordExprOf> getIsRecordExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordExprOf
	 * @param noSubClasses toggles wether subclasses of IsRecordExprOf should be excluded
	 */
	public Iterable<? extends IsRecordExprOf> getIsRecordExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsBoundExprOfDefinition or subtypes
	 */
	public Iterable<? extends IsBoundExprOfDefinition> getIsBoundExprOfDefinitionEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOfDefinition
	 * @param noSubClasses toggles wether subclasses of IsBoundExprOfDefinition should be excluded
	 */
	public Iterable<? extends IsBoundExprOfDefinition> getIsBoundExprOfDefinitionEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type Greql2Aggregation or subtypes
	 */
	public Iterable<? extends Greql2Aggregation> getGreql2AggregationEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type Greql2Aggregation
	 * @param noSubClasses toggles wether subclasses of Greql2Aggregation should be excluded
	 */
	public Iterable<? extends Greql2Aggregation> getGreql2AggregationEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsAlternativePathOf or subtypes
	 */
	public Iterable<? extends IsAlternativePathOf> getIsAlternativePathOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsAlternativePathOf
	 * @param noSubClasses toggles wether subclasses of IsAlternativePathOf should be excluded
	 */
	public Iterable<? extends IsAlternativePathOf> getIsAlternativePathOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsTransposedPathOf or subtypes
	 */
	public Iterable<? extends IsTransposedPathOf> getIsTransposedPathOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTransposedPathOf
	 * @param noSubClasses toggles wether subclasses of IsTransposedPathOf should be excluded
	 */
	public Iterable<? extends IsTransposedPathOf> getIsTransposedPathOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsIdOf or subtypes
	 */
	public Iterable<? extends IsIdOf> getIsIdOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsIdOf
	 * @param noSubClasses toggles wether subclasses of IsIdOf should be excluded
	 */
	public Iterable<? extends IsIdOf> getIsIdOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsFunctionIdOf or subtypes
	 */
	public Iterable<? extends IsFunctionIdOf> getIsFunctionIdOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsFunctionIdOf
	 * @param noSubClasses toggles wether subclasses of IsFunctionIdOf should be excluded
	 */
	public Iterable<? extends IsFunctionIdOf> getIsFunctionIdOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsQueryExprOf or subtypes
	 */
	public Iterable<? extends IsQueryExprOf> getIsQueryExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQueryExprOf
	 * @param noSubClasses toggles wether subclasses of IsQueryExprOf should be excluded
	 */
	public Iterable<? extends IsQueryExprOf> getIsQueryExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsStartExprOf or subtypes
	 */
	public Iterable<? extends IsStartExprOf> getIsStartExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsStartExprOf
	 * @param noSubClasses toggles wether subclasses of IsStartExprOf should be excluded
	 */
	public Iterable<? extends IsStartExprOf> getIsStartExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsEdgeVertexListOf or subtypes
	 */
	public Iterable<? extends IsEdgeVertexListOf> getIsEdgeVertexListOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeVertexListOf
	 * @param noSubClasses toggles wether subclasses of IsEdgeVertexListOf should be excluded
	 */
	public Iterable<? extends IsEdgeVertexListOf> getIsEdgeVertexListOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsOptionalPathOf or subtypes
	 */
	public Iterable<? extends IsOptionalPathOf> getIsOptionalPathOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsOptionalPathOf
	 * @param noSubClasses toggles wether subclasses of IsOptionalPathOf should be excluded
	 */
	public Iterable<? extends IsOptionalPathOf> getIsOptionalPathOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsRoleIdOf or subtypes
	 */
	public Iterable<? extends IsRoleIdOf> getIsRoleIdOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRoleIdOf
	 * @param noSubClasses toggles wether subclasses of IsRoleIdOf should be excluded
	 */
	public Iterable<? extends IsRoleIdOf> getIsRoleIdOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsEdgeOrVertexExprOf or subtypes
	 */
	public Iterable<? extends IsEdgeOrVertexExprOf> getIsEdgeOrVertexExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeOrVertexExprOf
	 * @param noSubClasses toggles wether subclasses of IsEdgeOrVertexExprOf should be excluded
	 */
	public Iterable<? extends IsEdgeOrVertexExprOf> getIsEdgeOrVertexExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsProductionOf or subtypes
	 */
	public Iterable<? extends IsProductionOf> getIsProductionOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsProductionOf
	 * @param noSubClasses toggles wether subclasses of IsProductionOf should be excluded
	 */
	public Iterable<? extends IsProductionOf> getIsProductionOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsCompDeclOf or subtypes
	 */
	public Iterable<? extends IsCompDeclOf> getIsCompDeclOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsCompDeclOf
	 * @param noSubClasses toggles wether subclasses of IsCompDeclOf should be excluded
	 */
	public Iterable<? extends IsCompDeclOf> getIsCompDeclOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsRootOf or subtypes
	 */
	public Iterable<? extends IsRootOf> getIsRootOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRootOf
	 * @param noSubClasses toggles wether subclasses of IsRootOf should be excluded
	 */
	public Iterable<? extends IsRootOf> getIsRootOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsRightSideOf or subtypes
	 */
	public Iterable<? extends IsRightSideOf> getIsRightSideOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRightSideOf
	 * @param noSubClasses toggles wether subclasses of IsRightSideOf should be excluded
	 */
	public Iterable<? extends IsRightSideOf> getIsRightSideOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsEdgeExprOf or subtypes
	 */
	public Iterable<? extends IsEdgeExprOf> getIsEdgeExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeExprOf
	 * @param noSubClasses toggles wether subclasses of IsEdgeExprOf should be excluded
	 */
	public Iterable<? extends IsEdgeExprOf> getIsEdgeExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsTableHeaderOf or subtypes
	 */
	public Iterable<? extends IsTableHeaderOf> getIsTableHeaderOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTableHeaderOf
	 * @param noSubClasses toggles wether subclasses of IsTableHeaderOf should be excluded
	 */
	public Iterable<? extends IsTableHeaderOf> getIsTableHeaderOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsExponentOf or subtypes
	 */
	public Iterable<? extends IsExponentOf> getIsExponentOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsExponentOf
	 * @param noSubClasses toggles wether subclasses of IsExponentOf should be excluded
	 */
	public Iterable<? extends IsExponentOf> getIsExponentOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsColumnHeaderExprOf or subtypes
	 */
	public Iterable<? extends IsColumnHeaderExprOf> getIsColumnHeaderExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsColumnHeaderExprOf
	 * @param noSubClasses toggles wether subclasses of IsColumnHeaderExprOf should be excluded
	 */
	public Iterable<? extends IsColumnHeaderExprOf> getIsColumnHeaderExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsRestrictionOf or subtypes
	 */
	public Iterable<? extends IsRestrictionOf> getIsRestrictionOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRestrictionOf
	 * @param noSubClasses toggles wether subclasses of IsRestrictionOf should be excluded
	 */
	public Iterable<? extends IsRestrictionOf> getIsRestrictionOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsSimpleDeclOf or subtypes
	 */
	public Iterable<? extends IsSimpleDeclOf> getIsSimpleDeclOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf
	 * @param noSubClasses toggles wether subclasses of IsSimpleDeclOf should be excluded
	 */
	public Iterable<? extends IsSimpleDeclOf> getIsSimpleDeclOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsTrueExprOf or subtypes
	 */
	public Iterable<? extends IsTrueExprOf> getIsTrueExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTrueExprOf
	 * @param noSubClasses toggles wether subclasses of IsTrueExprOf should be excluded
	 */
	public Iterable<? extends IsTrueExprOf> getIsTrueExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsSymbolOf or subtypes
	 */
	public Iterable<? extends IsSymbolOf> getIsSymbolOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSymbolOf
	 * @param noSubClasses toggles wether subclasses of IsSymbolOf should be excluded
	 */
	public Iterable<? extends IsSymbolOf> getIsSymbolOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsQuantifierOf or subtypes
	 */
	public Iterable<? extends IsQuantifierOf> getIsQuantifierOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQuantifierOf
	 * @param noSubClasses toggles wether subclasses of IsQuantifierOf should be excluded
	 */
	public Iterable<? extends IsQuantifierOf> getIsQuantifierOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsQuantifiedDeclOf or subtypes
	 */
	public Iterable<? extends IsQuantifiedDeclOf> getIsQuantifiedDeclOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQuantifiedDeclOf
	 * @param noSubClasses toggles wether subclasses of IsQuantifiedDeclOf should be excluded
	 */
	public Iterable<? extends IsQuantifiedDeclOf> getIsQuantifiedDeclOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsGoalRestrOf or subtypes
	 */
	public Iterable<? extends IsGoalRestrOf> getIsGoalRestrOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsGoalRestrOf
	 * @param noSubClasses toggles wether subclasses of IsGoalRestrOf should be excluded
	 */
	public Iterable<? extends IsGoalRestrOf> getIsGoalRestrOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsVarOf or subtypes
	 */
	public Iterable<? extends IsVarOf> getIsVarOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsVarOf
	 * @param noSubClasses toggles wether subclasses of IsVarOf should be excluded
	 */
	public Iterable<? extends IsVarOf> getIsVarOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsNullExprOf or subtypes
	 */
	public Iterable<? extends IsNullExprOf> getIsNullExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsNullExprOf
	 * @param noSubClasses toggles wether subclasses of IsNullExprOf should be excluded
	 */
	public Iterable<? extends IsNullExprOf> getIsNullExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsFalseExprOf or subtypes
	 */
	public Iterable<? extends IsFalseExprOf> getIsFalseExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsFalseExprOf
	 * @param noSubClasses toggles wether subclasses of IsFalseExprOf should be excluded
	 */
	public Iterable<? extends IsFalseExprOf> getIsFalseExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsLeftSideOf or subtypes
	 */
	public Iterable<? extends IsLeftSideOf> getIsLeftSideOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsLeftSideOf
	 * @param noSubClasses toggles wether subclasses of IsLeftSideOf should be excluded
	 */
	public Iterable<? extends IsLeftSideOf> getIsLeftSideOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsTargetExprOf or subtypes
	 */
	public Iterable<? extends IsTargetExprOf> getIsTargetExprOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTargetExprOf
	 * @param noSubClasses toggles wether subclasses of IsTargetExprOf should be excluded
	 */
	public Iterable<? extends IsTargetExprOf> getIsTargetExprOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsSubgraphOf or subtypes
	 */
	public Iterable<? extends IsSubgraphOf> getIsSubgraphOfEdges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubgraphOf
	 * @param noSubClasses toggles wether subclasses of IsSubgraphOf should be excluded
	 */
	public Iterable<? extends IsSubgraphOf> getIsSubgraphOfEdges(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type RestrictedExpression or subtypes
	 */
	public Iterable<? extends RestrictedExpression> getRestrictedExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type RestrictedExpression
	 * @param noSubClasses toggles wether subclasses of RestrictedExpression should be excluded
	 */
	public Iterable<? extends RestrictedExpression> getRestrictedExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type WhereExpression or subtypes
	 */
	public Iterable<? extends WhereExpression> getWhereExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type WhereExpression
	 * @param noSubClasses toggles wether subclasses of WhereExpression should be excluded
	 */
	public Iterable<? extends WhereExpression> getWhereExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Quantifier or subtypes
	 */
	public Iterable<? extends Quantifier> getQuantifierVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Quantifier
	 * @param noSubClasses toggles wether subclasses of Quantifier should be excluded
	 */
	public Iterable<? extends Quantifier> getQuantifierVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Production or subtypes
	 */
	public Iterable<? extends Production> getProductionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Production
	 * @param noSubClasses toggles wether subclasses of Production should be excluded
	 */
	public Iterable<? extends Production> getProductionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type PathDescription or subtypes
	 */
	public Iterable<? extends PathDescription> getPathDescriptionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type PathDescription
	 * @param noSubClasses toggles wether subclasses of PathDescription should be excluded
	 */
	public Iterable<? extends PathDescription> getPathDescriptionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type ExponentiatedPathDescription or subtypes
	 */
	public Iterable<? extends ExponentiatedPathDescription> getExponentiatedPathDescriptionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type ExponentiatedPathDescription
	 * @param noSubClasses toggles wether subclasses of ExponentiatedPathDescription should be excluded
	 */
	public Iterable<? extends ExponentiatedPathDescription> getExponentiatedPathDescriptionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type SimplePathDescription or subtypes
	 */
	public Iterable<? extends SimplePathDescription> getSimplePathDescriptionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type SimplePathDescription
	 * @param noSubClasses toggles wether subclasses of SimplePathDescription should be excluded
	 */
	public Iterable<? extends SimplePathDescription> getSimplePathDescriptionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type RecordId or subtypes
	 */
	public Iterable<? extends RecordId> getRecordIdVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type RecordId
	 * @param noSubClasses toggles wether subclasses of RecordId should be excluded
	 */
	public Iterable<? extends RecordId> getRecordIdVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type PathSystemConstruction or subtypes
	 */
	public Iterable<? extends PathSystemConstruction> getPathSystemConstructionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type PathSystemConstruction
	 * @param noSubClasses toggles wether subclasses of PathSystemConstruction should be excluded
	 */
	public Iterable<? extends PathSystemConstruction> getPathSystemConstructionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type TypeId or subtypes
	 */
	public Iterable<? extends TypeId> getTypeIdVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type TypeId
	 * @param noSubClasses toggles wether subclasses of TypeId should be excluded
	 */
	public Iterable<? extends TypeId> getTypeIdVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type IntLiteral or subtypes
	 */
	public Iterable<? extends IntLiteral> getIntLiteralVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type IntLiteral
	 * @param noSubClasses toggles wether subclasses of IntLiteral should be excluded
	 */
	public Iterable<? extends IntLiteral> getIntLiteralVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type PathConstruction or subtypes
	 */
	public Iterable<? extends PathConstruction> getPathConstructionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type PathConstruction
	 * @param noSubClasses toggles wether subclasses of PathConstruction should be excluded
	 */
	public Iterable<? extends PathConstruction> getPathConstructionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type SubgraphExpression or subtypes
	 */
	public Iterable<? extends SubgraphExpression> getSubgraphExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type SubgraphExpression
	 * @param noSubClasses toggles wether subclasses of SubgraphExpression should be excluded
	 */
	public Iterable<? extends SubgraphExpression> getSubgraphExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Declaration or subtypes
	 */
	public Iterable<? extends Declaration> getDeclarationVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Declaration
	 * @param noSubClasses toggles wether subclasses of Declaration should be excluded
	 */
	public Iterable<? extends Declaration> getDeclarationVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type ListRangeConstruction or subtypes
	 */
	public Iterable<? extends ListRangeConstruction> getListRangeConstructionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type ListRangeConstruction
	 * @param noSubClasses toggles wether subclasses of ListRangeConstruction should be excluded
	 */
	public Iterable<? extends ListRangeConstruction> getListRangeConstructionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type CfGrammar or subtypes
	 */
	public Iterable<? extends CfGrammar> getCfGrammarVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type CfGrammar
	 * @param noSubClasses toggles wether subclasses of CfGrammar should be excluded
	 */
	public Iterable<? extends CfGrammar> getCfGrammarVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Greql2Vertex or subtypes
	 */
	public Iterable<? extends Greql2Vertex> getGreql2VertexVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Greql2Vertex
	 * @param noSubClasses toggles wether subclasses of Greql2Vertex should be excluded
	 */
	public Iterable<? extends Greql2Vertex> getGreql2VertexVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type TableComprehension or subtypes
	 */
	public Iterable<? extends TableComprehension> getTableComprehensionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type TableComprehension
	 * @param noSubClasses toggles wether subclasses of TableComprehension should be excluded
	 */
	public Iterable<? extends TableComprehension> getTableComprehensionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Comprehension or subtypes
	 */
	public Iterable<? extends Comprehension> getComprehensionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Comprehension
	 * @param noSubClasses toggles wether subclasses of Comprehension should be excluded
	 */
	public Iterable<? extends Comprehension> getComprehensionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Nonterminal or subtypes
	 */
	public Iterable<? extends Nonterminal> getNonterminalVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Nonterminal
	 * @param noSubClasses toggles wether subclasses of Nonterminal should be excluded
	 */
	public Iterable<? extends Nonterminal> getNonterminalVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type BoolLiteral or subtypes
	 */
	public Iterable<? extends BoolLiteral> getBoolLiteralVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type BoolLiteral
	 * @param noSubClasses toggles wether subclasses of BoolLiteral should be excluded
	 */
	public Iterable<? extends BoolLiteral> getBoolLiteralVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Symbol or subtypes
	 */
	public Iterable<? extends Symbol> getSymbolVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Symbol
	 * @param noSubClasses toggles wether subclasses of Symbol should be excluded
	 */
	public Iterable<? extends Symbol> getSymbolVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type DefinitionExpression or subtypes
	 */
	public Iterable<? extends DefinitionExpression> getDefinitionExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type DefinitionExpression
	 * @param noSubClasses toggles wether subclasses of DefinitionExpression should be excluded
	 */
	public Iterable<? extends DefinitionExpression> getDefinitionExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type AlternativePathDescription or subtypes
	 */
	public Iterable<? extends AlternativePathDescription> getAlternativePathDescriptionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type AlternativePathDescription
	 * @param noSubClasses toggles wether subclasses of AlternativePathDescription should be excluded
	 */
	public Iterable<? extends AlternativePathDescription> getAlternativePathDescriptionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Expression or subtypes
	 */
	public Iterable<? extends Expression> getExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Expression
	 * @param noSubClasses toggles wether subclasses of Expression should be excluded
	 */
	public Iterable<? extends Expression> getExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type EdgeSubgraphExpression or subtypes
	 */
	public Iterable<? extends EdgeSubgraphExpression> getEdgeSubgraphExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type EdgeSubgraphExpression
	 * @param noSubClasses toggles wether subclasses of EdgeSubgraphExpression should be excluded
	 */
	public Iterable<? extends EdgeSubgraphExpression> getEdgeSubgraphExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type ComprehensionWithTableHeader or subtypes
	 */
	public Iterable<? extends ComprehensionWithTableHeader> getComprehensionWithTableHeaderVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type ComprehensionWithTableHeader
	 * @param noSubClasses toggles wether subclasses of ComprehensionWithTableHeader should be excluded
	 */
	public Iterable<? extends ComprehensionWithTableHeader> getComprehensionWithTableHeaderVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type EdgeVertexList or subtypes
	 */
	public Iterable<? extends EdgeVertexList> getEdgeVertexListVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type EdgeVertexList
	 * @param noSubClasses toggles wether subclasses of EdgeVertexList should be excluded
	 */
	public Iterable<? extends EdgeVertexList> getEdgeVertexListVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type BagConstruction or subtypes
	 */
	public Iterable<? extends BagConstruction> getBagConstructionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type BagConstruction
	 * @param noSubClasses toggles wether subclasses of BagConstruction should be excluded
	 */
	public Iterable<? extends BagConstruction> getBagConstructionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type StringLiteral or subtypes
	 */
	public Iterable<? extends StringLiteral> getStringLiteralVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type StringLiteral
	 * @param noSubClasses toggles wether subclasses of StringLiteral should be excluded
	 */
	public Iterable<? extends StringLiteral> getStringLiteralVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type ConditionalExpression or subtypes
	 */
	public Iterable<? extends ConditionalExpression> getConditionalExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type ConditionalExpression
	 * @param noSubClasses toggles wether subclasses of ConditionalExpression should be excluded
	 */
	public Iterable<? extends ConditionalExpression> getConditionalExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Variable or subtypes
	 */
	public Iterable<? extends Variable> getVariableVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Variable
	 * @param noSubClasses toggles wether subclasses of Variable should be excluded
	 */
	public Iterable<? extends Variable> getVariableVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type ListConstruction or subtypes
	 */
	public Iterable<? extends ListConstruction> getListConstructionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type ListConstruction
	 * @param noSubClasses toggles wether subclasses of ListConstruction should be excluded
	 */
	public Iterable<? extends ListConstruction> getListConstructionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type EdgePathDescription or subtypes
	 */
	public Iterable<? extends EdgePathDescription> getEdgePathDescriptionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type EdgePathDescription
	 * @param noSubClasses toggles wether subclasses of EdgePathDescription should be excluded
	 */
	public Iterable<? extends EdgePathDescription> getEdgePathDescriptionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type RecordConstruction or subtypes
	 */
	public Iterable<? extends RecordConstruction> getRecordConstructionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type RecordConstruction
	 * @param noSubClasses toggles wether subclasses of RecordConstruction should be excluded
	 */
	public Iterable<? extends RecordConstruction> getRecordConstructionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type FunctionId or subtypes
	 */
	public Iterable<? extends FunctionId> getFunctionIdVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type FunctionId
	 * @param noSubClasses toggles wether subclasses of FunctionId should be excluded
	 */
	public Iterable<? extends FunctionId> getFunctionIdVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type BagComprehension or subtypes
	 */
	public Iterable<? extends BagComprehension> getBagComprehensionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type BagComprehension
	 * @param noSubClasses toggles wether subclasses of BagComprehension should be excluded
	 */
	public Iterable<? extends BagComprehension> getBagComprehensionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type PrimaryPathDescription or subtypes
	 */
	public Iterable<? extends PrimaryPathDescription> getPrimaryPathDescriptionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type PrimaryPathDescription
	 * @param noSubClasses toggles wether subclasses of PrimaryPathDescription should be excluded
	 */
	public Iterable<? extends PrimaryPathDescription> getPrimaryPathDescriptionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type ElementSetExpression or subtypes
	 */
	public Iterable<? extends ElementSetExpression> getElementSetExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type ElementSetExpression
	 * @param noSubClasses toggles wether subclasses of ElementSetExpression should be excluded
	 */
	public Iterable<? extends ElementSetExpression> getElementSetExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type TupleConstruction or subtypes
	 */
	public Iterable<? extends TupleConstruction> getTupleConstructionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type TupleConstruction
	 * @param noSubClasses toggles wether subclasses of TupleConstruction should be excluded
	 */
	public Iterable<? extends TupleConstruction> getTupleConstructionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type LetExpression or subtypes
	 */
	public Iterable<? extends LetExpression> getLetExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type LetExpression
	 * @param noSubClasses toggles wether subclasses of LetExpression should be excluded
	 */
	public Iterable<? extends LetExpression> getLetExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type ValueConstruction or subtypes
	 */
	public Iterable<? extends ValueConstruction> getValueConstructionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type ValueConstruction
	 * @param noSubClasses toggles wether subclasses of ValueConstruction should be excluded
	 */
	public Iterable<? extends ValueConstruction> getValueConstructionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type EdgeSetExpression or subtypes
	 */
	public Iterable<? extends EdgeSetExpression> getEdgeSetExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type EdgeSetExpression
	 * @param noSubClasses toggles wether subclasses of EdgeSetExpression should be excluded
	 */
	public Iterable<? extends EdgeSetExpression> getEdgeSetExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type RoleId or subtypes
	 */
	public Iterable<? extends RoleId> getRoleIdVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type RoleId
	 * @param noSubClasses toggles wether subclasses of RoleId should be excluded
	 */
	public Iterable<? extends RoleId> getRoleIdVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type SetConstruction or subtypes
	 */
	public Iterable<? extends SetConstruction> getSetConstructionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type SetConstruction
	 * @param noSubClasses toggles wether subclasses of SetConstruction should be excluded
	 */
	public Iterable<? extends SetConstruction> getSetConstructionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type OptionalPathDescription or subtypes
	 */
	public Iterable<? extends OptionalPathDescription> getOptionalPathDescriptionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type OptionalPathDescription
	 * @param noSubClasses toggles wether subclasses of OptionalPathDescription should be excluded
	 */
	public Iterable<? extends OptionalPathDescription> getOptionalPathDescriptionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type NullLiteral or subtypes
	 */
	public Iterable<? extends NullLiteral> getNullLiteralVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type NullLiteral
	 * @param noSubClasses toggles wether subclasses of NullLiteral should be excluded
	 */
	public Iterable<? extends NullLiteral> getNullLiteralVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Greql2Expression or subtypes
	 */
	public Iterable<? extends Greql2Expression> getGreql2ExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Greql2Expression
	 * @param noSubClasses toggles wether subclasses of Greql2Expression should be excluded
	 */
	public Iterable<? extends Greql2Expression> getGreql2ExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type TransposedPathDescription or subtypes
	 */
	public Iterable<? extends TransposedPathDescription> getTransposedPathDescriptionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type TransposedPathDescription
	 * @param noSubClasses toggles wether subclasses of TransposedPathDescription should be excluded
	 */
	public Iterable<? extends TransposedPathDescription> getTransposedPathDescriptionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type IntermediateVertexPathDescription or subtypes
	 */
	public Iterable<? extends IntermediateVertexPathDescription> getIntermediateVertexPathDescriptionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type IntermediateVertexPathDescription
	 * @param noSubClasses toggles wether subclasses of IntermediateVertexPathDescription should be excluded
	 */
	public Iterable<? extends IntermediateVertexPathDescription> getIntermediateVertexPathDescriptionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type IteratedPathDescription or subtypes
	 */
	public Iterable<? extends IteratedPathDescription> getIteratedPathDescriptionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type IteratedPathDescription
	 * @param noSubClasses toggles wether subclasses of IteratedPathDescription should be excluded
	 */
	public Iterable<? extends IteratedPathDescription> getIteratedPathDescriptionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Definition or subtypes
	 */
	public Iterable<? extends Definition> getDefinitionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Definition
	 * @param noSubClasses toggles wether subclasses of Definition should be excluded
	 */
	public Iterable<? extends Definition> getDefinitionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type QuantifiedExpression or subtypes
	 */
	public Iterable<? extends QuantifiedExpression> getQuantifiedExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type QuantifiedExpression
	 * @param noSubClasses toggles wether subclasses of QuantifiedExpression should be excluded
	 */
	public Iterable<? extends QuantifiedExpression> getQuantifiedExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Literal or subtypes
	 */
	public Iterable<? extends Literal> getLiteralVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Literal
	 * @param noSubClasses toggles wether subclasses of Literal should be excluded
	 */
	public Iterable<? extends Literal> getLiteralVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type SetComprehension or subtypes
	 */
	public Iterable<? extends SetComprehension> getSetComprehensionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type SetComprehension
	 * @param noSubClasses toggles wether subclasses of SetComprehension should be excluded
	 */
	public Iterable<? extends SetComprehension> getSetComprehensionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type EdgeRestriction or subtypes
	 */
	public Iterable<? extends EdgeRestriction> getEdgeRestrictionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type EdgeRestriction
	 * @param noSubClasses toggles wether subclasses of EdgeRestriction should be excluded
	 */
	public Iterable<? extends EdgeRestriction> getEdgeRestrictionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type RightSide or subtypes
	 */
	public Iterable<? extends RightSide> getRightSideVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type RightSide
	 * @param noSubClasses toggles wether subclasses of RightSide should be excluded
	 */
	public Iterable<? extends RightSide> getRightSideVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type PathExistence or subtypes
	 */
	public Iterable<? extends PathExistence> getPathExistenceVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type PathExistence
	 * @param noSubClasses toggles wether subclasses of PathExistence should be excluded
	 */
	public Iterable<? extends PathExistence> getPathExistenceVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type ThisLiteral or subtypes
	 */
	public Iterable<? extends ThisLiteral> getThisLiteralVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type ThisLiteral
	 * @param noSubClasses toggles wether subclasses of ThisLiteral should be excluded
	 */
	public Iterable<? extends ThisLiteral> getThisLiteralVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type RealLiteral or subtypes
	 */
	public Iterable<? extends RealLiteral> getRealLiteralVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type RealLiteral
	 * @param noSubClasses toggles wether subclasses of RealLiteral should be excluded
	 */
	public Iterable<? extends RealLiteral> getRealLiteralVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type VertexSubgraphExpression or subtypes
	 */
	public Iterable<? extends VertexSubgraphExpression> getVertexSubgraphExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type VertexSubgraphExpression
	 * @param noSubClasses toggles wether subclasses of VertexSubgraphExpression should be excluded
	 */
	public Iterable<? extends VertexSubgraphExpression> getVertexSubgraphExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type SimpleDeclaration or subtypes
	 */
	public Iterable<? extends SimpleDeclaration> getSimpleDeclarationVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type SimpleDeclaration
	 * @param noSubClasses toggles wether subclasses of SimpleDeclaration should be excluded
	 */
	public Iterable<? extends SimpleDeclaration> getSimpleDeclarationVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Direction or subtypes
	 */
	public Iterable<? extends Direction> getDirectionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Direction
	 * @param noSubClasses toggles wether subclasses of Direction should be excluded
	 */
	public Iterable<? extends Direction> getDirectionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type PathExpression or subtypes
	 */
	public Iterable<? extends PathExpression> getPathExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type PathExpression
	 * @param noSubClasses toggles wether subclasses of PathExpression should be excluded
	 */
	public Iterable<? extends PathExpression> getPathExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type Identifier or subtypes
	 */
	public Iterable<? extends Identifier> getIdentifierVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type Identifier
	 * @param noSubClasses toggles wether subclasses of Identifier should be excluded
	 */
	public Iterable<? extends Identifier> getIdentifierVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type BackwardVertexSet or subtypes
	 */
	public Iterable<? extends BackwardVertexSet> getBackwardVertexSetVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type BackwardVertexSet
	 * @param noSubClasses toggles wether subclasses of BackwardVertexSet should be excluded
	 */
	public Iterable<? extends BackwardVertexSet> getBackwardVertexSetVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type FunctionApplication or subtypes
	 */
	public Iterable<? extends FunctionApplication> getFunctionApplicationVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type FunctionApplication
	 * @param noSubClasses toggles wether subclasses of FunctionApplication should be excluded
	 */
	public Iterable<? extends FunctionApplication> getFunctionApplicationVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type ForwardVertexSet or subtypes
	 */
	public Iterable<? extends ForwardVertexSet> getForwardVertexSetVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type ForwardVertexSet
	 * @param noSubClasses toggles wether subclasses of ForwardVertexSet should be excluded
	 */
	public Iterable<? extends ForwardVertexSet> getForwardVertexSetVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type SequentialPathDescription or subtypes
	 */
	public Iterable<? extends SequentialPathDescription> getSequentialPathDescriptionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type SequentialPathDescription
	 * @param noSubClasses toggles wether subclasses of SequentialPathDescription should be excluded
	 */
	public Iterable<? extends SequentialPathDescription> getSequentialPathDescriptionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type AttributeId or subtypes
	 */
	public Iterable<? extends AttributeId> getAttributeIdVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type AttributeId
	 * @param noSubClasses toggles wether subclasses of AttributeId should be excluded
	 */
	public Iterable<? extends AttributeId> getAttributeIdVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type VertexSetExpression or subtypes
	 */
	public Iterable<? extends VertexSetExpression> getVertexSetExpressionVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type VertexSetExpression
	 * @param noSubClasses toggles wether subclasses of VertexSetExpression should be excluded
	 */
	public Iterable<? extends VertexSetExpression> getVertexSetExpressionVertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type RecordElement or subtypes
	 */
	public Iterable<? extends RecordElement> getRecordElementVertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type RecordElement
	 * @param noSubClasses toggles wether subclasses of RecordElement should be excluded
	 */
	public Iterable<? extends RecordElement> getRecordElementVertices(boolean noSubClasses);

}
