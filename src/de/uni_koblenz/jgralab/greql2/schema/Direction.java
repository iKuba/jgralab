/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.impl.DirectionImpl;

public interface Direction extends Greql2Vertex, Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<DirectionImpl> IMPLEMENTATION_CLASS = DirectionImpl.class;

	public String getDirValue();

	public void setDirValue(String dirValue);

	/**
	 * @return the next Direction vertex in the global vertex sequence
	 */
	public Direction getNextDirection();

	/**
	 * @return the next Direction vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Direction are accepted
	 */
	public Direction getNextDirection(boolean noSubClasses);

	/**
	 * @return the next Greql2Vertex vertex in the global vertex sequence
	 */
	public Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 */
	public IsBoundExprOf getFirstIsBoundExprOf();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 */
	public Greql2Aggregation getFirstGreql2Aggregation();

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 */
	public IsTypeExprOf getFirstIsTypeExprOf();

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsDirectionOf at this vertex
	 */
	public IsDirectionOf getFirstIsDirectionOf();

	/**
	 * @return the first edge of class IsDirectionOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsDirectionOf getFirstIsDirectionOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsDirectionOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsDirectionOf are accepted
	 */
	public IsDirectionOf getFirstIsDirectionOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsDirectionOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsDirectionOf are accepted
	 */
	public IsDirectionOf getFirstIsDirectionOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDirectionOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsDirectionOf, ? extends Vertex>> getIsDirectionOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDirectionOf
	 * @param noSubClasses toggles wether subclasses of IsDirectionOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsDirectionOf, ? extends Vertex>> getIsDirectionOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDirectionOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsDirectionOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsDirectionOf, ? extends Vertex>> getIsDirectionOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDirectionOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsDirectionOf, ? extends Vertex>> getIsDirectionOfIncidences(EdgeDirection direction);

}
