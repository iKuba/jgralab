/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.impl.DefinitionImpl;

public interface Definition extends Greql2Vertex, Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<DefinitionImpl> IMPLEMENTATION_CLASS = DefinitionImpl.class;

	/**
	 * @return the next Definition vertex in the global vertex sequence
	 */
	public Definition getNextDefinition();

	/**
	 * @return the next Definition vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Definition are accepted
	 */
	public Definition getNextDefinition(boolean noSubClasses);

	/**
	 * @return the next Greql2Vertex vertex in the global vertex sequence
	 */
	public Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 */
	public IsBoundExprOf getFirstIsBoundExprOf();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsDefinitionOf at this vertex
	 */
	public IsDefinitionOf getFirstIsDefinitionOf();

	/**
	 * @return the first edge of class IsDefinitionOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsDefinitionOf getFirstIsDefinitionOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsDefinitionOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsDefinitionOf are accepted
	 */
	public IsDefinitionOf getFirstIsDefinitionOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsDefinitionOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsDefinitionOf are accepted
	 */
	public IsDefinitionOf getFirstIsDefinitionOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 */
	public Greql2Aggregation getFirstGreql2Aggregation();

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 */
	public IsTypeExprOf getFirstIsTypeExprOf();

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsVarOf at this vertex
	 */
	public IsVarOf getFirstIsVarOf();

	/**
	 * @return the first edge of class IsVarOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsVarOf getFirstIsVarOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsVarOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsVarOf are accepted
	 */
	public IsVarOf getFirstIsVarOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsVarOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsVarOf are accepted
	 */
	public IsVarOf getFirstIsVarOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsExprOf at this vertex
	 */
	public IsExprOf getFirstIsExprOf();

	/**
	 * @return the first edge of class IsExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsExprOf getFirstIsExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsExprOf are accepted
	 */
	public IsExprOf getFirstIsExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsExprOf are accepted
	 */
	public IsExprOf getFirstIsExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDefinitionOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsDefinitionOf, ? extends Vertex>> getIsDefinitionOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDefinitionOf
	 * @param noSubClasses toggles wether subclasses of IsDefinitionOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsDefinitionOf, ? extends Vertex>> getIsDefinitionOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDefinitionOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsDefinitionOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsDefinitionOf, ? extends Vertex>> getIsDefinitionOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDefinitionOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsDefinitionOf, ? extends Vertex>> getIsDefinitionOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsVarOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsVarOf, ? extends Vertex>> getIsVarOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsVarOf
	 * @param noSubClasses toggles wether subclasses of IsVarOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsVarOf, ? extends Vertex>> getIsVarOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsVarOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsVarOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsVarOf, ? extends Vertex>> getIsVarOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsVarOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsVarOf, ? extends Vertex>> getIsVarOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsExprOf
	 * @param noSubClasses toggles wether subclasses of IsExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(EdgeDirection direction);

}
