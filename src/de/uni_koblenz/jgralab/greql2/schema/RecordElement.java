/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.impl.RecordElementImpl;

public interface RecordElement extends Greql2Vertex, Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<RecordElementImpl> IMPLEMENTATION_CLASS = RecordElementImpl.class;

	/**
	 * @return the next Greql2Vertex vertex in the global vertex sequence
	 */
	public Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the next RecordElement vertex in the global vertex sequence
	 */
	public RecordElement getNextRecordElement();

	/**
	 * @return the next RecordElement vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of RecordElement are accepted
	 */
	public RecordElement getNextRecordElement(boolean noSubClasses);

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 */
	public IsBoundExprOf getFirstIsBoundExprOf();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 */
	public IsRecordExprOf getFirstIsRecordExprOf();

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsRecordExprOf getFirstIsRecordExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRecordExprOf are accepted
	 */
	public IsRecordExprOf getFirstIsRecordExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRecordExprOf are accepted
	 */
	public IsRecordExprOf getFirstIsRecordExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 */
	public Greql2Aggregation getFirstGreql2Aggregation();

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 */
	public IsTypeExprOf getFirstIsTypeExprOf();

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRecordElementOf at this vertex
	 */
	public IsRecordElementOf getFirstIsRecordElementOf();

	/**
	 * @return the first edge of class IsRecordElementOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsRecordElementOf getFirstIsRecordElementOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRecordElementOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRecordElementOf are accepted
	 */
	public IsRecordElementOf getFirstIsRecordElementOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsRecordElementOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRecordElementOf are accepted
	 */
	public IsRecordElementOf getFirstIsRecordElementOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsRecordIdOf at this vertex
	 */
	public IsRecordIdOf getFirstIsRecordIdOf();

	/**
	 * @return the first edge of class IsRecordIdOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsRecordIdOf getFirstIsRecordIdOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRecordIdOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRecordIdOf are accepted
	 */
	public IsRecordIdOf getFirstIsRecordIdOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsRecordIdOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRecordIdOf are accepted
	 */
	public IsRecordIdOf getFirstIsRecordIdOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordExprOf
	 * @param noSubClasses toggles wether subclasses of IsRecordExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsRecordExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordElementOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordElementOf, ? extends Vertex>> getIsRecordElementOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordElementOf
	 * @param noSubClasses toggles wether subclasses of IsRecordElementOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordElementOf, ? extends Vertex>> getIsRecordElementOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordElementOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsRecordElementOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordElementOf, ? extends Vertex>> getIsRecordElementOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordElementOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordElementOf, ? extends Vertex>> getIsRecordElementOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordIdOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordIdOf, ? extends Vertex>> getIsRecordIdOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordIdOf
	 * @param noSubClasses toggles wether subclasses of IsRecordIdOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordIdOf, ? extends Vertex>> getIsRecordIdOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordIdOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsRecordIdOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordIdOf, ? extends Vertex>> getIsRecordIdOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordIdOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordIdOf, ? extends Vertex>> getIsRecordIdOfIncidences(EdgeDirection direction);

}
