/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.impl.RightSideImpl;

public interface RightSide extends Greql2Vertex, Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<RightSideImpl> IMPLEMENTATION_CLASS = RightSideImpl.class;

	/**
	 * @return the next Greql2Vertex vertex in the global vertex sequence
	 */
	public Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the next RightSide vertex in the global vertex sequence
	 */
	public RightSide getNextRightSide();

	/**
	 * @return the next RightSide vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of RightSide are accepted
	 */
	public RightSide getNextRightSide(boolean noSubClasses);

	/**
	 * @return the first edge of class IsRightSideOf at this vertex
	 */
	public IsRightSideOf getFirstIsRightSideOf();

	/**
	 * @return the first edge of class IsRightSideOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsRightSideOf getFirstIsRightSideOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRightSideOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRightSideOf are accepted
	 */
	public IsRightSideOf getFirstIsRightSideOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsRightSideOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRightSideOf are accepted
	 */
	public IsRightSideOf getFirstIsRightSideOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 */
	public IsBoundExprOf getFirstIsBoundExprOf();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSymbolOf at this vertex
	 */
	public IsSymbolOf getFirstIsSymbolOf();

	/**
	 * @return the first edge of class IsSymbolOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSymbolOf getFirstIsSymbolOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSymbolOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSymbolOf are accepted
	 */
	public IsSymbolOf getFirstIsSymbolOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsSymbolOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSymbolOf are accepted
	 */
	public IsSymbolOf getFirstIsSymbolOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 */
	public Greql2Aggregation getFirstGreql2Aggregation();

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 */
	public IsTypeExprOf getFirstIsTypeExprOf();

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRightSideOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsRightSideOf, ? extends Vertex>> getIsRightSideOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRightSideOf
	 * @param noSubClasses toggles wether subclasses of IsRightSideOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRightSideOf, ? extends Vertex>> getIsRightSideOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRightSideOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsRightSideOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRightSideOf, ? extends Vertex>> getIsRightSideOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRightSideOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsRightSideOf, ? extends Vertex>> getIsRightSideOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSymbolOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsSymbolOf, ? extends Vertex>> getIsSymbolOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSymbolOf
	 * @param noSubClasses toggles wether subclasses of IsSymbolOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSymbolOf, ? extends Vertex>> getIsSymbolOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSymbolOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsSymbolOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSymbolOf, ? extends Vertex>> getIsSymbolOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSymbolOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsSymbolOf, ? extends Vertex>> getIsSymbolOfIncidences(EdgeDirection direction);

}
