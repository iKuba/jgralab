/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.impl.SimpleDeclarationImpl;

public interface SimpleDeclaration extends Greql2Vertex, Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<SimpleDeclarationImpl> IMPLEMENTATION_CLASS = SimpleDeclarationImpl.class;

	/**
	 * @return the next Greql2Vertex vertex in the global vertex sequence
	 */
	public Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the next SimpleDeclaration vertex in the global vertex sequence
	 */
	public SimpleDeclaration getNextSimpleDeclaration();

	/**
	 * @return the next SimpleDeclaration vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of SimpleDeclaration are accepted
	 */
	public SimpleDeclaration getNextSimpleDeclaration(boolean noSubClasses);

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 */
	public IsBoundExprOf getFirstIsBoundExprOf();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 */
	public Greql2Aggregation getFirstGreql2Aggregation();

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 */
	public IsTypeExprOf getFirstIsTypeExprOf();

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 */
	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration();

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeExprOfDeclaration are accepted
	 */
	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration(boolean noSubClasses);

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeExprOfDeclaration are accepted
	 */
	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsDeclaredVarOf at this vertex
	 */
	public IsDeclaredVarOf getFirstIsDeclaredVarOf();

	/**
	 * @return the first edge of class IsDeclaredVarOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsDeclaredVarOf getFirstIsDeclaredVarOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsDeclaredVarOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsDeclaredVarOf are accepted
	 */
	public IsDeclaredVarOf getFirstIsDeclaredVarOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsDeclaredVarOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsDeclaredVarOf are accepted
	 */
	public IsDeclaredVarOf getFirstIsDeclaredVarOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 */
	public IsSimpleDeclOf getFirstIsSimpleDeclOf();

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSimpleDeclOf getFirstIsSimpleDeclOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSimpleDeclOf are accepted
	 */
	public IsSimpleDeclOf getFirstIsSimpleDeclOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSimpleDeclOf are accepted
	 */
	public IsSimpleDeclOf getFirstIsSimpleDeclOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDeclaredVarOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsDeclaredVarOf, ? extends Vertex>> getIsDeclaredVarOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDeclaredVarOf
	 * @param noSubClasses toggles wether subclasses of IsDeclaredVarOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsDeclaredVarOf, ? extends Vertex>> getIsDeclaredVarOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDeclaredVarOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsDeclaredVarOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsDeclaredVarOf, ? extends Vertex>> getIsDeclaredVarOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsDeclaredVarOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsDeclaredVarOf, ? extends Vertex>> getIsDeclaredVarOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration
	 * @param noSubClasses toggles wether subclasses of IsTypeExprOfDeclaration should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsTypeExprOfDeclaration should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf
	 * @param noSubClasses toggles wether subclasses of IsSimpleDeclOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsSimpleDeclOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences(EdgeDirection direction);

}
