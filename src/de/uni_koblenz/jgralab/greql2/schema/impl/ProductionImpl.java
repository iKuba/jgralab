/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema.impl;

import de.uni_koblenz.jgralab.impl.array.VertexImpl;
import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.VertexClass;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.Greql2Aggregation;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsLeftSideOf;
import de.uni_koblenz.jgralab.greql2.schema.IsProductionOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRightSideOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf;
import de.uni_koblenz.jgralab.greql2.schema.Production;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class ProductionImpl extends VertexImpl implements Greql2Vertex, Production, Vertex {

	public ProductionImpl(int id, Graph g) {
		super(id, g, (VertexClass)g.getGraphClass().getGraphElementClass("Production"));
	}

	public Class<? extends AttributedElement> getM1Class() {
		return Production.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		throw new NoSuchFieldException("Production doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		throw new NoSuchFieldException("Production doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	/* add all valid from edges */
	private static Set<Class<? extends Edge>> validFromEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidAlpha()
	 */
	public boolean isValidAlpha(Edge edge) {
		return validFromEdges.contains(edge.getClass());
	}
	
	{

		validFromEdges.add(IsProductionOfImpl.class);

	}
	
	/* add all valid to edges */
	private static Set<Class<? extends Edge>> validToEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidOemga()
	 */
	public boolean isValidOmega(Edge edge) {
		return validToEdges.contains(edge.getClass());
	}
	
	{

		validToEdges.add(IsRightSideOfImpl.class);

		validToEdges.add(IsLeftSideOfImpl.class);

	}

	public Greql2Vertex getNextGreql2Vertex() {
		return (Greql2Vertex)getNextVertexOfClass(Greql2Vertex.class);
	}

	public Production getNextProduction() {
		return (Production)getNextVertexOfClass(Production.class);
	}

	public Production getNextProduction(boolean noSubClasses) {
		return (Production)getNextVertexOfClass(Production.class, noSubClasses);
	}

	public IsRightSideOf getFirstIsRightSideOf() {
		return (IsRightSideOf)getFirstEdgeOfClass(IsRightSideOf.class);
	}

	public IsRightSideOf getFirstIsRightSideOf(EdgeDirection orientation) {
		return (IsRightSideOf)getFirstEdgeOfClass(IsRightSideOf.class, orientation);
	}

	public IsRightSideOf getFirstIsRightSideOf(boolean noSubClasses) {
		return (IsRightSideOf)getFirstEdgeOfClass(IsRightSideOf.class, noSubClasses);
	}

	public IsRightSideOf getFirstIsRightSideOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsRightSideOf)getFirstEdgeOfClass(IsRightSideOf.class, orientation, noSubClasses);
	}

	public IsBoundExprOf getFirstIsBoundExprOf() {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class);
	}

	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation) {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class, orientation);
	}

	public IsProductionOf getFirstIsProductionOf() {
		return (IsProductionOf)getFirstEdgeOfClass(IsProductionOf.class);
	}

	public IsProductionOf getFirstIsProductionOf(EdgeDirection orientation) {
		return (IsProductionOf)getFirstEdgeOfClass(IsProductionOf.class, orientation);
	}

	public IsProductionOf getFirstIsProductionOf(boolean noSubClasses) {
		return (IsProductionOf)getFirstEdgeOfClass(IsProductionOf.class, noSubClasses);
	}

	public IsProductionOf getFirstIsProductionOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsProductionOf)getFirstEdgeOfClass(IsProductionOf.class, orientation, noSubClasses);
	}

	public Greql2Aggregation getFirstGreql2Aggregation() {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class);
	}

	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation) {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class, orientation);
	}

	public IsTypeExprOf getFirstIsTypeExprOf() {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class);
	}

	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation) {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class, orientation);
	}

	public IsLeftSideOf getFirstIsLeftSideOf() {
		return (IsLeftSideOf)getFirstEdgeOfClass(IsLeftSideOf.class);
	}

	public IsLeftSideOf getFirstIsLeftSideOf(EdgeDirection orientation) {
		return (IsLeftSideOf)getFirstEdgeOfClass(IsLeftSideOf.class, orientation);
	}

	public IsLeftSideOf getFirstIsLeftSideOf(boolean noSubClasses) {
		return (IsLeftSideOf)getFirstEdgeOfClass(IsLeftSideOf.class, noSubClasses);
	}

	public IsLeftSideOf getFirstIsLeftSideOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsLeftSideOf)getFirstEdgeOfClass(IsLeftSideOf.class, orientation, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsRightSideOf, ? extends Vertex>> getIsRightSideOfIncidences() {
		return new IncidenceIterable<IsRightSideOf, Vertex>(this, IsRightSideOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRightSideOf, ? extends Vertex>> getIsRightSideOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsRightSideOf, Vertex>(this, IsRightSideOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsRightSideOf, ? extends Vertex>> getIsRightSideOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsRightSideOf, Vertex>(this, IsRightSideOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRightSideOf, ? extends Vertex>> getIsRightSideOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsRightSideOf, Vertex>(this, IsRightSideOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences() {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsProductionOf, ? extends Vertex>> getIsProductionOfIncidences() {
		return new IncidenceIterable<IsProductionOf, Vertex>(this, IsProductionOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsProductionOf, ? extends Vertex>> getIsProductionOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsProductionOf, Vertex>(this, IsProductionOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsProductionOf, ? extends Vertex>> getIsProductionOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsProductionOf, Vertex>(this, IsProductionOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsProductionOf, ? extends Vertex>> getIsProductionOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsProductionOf, Vertex>(this, IsProductionOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences() {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(boolean noSubClasses) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences() {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsLeftSideOf, ? extends Vertex>> getIsLeftSideOfIncidences() {
		return new IncidenceIterable<IsLeftSideOf, Vertex>(this, IsLeftSideOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsLeftSideOf, ? extends Vertex>> getIsLeftSideOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsLeftSideOf, Vertex>(this, IsLeftSideOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsLeftSideOf, ? extends Vertex>> getIsLeftSideOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsLeftSideOf, Vertex>(this, IsLeftSideOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsLeftSideOf, ? extends Vertex>> getIsLeftSideOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsLeftSideOf, Vertex>(this, IsLeftSideOf.class, direction);
	}

}
