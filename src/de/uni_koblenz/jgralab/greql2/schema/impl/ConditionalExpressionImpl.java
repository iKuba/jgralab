/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema.impl;

import de.uni_koblenz.jgralab.impl.array.VertexImpl;
import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.VertexClass;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.ConditionalExpression;
import de.uni_koblenz.jgralab.greql2.schema.Expression;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Aggregation;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex;
import de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfDefinition;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier;
import de.uni_koblenz.jgralab.greql2.schema.IsColumnHeaderExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsCompResultDefOf;
import de.uni_koblenz.jgralab.greql2.schema.IsConditionOf;
import de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf;
import de.uni_koblenz.jgralab.greql2.schema.IsEdgeExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsEdgeOrVertexExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsFalseExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsFirstValueOf;
import de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf;
import de.uni_koblenz.jgralab.greql2.schema.IsIntermediateVertexOf;
import de.uni_koblenz.jgralab.greql2.schema.IsLastValueOf;
import de.uni_koblenz.jgralab.greql2.schema.IsNullExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsPartOf;
import de.uni_koblenz.jgralab.greql2.schema.IsPathOf;
import de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRestrictedExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRestrictionOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRootOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRowHeaderExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsStartExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf;
import de.uni_koblenz.jgralab.greql2.schema.IsSubgraphOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTableHeaderOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTargetExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTrueExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOf;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class ConditionalExpressionImpl extends VertexImpl implements ConditionalExpression, Expression, Greql2Vertex, Vertex {

	public ConditionalExpressionImpl(int id, Graph g) {
		super(id, g, (VertexClass)g.getGraphClass().getGraphElementClass("ConditionalExpression"));
	}

	public Class<? extends AttributedElement> getM1Class() {
		return ConditionalExpression.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		throw new NoSuchFieldException("ConditionalExpression doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		throw new NoSuchFieldException("ConditionalExpression doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	/* add all valid from edges */
	private static Set<Class<? extends Edge>> validFromEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidAlpha()
	 */
	public boolean isValidAlpha(Edge edge) {
		return validFromEdges.contains(edge.getClass());
	}
	
	{

		validFromEdges.add(IsConditionOfImpl.class);

		validFromEdges.add(IsConstraintOfImpl.class);

		validFromEdges.add(IsRestrictedExprOfImpl.class);

		validFromEdges.add(IsBoundExprOfDefinitionImpl.class);

		validFromEdges.add(IsRecordExprOfImpl.class);

		validFromEdges.add(IsPathOfImpl.class);

		validFromEdges.add(IsStartExprOfImpl.class);

		validFromEdges.add(IsQueryExprOfImpl.class);

		validFromEdges.add(IsEdgeOrVertexExprOfImpl.class);

		validFromEdges.add(IsBoundExprOfQuantifierImpl.class);

		validFromEdges.add(IsRowHeaderExprOfImpl.class);

		validFromEdges.add(IsRootOfImpl.class);

		validFromEdges.add(IsArgumentOfImpl.class);

		validFromEdges.add(IsTypeExprOfFunctionImpl.class);

		validFromEdges.add(IsCompResultDefOfImpl.class);

		validFromEdges.add(IsLastValueOfImpl.class);

		validFromEdges.add(IsFirstValueOfImpl.class);

		validFromEdges.add(IsEdgeExprOfImpl.class);

		validFromEdges.add(IsTableHeaderOfImpl.class);

		validFromEdges.add(IsColumnHeaderExprOfImpl.class);

		validFromEdges.add(IsRestrictionOfImpl.class);

		validFromEdges.add(IsPartOfImpl.class);

		validFromEdges.add(IsTrueExprOfImpl.class);

		validFromEdges.add(IsIntermediateVertexOfImpl.class);

		validFromEdges.add(IsGoalRestrOfImpl.class);

		validFromEdges.add(IsNullExprOfImpl.class);

		validFromEdges.add(IsFalseExprOfImpl.class);

		validFromEdges.add(IsTargetExprOfImpl.class);

		validFromEdges.add(IsStartRestrOfImpl.class);

		validFromEdges.add(IsTypeExprOfDeclarationImpl.class);

		validFromEdges.add(IsExprOfImpl.class);

		validFromEdges.add(IsSubgraphOfImpl.class);

	}
	
	/* add all valid to edges */
	private static Set<Class<? extends Edge>> validToEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidOemga()
	 */
	public boolean isValidOmega(Edge edge) {
		return validToEdges.contains(edge.getClass());
	}
	
	{

		validToEdges.add(IsConditionOfImpl.class);

		validToEdges.add(IsTypeRestrOfImpl.class);

		validToEdges.add(IsTrueExprOfImpl.class);

		validToEdges.add(IsFalseExprOfImpl.class);

		validToEdges.add(IsNullExprOfImpl.class);

	}

	public ConditionalExpression getNextConditionalExpression() {
		return (ConditionalExpression)getNextVertexOfClass(ConditionalExpression.class);
	}

	public ConditionalExpression getNextConditionalExpression(boolean noSubClasses) {
		return (ConditionalExpression)getNextVertexOfClass(ConditionalExpression.class, noSubClasses);
	}

	public Expression getNextExpression() {
		return (Expression)getNextVertexOfClass(Expression.class);
	}

	public Greql2Vertex getNextGreql2Vertex() {
		return (Greql2Vertex)getNextVertexOfClass(Greql2Vertex.class);
	}

	public IsTypeRestrOf getFirstIsTypeRestrOf() {
		return (IsTypeRestrOf)getFirstEdgeOfClass(IsTypeRestrOf.class);
	}

	public IsTypeRestrOf getFirstIsTypeRestrOf(EdgeDirection orientation) {
		return (IsTypeRestrOf)getFirstEdgeOfClass(IsTypeRestrOf.class, orientation);
	}

	public IsTypeRestrOf getFirstIsTypeRestrOf(boolean noSubClasses) {
		return (IsTypeRestrOf)getFirstEdgeOfClass(IsTypeRestrOf.class, noSubClasses);
	}

	public IsTypeRestrOf getFirstIsTypeRestrOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsTypeRestrOf)getFirstEdgeOfClass(IsTypeRestrOf.class, orientation, noSubClasses);
	}

	public IsConditionOf getFirstIsConditionOf() {
		return (IsConditionOf)getFirstEdgeOfClass(IsConditionOf.class);
	}

	public IsConditionOf getFirstIsConditionOf(EdgeDirection orientation) {
		return (IsConditionOf)getFirstEdgeOfClass(IsConditionOf.class, orientation);
	}

	public IsConditionOf getFirstIsConditionOf(boolean noSubClasses) {
		return (IsConditionOf)getFirstEdgeOfClass(IsConditionOf.class, noSubClasses);
	}

	public IsConditionOf getFirstIsConditionOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsConditionOf)getFirstEdgeOfClass(IsConditionOf.class, orientation, noSubClasses);
	}

	public IsConstraintOf getFirstIsConstraintOf() {
		return (IsConstraintOf)getFirstEdgeOfClass(IsConstraintOf.class);
	}

	public IsConstraintOf getFirstIsConstraintOf(EdgeDirection orientation) {
		return (IsConstraintOf)getFirstEdgeOfClass(IsConstraintOf.class, orientation);
	}

	public IsConstraintOf getFirstIsConstraintOf(boolean noSubClasses) {
		return (IsConstraintOf)getFirstEdgeOfClass(IsConstraintOf.class, noSubClasses);
	}

	public IsConstraintOf getFirstIsConstraintOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsConstraintOf)getFirstEdgeOfClass(IsConstraintOf.class, orientation, noSubClasses);
	}

	public IsRestrictedExprOf getFirstIsRestrictedExprOf() {
		return (IsRestrictedExprOf)getFirstEdgeOfClass(IsRestrictedExprOf.class);
	}

	public IsRestrictedExprOf getFirstIsRestrictedExprOf(EdgeDirection orientation) {
		return (IsRestrictedExprOf)getFirstEdgeOfClass(IsRestrictedExprOf.class, orientation);
	}

	public IsRestrictedExprOf getFirstIsRestrictedExprOf(boolean noSubClasses) {
		return (IsRestrictedExprOf)getFirstEdgeOfClass(IsRestrictedExprOf.class, noSubClasses);
	}

	public IsRestrictedExprOf getFirstIsRestrictedExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsRestrictedExprOf)getFirstEdgeOfClass(IsRestrictedExprOf.class, orientation, noSubClasses);
	}

	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinition() {
		return (IsBoundExprOfDefinition)getFirstEdgeOfClass(IsBoundExprOfDefinition.class);
	}

	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinition(EdgeDirection orientation) {
		return (IsBoundExprOfDefinition)getFirstEdgeOfClass(IsBoundExprOfDefinition.class, orientation);
	}

	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinition(boolean noSubClasses) {
		return (IsBoundExprOfDefinition)getFirstEdgeOfClass(IsBoundExprOfDefinition.class, noSubClasses);
	}

	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinition(EdgeDirection orientation, boolean noSubClasses) {
		return (IsBoundExprOfDefinition)getFirstEdgeOfClass(IsBoundExprOfDefinition.class, orientation, noSubClasses);
	}

	public IsRecordExprOf getFirstIsRecordExprOf() {
		return (IsRecordExprOf)getFirstEdgeOfClass(IsRecordExprOf.class);
	}

	public IsRecordExprOf getFirstIsRecordExprOf(EdgeDirection orientation) {
		return (IsRecordExprOf)getFirstEdgeOfClass(IsRecordExprOf.class, orientation);
	}

	public IsRecordExprOf getFirstIsRecordExprOf(boolean noSubClasses) {
		return (IsRecordExprOf)getFirstEdgeOfClass(IsRecordExprOf.class, noSubClasses);
	}

	public IsRecordExprOf getFirstIsRecordExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsRecordExprOf)getFirstEdgeOfClass(IsRecordExprOf.class, orientation, noSubClasses);
	}

	public IsPathOf getFirstIsPathOf() {
		return (IsPathOf)getFirstEdgeOfClass(IsPathOf.class);
	}

	public IsPathOf getFirstIsPathOf(EdgeDirection orientation) {
		return (IsPathOf)getFirstEdgeOfClass(IsPathOf.class, orientation);
	}

	public IsPathOf getFirstIsPathOf(boolean noSubClasses) {
		return (IsPathOf)getFirstEdgeOfClass(IsPathOf.class, noSubClasses);
	}

	public IsPathOf getFirstIsPathOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsPathOf)getFirstEdgeOfClass(IsPathOf.class, orientation, noSubClasses);
	}

	public Greql2Aggregation getFirstGreql2Aggregation() {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class);
	}

	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation) {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class, orientation);
	}

	public IsTypeExprOf getFirstIsTypeExprOf() {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class);
	}

	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation) {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class, orientation);
	}

	public IsQueryExprOf getFirstIsQueryExprOf() {
		return (IsQueryExprOf)getFirstEdgeOfClass(IsQueryExprOf.class);
	}

	public IsQueryExprOf getFirstIsQueryExprOf(EdgeDirection orientation) {
		return (IsQueryExprOf)getFirstEdgeOfClass(IsQueryExprOf.class, orientation);
	}

	public IsQueryExprOf getFirstIsQueryExprOf(boolean noSubClasses) {
		return (IsQueryExprOf)getFirstEdgeOfClass(IsQueryExprOf.class, noSubClasses);
	}

	public IsQueryExprOf getFirstIsQueryExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsQueryExprOf)getFirstEdgeOfClass(IsQueryExprOf.class, orientation, noSubClasses);
	}

	public IsStartExprOf getFirstIsStartExprOf() {
		return (IsStartExprOf)getFirstEdgeOfClass(IsStartExprOf.class);
	}

	public IsStartExprOf getFirstIsStartExprOf(EdgeDirection orientation) {
		return (IsStartExprOf)getFirstEdgeOfClass(IsStartExprOf.class, orientation);
	}

	public IsStartExprOf getFirstIsStartExprOf(boolean noSubClasses) {
		return (IsStartExprOf)getFirstEdgeOfClass(IsStartExprOf.class, noSubClasses);
	}

	public IsStartExprOf getFirstIsStartExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsStartExprOf)getFirstEdgeOfClass(IsStartExprOf.class, orientation, noSubClasses);
	}

	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf() {
		return (IsEdgeOrVertexExprOf)getFirstEdgeOfClass(IsEdgeOrVertexExprOf.class);
	}

	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf(EdgeDirection orientation) {
		return (IsEdgeOrVertexExprOf)getFirstEdgeOfClass(IsEdgeOrVertexExprOf.class, orientation);
	}

	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf(boolean noSubClasses) {
		return (IsEdgeOrVertexExprOf)getFirstEdgeOfClass(IsEdgeOrVertexExprOf.class, noSubClasses);
	}

	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsEdgeOrVertexExprOf)getFirstEdgeOfClass(IsEdgeOrVertexExprOf.class, orientation, noSubClasses);
	}

	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifier() {
		return (IsBoundExprOfQuantifier)getFirstEdgeOfClass(IsBoundExprOfQuantifier.class);
	}

	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifier(EdgeDirection orientation) {
		return (IsBoundExprOfQuantifier)getFirstEdgeOfClass(IsBoundExprOfQuantifier.class, orientation);
	}

	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifier(boolean noSubClasses) {
		return (IsBoundExprOfQuantifier)getFirstEdgeOfClass(IsBoundExprOfQuantifier.class, noSubClasses);
	}

	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifier(EdgeDirection orientation, boolean noSubClasses) {
		return (IsBoundExprOfQuantifier)getFirstEdgeOfClass(IsBoundExprOfQuantifier.class, orientation, noSubClasses);
	}

	public IsRowHeaderExprOf getFirstIsRowHeaderExprOf() {
		return (IsRowHeaderExprOf)getFirstEdgeOfClass(IsRowHeaderExprOf.class);
	}

	public IsRowHeaderExprOf getFirstIsRowHeaderExprOf(EdgeDirection orientation) {
		return (IsRowHeaderExprOf)getFirstEdgeOfClass(IsRowHeaderExprOf.class, orientation);
	}

	public IsRowHeaderExprOf getFirstIsRowHeaderExprOf(boolean noSubClasses) {
		return (IsRowHeaderExprOf)getFirstEdgeOfClass(IsRowHeaderExprOf.class, noSubClasses);
	}

	public IsRowHeaderExprOf getFirstIsRowHeaderExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsRowHeaderExprOf)getFirstEdgeOfClass(IsRowHeaderExprOf.class, orientation, noSubClasses);
	}

	public IsRootOf getFirstIsRootOf() {
		return (IsRootOf)getFirstEdgeOfClass(IsRootOf.class);
	}

	public IsRootOf getFirstIsRootOf(EdgeDirection orientation) {
		return (IsRootOf)getFirstEdgeOfClass(IsRootOf.class, orientation);
	}

	public IsRootOf getFirstIsRootOf(boolean noSubClasses) {
		return (IsRootOf)getFirstEdgeOfClass(IsRootOf.class, noSubClasses);
	}

	public IsRootOf getFirstIsRootOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsRootOf)getFirstEdgeOfClass(IsRootOf.class, orientation, noSubClasses);
	}

	public IsTypeExprOfFunction getFirstIsTypeExprOfFunction() {
		return (IsTypeExprOfFunction)getFirstEdgeOfClass(IsTypeExprOfFunction.class);
	}

	public IsTypeExprOfFunction getFirstIsTypeExprOfFunction(EdgeDirection orientation) {
		return (IsTypeExprOfFunction)getFirstEdgeOfClass(IsTypeExprOfFunction.class, orientation);
	}

	public IsTypeExprOfFunction getFirstIsTypeExprOfFunction(boolean noSubClasses) {
		return (IsTypeExprOfFunction)getFirstEdgeOfClass(IsTypeExprOfFunction.class, noSubClasses);
	}

	public IsTypeExprOfFunction getFirstIsTypeExprOfFunction(EdgeDirection orientation, boolean noSubClasses) {
		return (IsTypeExprOfFunction)getFirstEdgeOfClass(IsTypeExprOfFunction.class, orientation, noSubClasses);
	}

	public IsArgumentOf getFirstIsArgumentOf() {
		return (IsArgumentOf)getFirstEdgeOfClass(IsArgumentOf.class);
	}

	public IsArgumentOf getFirstIsArgumentOf(EdgeDirection orientation) {
		return (IsArgumentOf)getFirstEdgeOfClass(IsArgumentOf.class, orientation);
	}

	public IsArgumentOf getFirstIsArgumentOf(boolean noSubClasses) {
		return (IsArgumentOf)getFirstEdgeOfClass(IsArgumentOf.class, noSubClasses);
	}

	public IsArgumentOf getFirstIsArgumentOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsArgumentOf)getFirstEdgeOfClass(IsArgumentOf.class, orientation, noSubClasses);
	}

	public IsCompResultDefOf getFirstIsCompResultDefOf() {
		return (IsCompResultDefOf)getFirstEdgeOfClass(IsCompResultDefOf.class);
	}

	public IsCompResultDefOf getFirstIsCompResultDefOf(EdgeDirection orientation) {
		return (IsCompResultDefOf)getFirstEdgeOfClass(IsCompResultDefOf.class, orientation);
	}

	public IsCompResultDefOf getFirstIsCompResultDefOf(boolean noSubClasses) {
		return (IsCompResultDefOf)getFirstEdgeOfClass(IsCompResultDefOf.class, noSubClasses);
	}

	public IsCompResultDefOf getFirstIsCompResultDefOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsCompResultDefOf)getFirstEdgeOfClass(IsCompResultDefOf.class, orientation, noSubClasses);
	}

	public IsLastValueOf getFirstIsLastValueOf() {
		return (IsLastValueOf)getFirstEdgeOfClass(IsLastValueOf.class);
	}

	public IsLastValueOf getFirstIsLastValueOf(EdgeDirection orientation) {
		return (IsLastValueOf)getFirstEdgeOfClass(IsLastValueOf.class, orientation);
	}

	public IsLastValueOf getFirstIsLastValueOf(boolean noSubClasses) {
		return (IsLastValueOf)getFirstEdgeOfClass(IsLastValueOf.class, noSubClasses);
	}

	public IsLastValueOf getFirstIsLastValueOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsLastValueOf)getFirstEdgeOfClass(IsLastValueOf.class, orientation, noSubClasses);
	}

	public IsFirstValueOf getFirstIsFirstValueOf() {
		return (IsFirstValueOf)getFirstEdgeOfClass(IsFirstValueOf.class);
	}

	public IsFirstValueOf getFirstIsFirstValueOf(EdgeDirection orientation) {
		return (IsFirstValueOf)getFirstEdgeOfClass(IsFirstValueOf.class, orientation);
	}

	public IsFirstValueOf getFirstIsFirstValueOf(boolean noSubClasses) {
		return (IsFirstValueOf)getFirstEdgeOfClass(IsFirstValueOf.class, noSubClasses);
	}

	public IsFirstValueOf getFirstIsFirstValueOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsFirstValueOf)getFirstEdgeOfClass(IsFirstValueOf.class, orientation, noSubClasses);
	}

	public IsEdgeExprOf getFirstIsEdgeExprOf() {
		return (IsEdgeExprOf)getFirstEdgeOfClass(IsEdgeExprOf.class);
	}

	public IsEdgeExprOf getFirstIsEdgeExprOf(EdgeDirection orientation) {
		return (IsEdgeExprOf)getFirstEdgeOfClass(IsEdgeExprOf.class, orientation);
	}

	public IsEdgeExprOf getFirstIsEdgeExprOf(boolean noSubClasses) {
		return (IsEdgeExprOf)getFirstEdgeOfClass(IsEdgeExprOf.class, noSubClasses);
	}

	public IsEdgeExprOf getFirstIsEdgeExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsEdgeExprOf)getFirstEdgeOfClass(IsEdgeExprOf.class, orientation, noSubClasses);
	}

	public IsTableHeaderOf getFirstIsTableHeaderOf() {
		return (IsTableHeaderOf)getFirstEdgeOfClass(IsTableHeaderOf.class);
	}

	public IsTableHeaderOf getFirstIsTableHeaderOf(EdgeDirection orientation) {
		return (IsTableHeaderOf)getFirstEdgeOfClass(IsTableHeaderOf.class, orientation);
	}

	public IsTableHeaderOf getFirstIsTableHeaderOf(boolean noSubClasses) {
		return (IsTableHeaderOf)getFirstEdgeOfClass(IsTableHeaderOf.class, noSubClasses);
	}

	public IsTableHeaderOf getFirstIsTableHeaderOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsTableHeaderOf)getFirstEdgeOfClass(IsTableHeaderOf.class, orientation, noSubClasses);
	}

	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOf() {
		return (IsColumnHeaderExprOf)getFirstEdgeOfClass(IsColumnHeaderExprOf.class);
	}

	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOf(EdgeDirection orientation) {
		return (IsColumnHeaderExprOf)getFirstEdgeOfClass(IsColumnHeaderExprOf.class, orientation);
	}

	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOf(boolean noSubClasses) {
		return (IsColumnHeaderExprOf)getFirstEdgeOfClass(IsColumnHeaderExprOf.class, noSubClasses);
	}

	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsColumnHeaderExprOf)getFirstEdgeOfClass(IsColumnHeaderExprOf.class, orientation, noSubClasses);
	}

	public IsPartOf getFirstIsPartOf() {
		return (IsPartOf)getFirstEdgeOfClass(IsPartOf.class);
	}

	public IsPartOf getFirstIsPartOf(EdgeDirection orientation) {
		return (IsPartOf)getFirstEdgeOfClass(IsPartOf.class, orientation);
	}

	public IsPartOf getFirstIsPartOf(boolean noSubClasses) {
		return (IsPartOf)getFirstEdgeOfClass(IsPartOf.class, noSubClasses);
	}

	public IsPartOf getFirstIsPartOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsPartOf)getFirstEdgeOfClass(IsPartOf.class, orientation, noSubClasses);
	}

	public IsRestrictionOf getFirstIsRestrictionOf() {
		return (IsRestrictionOf)getFirstEdgeOfClass(IsRestrictionOf.class);
	}

	public IsRestrictionOf getFirstIsRestrictionOf(EdgeDirection orientation) {
		return (IsRestrictionOf)getFirstEdgeOfClass(IsRestrictionOf.class, orientation);
	}

	public IsRestrictionOf getFirstIsRestrictionOf(boolean noSubClasses) {
		return (IsRestrictionOf)getFirstEdgeOfClass(IsRestrictionOf.class, noSubClasses);
	}

	public IsRestrictionOf getFirstIsRestrictionOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsRestrictionOf)getFirstEdgeOfClass(IsRestrictionOf.class, orientation, noSubClasses);
	}

	public IsBoundExprOf getFirstIsBoundExprOf() {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class);
	}

	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation) {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class, orientation);
	}

	public IsTrueExprOf getFirstIsTrueExprOf() {
		return (IsTrueExprOf)getFirstEdgeOfClass(IsTrueExprOf.class);
	}

	public IsTrueExprOf getFirstIsTrueExprOf(EdgeDirection orientation) {
		return (IsTrueExprOf)getFirstEdgeOfClass(IsTrueExprOf.class, orientation);
	}

	public IsTrueExprOf getFirstIsTrueExprOf(boolean noSubClasses) {
		return (IsTrueExprOf)getFirstEdgeOfClass(IsTrueExprOf.class, noSubClasses);
	}

	public IsTrueExprOf getFirstIsTrueExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsTrueExprOf)getFirstEdgeOfClass(IsTrueExprOf.class, orientation, noSubClasses);
	}

	public IsIntermediateVertexOf getFirstIsIntermediateVertexOf() {
		return (IsIntermediateVertexOf)getFirstEdgeOfClass(IsIntermediateVertexOf.class);
	}

	public IsIntermediateVertexOf getFirstIsIntermediateVertexOf(EdgeDirection orientation) {
		return (IsIntermediateVertexOf)getFirstEdgeOfClass(IsIntermediateVertexOf.class, orientation);
	}

	public IsIntermediateVertexOf getFirstIsIntermediateVertexOf(boolean noSubClasses) {
		return (IsIntermediateVertexOf)getFirstEdgeOfClass(IsIntermediateVertexOf.class, noSubClasses);
	}

	public IsIntermediateVertexOf getFirstIsIntermediateVertexOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsIntermediateVertexOf)getFirstEdgeOfClass(IsIntermediateVertexOf.class, orientation, noSubClasses);
	}

	public IsGoalRestrOf getFirstIsGoalRestrOf() {
		return (IsGoalRestrOf)getFirstEdgeOfClass(IsGoalRestrOf.class);
	}

	public IsGoalRestrOf getFirstIsGoalRestrOf(EdgeDirection orientation) {
		return (IsGoalRestrOf)getFirstEdgeOfClass(IsGoalRestrOf.class, orientation);
	}

	public IsGoalRestrOf getFirstIsGoalRestrOf(boolean noSubClasses) {
		return (IsGoalRestrOf)getFirstEdgeOfClass(IsGoalRestrOf.class, noSubClasses);
	}

	public IsGoalRestrOf getFirstIsGoalRestrOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsGoalRestrOf)getFirstEdgeOfClass(IsGoalRestrOf.class, orientation, noSubClasses);
	}

	public IsNullExprOf getFirstIsNullExprOf() {
		return (IsNullExprOf)getFirstEdgeOfClass(IsNullExprOf.class);
	}

	public IsNullExprOf getFirstIsNullExprOf(EdgeDirection orientation) {
		return (IsNullExprOf)getFirstEdgeOfClass(IsNullExprOf.class, orientation);
	}

	public IsNullExprOf getFirstIsNullExprOf(boolean noSubClasses) {
		return (IsNullExprOf)getFirstEdgeOfClass(IsNullExprOf.class, noSubClasses);
	}

	public IsNullExprOf getFirstIsNullExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsNullExprOf)getFirstEdgeOfClass(IsNullExprOf.class, orientation, noSubClasses);
	}

	public IsFalseExprOf getFirstIsFalseExprOf() {
		return (IsFalseExprOf)getFirstEdgeOfClass(IsFalseExprOf.class);
	}

	public IsFalseExprOf getFirstIsFalseExprOf(EdgeDirection orientation) {
		return (IsFalseExprOf)getFirstEdgeOfClass(IsFalseExprOf.class, orientation);
	}

	public IsFalseExprOf getFirstIsFalseExprOf(boolean noSubClasses) {
		return (IsFalseExprOf)getFirstEdgeOfClass(IsFalseExprOf.class, noSubClasses);
	}

	public IsFalseExprOf getFirstIsFalseExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsFalseExprOf)getFirstEdgeOfClass(IsFalseExprOf.class, orientation, noSubClasses);
	}

	public IsStartRestrOf getFirstIsStartRestrOf() {
		return (IsStartRestrOf)getFirstEdgeOfClass(IsStartRestrOf.class);
	}

	public IsStartRestrOf getFirstIsStartRestrOf(EdgeDirection orientation) {
		return (IsStartRestrOf)getFirstEdgeOfClass(IsStartRestrOf.class, orientation);
	}

	public IsStartRestrOf getFirstIsStartRestrOf(boolean noSubClasses) {
		return (IsStartRestrOf)getFirstEdgeOfClass(IsStartRestrOf.class, noSubClasses);
	}

	public IsStartRestrOf getFirstIsStartRestrOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsStartRestrOf)getFirstEdgeOfClass(IsStartRestrOf.class, orientation, noSubClasses);
	}

	public IsTargetExprOf getFirstIsTargetExprOf() {
		return (IsTargetExprOf)getFirstEdgeOfClass(IsTargetExprOf.class);
	}

	public IsTargetExprOf getFirstIsTargetExprOf(EdgeDirection orientation) {
		return (IsTargetExprOf)getFirstEdgeOfClass(IsTargetExprOf.class, orientation);
	}

	public IsTargetExprOf getFirstIsTargetExprOf(boolean noSubClasses) {
		return (IsTargetExprOf)getFirstEdgeOfClass(IsTargetExprOf.class, noSubClasses);
	}

	public IsTargetExprOf getFirstIsTargetExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsTargetExprOf)getFirstEdgeOfClass(IsTargetExprOf.class, orientation, noSubClasses);
	}

	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration() {
		return (IsTypeExprOfDeclaration)getFirstEdgeOfClass(IsTypeExprOfDeclaration.class);
	}

	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration(EdgeDirection orientation) {
		return (IsTypeExprOfDeclaration)getFirstEdgeOfClass(IsTypeExprOfDeclaration.class, orientation);
	}

	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration(boolean noSubClasses) {
		return (IsTypeExprOfDeclaration)getFirstEdgeOfClass(IsTypeExprOfDeclaration.class, noSubClasses);
	}

	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration(EdgeDirection orientation, boolean noSubClasses) {
		return (IsTypeExprOfDeclaration)getFirstEdgeOfClass(IsTypeExprOfDeclaration.class, orientation, noSubClasses);
	}

	public IsExprOf getFirstIsExprOf() {
		return (IsExprOf)getFirstEdgeOfClass(IsExprOf.class);
	}

	public IsExprOf getFirstIsExprOf(EdgeDirection orientation) {
		return (IsExprOf)getFirstEdgeOfClass(IsExprOf.class, orientation);
	}

	public IsExprOf getFirstIsExprOf(boolean noSubClasses) {
		return (IsExprOf)getFirstEdgeOfClass(IsExprOf.class, noSubClasses);
	}

	public IsExprOf getFirstIsExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsExprOf)getFirstEdgeOfClass(IsExprOf.class, orientation, noSubClasses);
	}

	public IsSubgraphOf getFirstIsSubgraphOf() {
		return (IsSubgraphOf)getFirstEdgeOfClass(IsSubgraphOf.class);
	}

	public IsSubgraphOf getFirstIsSubgraphOf(EdgeDirection orientation) {
		return (IsSubgraphOf)getFirstEdgeOfClass(IsSubgraphOf.class, orientation);
	}

	public IsSubgraphOf getFirstIsSubgraphOf(boolean noSubClasses) {
		return (IsSubgraphOf)getFirstEdgeOfClass(IsSubgraphOf.class, noSubClasses);
	}

	public IsSubgraphOf getFirstIsSubgraphOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsSubgraphOf)getFirstEdgeOfClass(IsSubgraphOf.class, orientation, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeRestrOf, ? extends Vertex>> getIsTypeRestrOfIncidences() {
		return new IncidenceIterable<IsTypeRestrOf, Vertex>(this, IsTypeRestrOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeRestrOf, ? extends Vertex>> getIsTypeRestrOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTypeRestrOf, Vertex>(this, IsTypeRestrOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeRestrOf, ? extends Vertex>> getIsTypeRestrOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTypeRestrOf, Vertex>(this, IsTypeRestrOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeRestrOf, ? extends Vertex>> getIsTypeRestrOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTypeRestrOf, Vertex>(this, IsTypeRestrOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsConditionOf, ? extends Vertex>> getIsConditionOfIncidences() {
		return new IncidenceIterable<IsConditionOf, Vertex>(this, IsConditionOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsConditionOf, ? extends Vertex>> getIsConditionOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsConditionOf, Vertex>(this, IsConditionOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsConditionOf, ? extends Vertex>> getIsConditionOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsConditionOf, Vertex>(this, IsConditionOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsConditionOf, ? extends Vertex>> getIsConditionOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsConditionOf, Vertex>(this, IsConditionOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences() {
		return new IncidenceIterable<IsConstraintOf, Vertex>(this, IsConstraintOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsConstraintOf, Vertex>(this, IsConstraintOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsConstraintOf, Vertex>(this, IsConstraintOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsConstraintOf, Vertex>(this, IsConstraintOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsRestrictedExprOf, ? extends Vertex>> getIsRestrictedExprOfIncidences() {
		return new IncidenceIterable<IsRestrictedExprOf, Vertex>(this, IsRestrictedExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRestrictedExprOf, ? extends Vertex>> getIsRestrictedExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsRestrictedExprOf, Vertex>(this, IsRestrictedExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsRestrictedExprOf, ? extends Vertex>> getIsRestrictedExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsRestrictedExprOf, Vertex>(this, IsRestrictedExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRestrictedExprOf, ? extends Vertex>> getIsRestrictedExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsRestrictedExprOf, Vertex>(this, IsRestrictedExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOfDefinition, ? extends Vertex>> getIsBoundExprOfDefinitionIncidences() {
		return new IncidenceIterable<IsBoundExprOfDefinition, Vertex>(this, IsBoundExprOfDefinition.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfDefinition, ? extends Vertex>> getIsBoundExprOfDefinitionIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsBoundExprOfDefinition, Vertex>(this, IsBoundExprOfDefinition.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOfDefinition, ? extends Vertex>> getIsBoundExprOfDefinitionIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsBoundExprOfDefinition, Vertex>(this, IsBoundExprOfDefinition.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfDefinition, ? extends Vertex>> getIsBoundExprOfDefinitionIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsBoundExprOfDefinition, Vertex>(this, IsBoundExprOfDefinition.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences() {
		return new IncidenceIterable<IsRecordExprOf, Vertex>(this, IsRecordExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsRecordExprOf, Vertex>(this, IsRecordExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsRecordExprOf, Vertex>(this, IsRecordExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsRecordExprOf, Vertex>(this, IsRecordExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsPathOf, ? extends Vertex>> getIsPathOfIncidences() {
		return new IncidenceIterable<IsPathOf, Vertex>(this, IsPathOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsPathOf, ? extends Vertex>> getIsPathOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsPathOf, Vertex>(this, IsPathOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsPathOf, ? extends Vertex>> getIsPathOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsPathOf, Vertex>(this, IsPathOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsPathOf, ? extends Vertex>> getIsPathOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsPathOf, Vertex>(this, IsPathOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences() {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(boolean noSubClasses) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences() {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences() {
		return new IncidenceIterable<IsQueryExprOf, Vertex>(this, IsQueryExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsQueryExprOf, Vertex>(this, IsQueryExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsQueryExprOf, Vertex>(this, IsQueryExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsQueryExprOf, Vertex>(this, IsQueryExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsStartExprOf, ? extends Vertex>> getIsStartExprOfIncidences() {
		return new IncidenceIterable<IsStartExprOf, Vertex>(this, IsStartExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsStartExprOf, ? extends Vertex>> getIsStartExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsStartExprOf, Vertex>(this, IsStartExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsStartExprOf, ? extends Vertex>> getIsStartExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsStartExprOf, Vertex>(this, IsStartExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsStartExprOf, ? extends Vertex>> getIsStartExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsStartExprOf, Vertex>(this, IsStartExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences() {
		return new IncidenceIterable<IsEdgeOrVertexExprOf, Vertex>(this, IsEdgeOrVertexExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsEdgeOrVertexExprOf, Vertex>(this, IsEdgeOrVertexExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsEdgeOrVertexExprOf, Vertex>(this, IsEdgeOrVertexExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsEdgeOrVertexExprOf, Vertex>(this, IsEdgeOrVertexExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOfQuantifier, ? extends Vertex>> getIsBoundExprOfQuantifierIncidences() {
		return new IncidenceIterable<IsBoundExprOfQuantifier, Vertex>(this, IsBoundExprOfQuantifier.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfQuantifier, ? extends Vertex>> getIsBoundExprOfQuantifierIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsBoundExprOfQuantifier, Vertex>(this, IsBoundExprOfQuantifier.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOfQuantifier, ? extends Vertex>> getIsBoundExprOfQuantifierIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsBoundExprOfQuantifier, Vertex>(this, IsBoundExprOfQuantifier.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfQuantifier, ? extends Vertex>> getIsBoundExprOfQuantifierIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsBoundExprOfQuantifier, Vertex>(this, IsBoundExprOfQuantifier.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsRowHeaderExprOf, ? extends Vertex>> getIsRowHeaderExprOfIncidences() {
		return new IncidenceIterable<IsRowHeaderExprOf, Vertex>(this, IsRowHeaderExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRowHeaderExprOf, ? extends Vertex>> getIsRowHeaderExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsRowHeaderExprOf, Vertex>(this, IsRowHeaderExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsRowHeaderExprOf, ? extends Vertex>> getIsRowHeaderExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsRowHeaderExprOf, Vertex>(this, IsRowHeaderExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRowHeaderExprOf, ? extends Vertex>> getIsRowHeaderExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsRowHeaderExprOf, Vertex>(this, IsRowHeaderExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsRootOf, ? extends Vertex>> getIsRootOfIncidences() {
		return new IncidenceIterable<IsRootOf, Vertex>(this, IsRootOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRootOf, ? extends Vertex>> getIsRootOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsRootOf, Vertex>(this, IsRootOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsRootOf, ? extends Vertex>> getIsRootOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsRootOf, Vertex>(this, IsRootOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRootOf, ? extends Vertex>> getIsRootOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsRootOf, Vertex>(this, IsRootOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOfFunction, ? extends Vertex>> getIsTypeExprOfFunctionIncidences() {
		return new IncidenceIterable<IsTypeExprOfFunction, Vertex>(this, IsTypeExprOfFunction.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfFunction, ? extends Vertex>> getIsTypeExprOfFunctionIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTypeExprOfFunction, Vertex>(this, IsTypeExprOfFunction.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOfFunction, ? extends Vertex>> getIsTypeExprOfFunctionIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTypeExprOfFunction, Vertex>(this, IsTypeExprOfFunction.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfFunction, ? extends Vertex>> getIsTypeExprOfFunctionIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTypeExprOfFunction, Vertex>(this, IsTypeExprOfFunction.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsArgumentOf, ? extends Vertex>> getIsArgumentOfIncidences() {
		return new IncidenceIterable<IsArgumentOf, Vertex>(this, IsArgumentOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsArgumentOf, ? extends Vertex>> getIsArgumentOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsArgumentOf, Vertex>(this, IsArgumentOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsArgumentOf, ? extends Vertex>> getIsArgumentOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsArgumentOf, Vertex>(this, IsArgumentOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsArgumentOf, ? extends Vertex>> getIsArgumentOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsArgumentOf, Vertex>(this, IsArgumentOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsCompResultDefOf, ? extends Vertex>> getIsCompResultDefOfIncidences() {
		return new IncidenceIterable<IsCompResultDefOf, Vertex>(this, IsCompResultDefOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsCompResultDefOf, ? extends Vertex>> getIsCompResultDefOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsCompResultDefOf, Vertex>(this, IsCompResultDefOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsCompResultDefOf, ? extends Vertex>> getIsCompResultDefOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsCompResultDefOf, Vertex>(this, IsCompResultDefOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsCompResultDefOf, ? extends Vertex>> getIsCompResultDefOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsCompResultDefOf, Vertex>(this, IsCompResultDefOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsLastValueOf, ? extends Vertex>> getIsLastValueOfIncidences() {
		return new IncidenceIterable<IsLastValueOf, Vertex>(this, IsLastValueOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsLastValueOf, ? extends Vertex>> getIsLastValueOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsLastValueOf, Vertex>(this, IsLastValueOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsLastValueOf, ? extends Vertex>> getIsLastValueOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsLastValueOf, Vertex>(this, IsLastValueOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsLastValueOf, ? extends Vertex>> getIsLastValueOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsLastValueOf, Vertex>(this, IsLastValueOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsFirstValueOf, ? extends Vertex>> getIsFirstValueOfIncidences() {
		return new IncidenceIterable<IsFirstValueOf, Vertex>(this, IsFirstValueOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsFirstValueOf, ? extends Vertex>> getIsFirstValueOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsFirstValueOf, Vertex>(this, IsFirstValueOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsFirstValueOf, ? extends Vertex>> getIsFirstValueOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsFirstValueOf, Vertex>(this, IsFirstValueOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsFirstValueOf, ? extends Vertex>> getIsFirstValueOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsFirstValueOf, Vertex>(this, IsFirstValueOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsEdgeExprOf, ? extends Vertex>> getIsEdgeExprOfIncidences() {
		return new IncidenceIterable<IsEdgeExprOf, Vertex>(this, IsEdgeExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsEdgeExprOf, ? extends Vertex>> getIsEdgeExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsEdgeExprOf, Vertex>(this, IsEdgeExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsEdgeExprOf, ? extends Vertex>> getIsEdgeExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsEdgeExprOf, Vertex>(this, IsEdgeExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsEdgeExprOf, ? extends Vertex>> getIsEdgeExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsEdgeExprOf, Vertex>(this, IsEdgeExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsTableHeaderOf, ? extends Vertex>> getIsTableHeaderOfIncidences() {
		return new IncidenceIterable<IsTableHeaderOf, Vertex>(this, IsTableHeaderOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTableHeaderOf, ? extends Vertex>> getIsTableHeaderOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTableHeaderOf, Vertex>(this, IsTableHeaderOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTableHeaderOf, ? extends Vertex>> getIsTableHeaderOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTableHeaderOf, Vertex>(this, IsTableHeaderOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTableHeaderOf, ? extends Vertex>> getIsTableHeaderOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTableHeaderOf, Vertex>(this, IsTableHeaderOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsColumnHeaderExprOf, ? extends Vertex>> getIsColumnHeaderExprOfIncidences() {
		return new IncidenceIterable<IsColumnHeaderExprOf, Vertex>(this, IsColumnHeaderExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsColumnHeaderExprOf, ? extends Vertex>> getIsColumnHeaderExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsColumnHeaderExprOf, Vertex>(this, IsColumnHeaderExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsColumnHeaderExprOf, ? extends Vertex>> getIsColumnHeaderExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsColumnHeaderExprOf, Vertex>(this, IsColumnHeaderExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsColumnHeaderExprOf, ? extends Vertex>> getIsColumnHeaderExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsColumnHeaderExprOf, Vertex>(this, IsColumnHeaderExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsPartOf, ? extends Vertex>> getIsPartOfIncidences() {
		return new IncidenceIterable<IsPartOf, Vertex>(this, IsPartOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsPartOf, ? extends Vertex>> getIsPartOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsPartOf, Vertex>(this, IsPartOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsPartOf, ? extends Vertex>> getIsPartOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsPartOf, Vertex>(this, IsPartOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsPartOf, ? extends Vertex>> getIsPartOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsPartOf, Vertex>(this, IsPartOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsRestrictionOf, ? extends Vertex>> getIsRestrictionOfIncidences() {
		return new IncidenceIterable<IsRestrictionOf, Vertex>(this, IsRestrictionOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRestrictionOf, ? extends Vertex>> getIsRestrictionOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsRestrictionOf, Vertex>(this, IsRestrictionOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsRestrictionOf, ? extends Vertex>> getIsRestrictionOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsRestrictionOf, Vertex>(this, IsRestrictionOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsRestrictionOf, ? extends Vertex>> getIsRestrictionOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsRestrictionOf, Vertex>(this, IsRestrictionOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences() {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsTrueExprOf, ? extends Vertex>> getIsTrueExprOfIncidences() {
		return new IncidenceIterable<IsTrueExprOf, Vertex>(this, IsTrueExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTrueExprOf, ? extends Vertex>> getIsTrueExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTrueExprOf, Vertex>(this, IsTrueExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTrueExprOf, ? extends Vertex>> getIsTrueExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTrueExprOf, Vertex>(this, IsTrueExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTrueExprOf, ? extends Vertex>> getIsTrueExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTrueExprOf, Vertex>(this, IsTrueExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsIntermediateVertexOf, ? extends Vertex>> getIsIntermediateVertexOfIncidences() {
		return new IncidenceIterable<IsIntermediateVertexOf, Vertex>(this, IsIntermediateVertexOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsIntermediateVertexOf, ? extends Vertex>> getIsIntermediateVertexOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsIntermediateVertexOf, Vertex>(this, IsIntermediateVertexOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsIntermediateVertexOf, ? extends Vertex>> getIsIntermediateVertexOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsIntermediateVertexOf, Vertex>(this, IsIntermediateVertexOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsIntermediateVertexOf, ? extends Vertex>> getIsIntermediateVertexOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsIntermediateVertexOf, Vertex>(this, IsIntermediateVertexOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsGoalRestrOf, ? extends Vertex>> getIsGoalRestrOfIncidences() {
		return new IncidenceIterable<IsGoalRestrOf, Vertex>(this, IsGoalRestrOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsGoalRestrOf, ? extends Vertex>> getIsGoalRestrOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsGoalRestrOf, Vertex>(this, IsGoalRestrOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsGoalRestrOf, ? extends Vertex>> getIsGoalRestrOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsGoalRestrOf, Vertex>(this, IsGoalRestrOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsGoalRestrOf, ? extends Vertex>> getIsGoalRestrOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsGoalRestrOf, Vertex>(this, IsGoalRestrOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsNullExprOf, ? extends Vertex>> getIsNullExprOfIncidences() {
		return new IncidenceIterable<IsNullExprOf, Vertex>(this, IsNullExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsNullExprOf, ? extends Vertex>> getIsNullExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsNullExprOf, Vertex>(this, IsNullExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsNullExprOf, ? extends Vertex>> getIsNullExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsNullExprOf, Vertex>(this, IsNullExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsNullExprOf, ? extends Vertex>> getIsNullExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsNullExprOf, Vertex>(this, IsNullExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsFalseExprOf, ? extends Vertex>> getIsFalseExprOfIncidences() {
		return new IncidenceIterable<IsFalseExprOf, Vertex>(this, IsFalseExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsFalseExprOf, ? extends Vertex>> getIsFalseExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsFalseExprOf, Vertex>(this, IsFalseExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsFalseExprOf, ? extends Vertex>> getIsFalseExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsFalseExprOf, Vertex>(this, IsFalseExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsFalseExprOf, ? extends Vertex>> getIsFalseExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsFalseExprOf, Vertex>(this, IsFalseExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsStartRestrOf, ? extends Vertex>> getIsStartRestrOfIncidences() {
		return new IncidenceIterable<IsStartRestrOf, Vertex>(this, IsStartRestrOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsStartRestrOf, ? extends Vertex>> getIsStartRestrOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsStartRestrOf, Vertex>(this, IsStartRestrOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsStartRestrOf, ? extends Vertex>> getIsStartRestrOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsStartRestrOf, Vertex>(this, IsStartRestrOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsStartRestrOf, ? extends Vertex>> getIsStartRestrOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsStartRestrOf, Vertex>(this, IsStartRestrOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsTargetExprOf, ? extends Vertex>> getIsTargetExprOfIncidences() {
		return new IncidenceIterable<IsTargetExprOf, Vertex>(this, IsTargetExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTargetExprOf, ? extends Vertex>> getIsTargetExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTargetExprOf, Vertex>(this, IsTargetExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTargetExprOf, ? extends Vertex>> getIsTargetExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTargetExprOf, Vertex>(this, IsTargetExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTargetExprOf, ? extends Vertex>> getIsTargetExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTargetExprOf, Vertex>(this, IsTargetExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences() {
		return new IncidenceIterable<IsTypeExprOfDeclaration, Vertex>(this, IsTypeExprOfDeclaration.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTypeExprOfDeclaration, Vertex>(this, IsTypeExprOfDeclaration.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTypeExprOfDeclaration, Vertex>(this, IsTypeExprOfDeclaration.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTypeExprOfDeclaration, Vertex>(this, IsTypeExprOfDeclaration.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences() {
		return new IncidenceIterable<IsExprOf, Vertex>(this, IsExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsExprOf, Vertex>(this, IsExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsExprOf, Vertex>(this, IsExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsExprOf, Vertex>(this, IsExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences() {
		return new IncidenceIterable<IsSubgraphOf, Vertex>(this, IsSubgraphOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsSubgraphOf, Vertex>(this, IsSubgraphOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsSubgraphOf, Vertex>(this, IsSubgraphOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsSubgraphOf, Vertex>(this, IsSubgraphOf.class, direction);
	}

}
