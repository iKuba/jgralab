/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema.impl;

import de.uni_koblenz.jgralab.impl.array.VertexImpl;
import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.VertexClass;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.Definition;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Aggregation;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsDefinitionOf;
import de.uni_koblenz.jgralab.greql2.schema.IsExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsVarOf;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class DefinitionImpl extends VertexImpl implements Definition, Greql2Vertex, Vertex {

	public DefinitionImpl(int id, Graph g) {
		super(id, g, (VertexClass)g.getGraphClass().getGraphElementClass("Definition"));
	}

	public Class<? extends AttributedElement> getM1Class() {
		return Definition.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		throw new NoSuchFieldException("Definition doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		throw new NoSuchFieldException("Definition doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	/* add all valid from edges */
	private static Set<Class<? extends Edge>> validFromEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidAlpha()
	 */
	public boolean isValidAlpha(Edge edge) {
		return validFromEdges.contains(edge.getClass());
	}
	
	{

		validFromEdges.add(IsDefinitionOfImpl.class);

	}
	
	/* add all valid to edges */
	private static Set<Class<? extends Edge>> validToEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidOemga()
	 */
	public boolean isValidOmega(Edge edge) {
		return validToEdges.contains(edge.getClass());
	}
	
	{

		validToEdges.add(IsVarOfImpl.class);

		validToEdges.add(IsExprOfImpl.class);

	}

	public Definition getNextDefinition() {
		return (Definition)getNextVertexOfClass(Definition.class);
	}

	public Definition getNextDefinition(boolean noSubClasses) {
		return (Definition)getNextVertexOfClass(Definition.class, noSubClasses);
	}

	public Greql2Vertex getNextGreql2Vertex() {
		return (Greql2Vertex)getNextVertexOfClass(Greql2Vertex.class);
	}

	public IsBoundExprOf getFirstIsBoundExprOf() {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class);
	}

	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation) {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class, orientation);
	}

	public IsDefinitionOf getFirstIsDefinitionOf() {
		return (IsDefinitionOf)getFirstEdgeOfClass(IsDefinitionOf.class);
	}

	public IsDefinitionOf getFirstIsDefinitionOf(EdgeDirection orientation) {
		return (IsDefinitionOf)getFirstEdgeOfClass(IsDefinitionOf.class, orientation);
	}

	public IsDefinitionOf getFirstIsDefinitionOf(boolean noSubClasses) {
		return (IsDefinitionOf)getFirstEdgeOfClass(IsDefinitionOf.class, noSubClasses);
	}

	public IsDefinitionOf getFirstIsDefinitionOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsDefinitionOf)getFirstEdgeOfClass(IsDefinitionOf.class, orientation, noSubClasses);
	}

	public Greql2Aggregation getFirstGreql2Aggregation() {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class);
	}

	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation) {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class, orientation);
	}

	public IsTypeExprOf getFirstIsTypeExprOf() {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class);
	}

	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation) {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class, orientation);
	}

	public IsVarOf getFirstIsVarOf() {
		return (IsVarOf)getFirstEdgeOfClass(IsVarOf.class);
	}

	public IsVarOf getFirstIsVarOf(EdgeDirection orientation) {
		return (IsVarOf)getFirstEdgeOfClass(IsVarOf.class, orientation);
	}

	public IsVarOf getFirstIsVarOf(boolean noSubClasses) {
		return (IsVarOf)getFirstEdgeOfClass(IsVarOf.class, noSubClasses);
	}

	public IsVarOf getFirstIsVarOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsVarOf)getFirstEdgeOfClass(IsVarOf.class, orientation, noSubClasses);
	}

	public IsExprOf getFirstIsExprOf() {
		return (IsExprOf)getFirstEdgeOfClass(IsExprOf.class);
	}

	public IsExprOf getFirstIsExprOf(EdgeDirection orientation) {
		return (IsExprOf)getFirstEdgeOfClass(IsExprOf.class, orientation);
	}

	public IsExprOf getFirstIsExprOf(boolean noSubClasses) {
		return (IsExprOf)getFirstEdgeOfClass(IsExprOf.class, noSubClasses);
	}

	public IsExprOf getFirstIsExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsExprOf)getFirstEdgeOfClass(IsExprOf.class, orientation, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences() {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsDefinitionOf, ? extends Vertex>> getIsDefinitionOfIncidences() {
		return new IncidenceIterable<IsDefinitionOf, Vertex>(this, IsDefinitionOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsDefinitionOf, ? extends Vertex>> getIsDefinitionOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsDefinitionOf, Vertex>(this, IsDefinitionOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsDefinitionOf, ? extends Vertex>> getIsDefinitionOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsDefinitionOf, Vertex>(this, IsDefinitionOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsDefinitionOf, ? extends Vertex>> getIsDefinitionOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsDefinitionOf, Vertex>(this, IsDefinitionOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences() {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(boolean noSubClasses) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences() {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsVarOf, ? extends Vertex>> getIsVarOfIncidences() {
		return new IncidenceIterable<IsVarOf, Vertex>(this, IsVarOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsVarOf, ? extends Vertex>> getIsVarOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsVarOf, Vertex>(this, IsVarOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsVarOf, ? extends Vertex>> getIsVarOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsVarOf, Vertex>(this, IsVarOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsVarOf, ? extends Vertex>> getIsVarOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsVarOf, Vertex>(this, IsVarOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences() {
		return new IncidenceIterable<IsExprOf, Vertex>(this, IsExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsExprOf, Vertex>(this, IsExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsExprOf, Vertex>(this, IsExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsExprOf, Vertex>(this, IsExprOf.class, direction);
	}

}
