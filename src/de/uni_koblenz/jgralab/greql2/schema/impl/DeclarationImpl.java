/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema.impl;

import de.uni_koblenz.jgralab.impl.array.VertexImpl;
import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.VertexClass;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.Declaration;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Aggregation;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsCompDeclOf;
import de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf;
import de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf;
import de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf;
import de.uni_koblenz.jgralab.greql2.schema.IsSubgraphOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class DeclarationImpl extends VertexImpl implements Declaration, Greql2Vertex, Vertex {

	public DeclarationImpl(int id, Graph g) {
		super(id, g, (VertexClass)g.getGraphClass().getGraphElementClass("Declaration"));
	}

	public Class<? extends AttributedElement> getM1Class() {
		return Declaration.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		throw new NoSuchFieldException("Declaration doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		throw new NoSuchFieldException("Declaration doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	/* add all valid from edges */
	private static Set<Class<? extends Edge>> validFromEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidAlpha()
	 */
	public boolean isValidAlpha(Edge edge) {
		return validFromEdges.contains(edge.getClass());
	}
	
	{

		validFromEdges.add(IsQuantifiedDeclOfImpl.class);

		validFromEdges.add(IsCompDeclOfImpl.class);

	}
	
	/* add all valid to edges */
	private static Set<Class<? extends Edge>> validToEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidOemga()
	 */
	public boolean isValidOmega(Edge edge) {
		return validToEdges.contains(edge.getClass());
	}
	
	{

		validToEdges.add(IsConstraintOfImpl.class);

		validToEdges.add(IsSimpleDeclOfImpl.class);

		validToEdges.add(IsSubgraphOfImpl.class);

	}

	public Declaration getNextDeclaration() {
		return (Declaration)getNextVertexOfClass(Declaration.class);
	}

	public Declaration getNextDeclaration(boolean noSubClasses) {
		return (Declaration)getNextVertexOfClass(Declaration.class, noSubClasses);
	}

	public Greql2Vertex getNextGreql2Vertex() {
		return (Greql2Vertex)getNextVertexOfClass(Greql2Vertex.class);
	}

	public IsBoundExprOf getFirstIsBoundExprOf() {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class);
	}

	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation) {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class, orientation);
	}

	public IsConstraintOf getFirstIsConstraintOf() {
		return (IsConstraintOf)getFirstEdgeOfClass(IsConstraintOf.class);
	}

	public IsConstraintOf getFirstIsConstraintOf(EdgeDirection orientation) {
		return (IsConstraintOf)getFirstEdgeOfClass(IsConstraintOf.class, orientation);
	}

	public IsConstraintOf getFirstIsConstraintOf(boolean noSubClasses) {
		return (IsConstraintOf)getFirstEdgeOfClass(IsConstraintOf.class, noSubClasses);
	}

	public IsConstraintOf getFirstIsConstraintOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsConstraintOf)getFirstEdgeOfClass(IsConstraintOf.class, orientation, noSubClasses);
	}

	public Greql2Aggregation getFirstGreql2Aggregation() {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class);
	}

	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation) {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class, orientation);
	}

	public IsTypeExprOf getFirstIsTypeExprOf() {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class);
	}

	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation) {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class, orientation);
	}

	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOf() {
		return (IsQuantifiedDeclOf)getFirstEdgeOfClass(IsQuantifiedDeclOf.class);
	}

	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOf(EdgeDirection orientation) {
		return (IsQuantifiedDeclOf)getFirstEdgeOfClass(IsQuantifiedDeclOf.class, orientation);
	}

	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOf(boolean noSubClasses) {
		return (IsQuantifiedDeclOf)getFirstEdgeOfClass(IsQuantifiedDeclOf.class, noSubClasses);
	}

	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsQuantifiedDeclOf)getFirstEdgeOfClass(IsQuantifiedDeclOf.class, orientation, noSubClasses);
	}

	public IsCompDeclOf getFirstIsCompDeclOf() {
		return (IsCompDeclOf)getFirstEdgeOfClass(IsCompDeclOf.class);
	}

	public IsCompDeclOf getFirstIsCompDeclOf(EdgeDirection orientation) {
		return (IsCompDeclOf)getFirstEdgeOfClass(IsCompDeclOf.class, orientation);
	}

	public IsCompDeclOf getFirstIsCompDeclOf(boolean noSubClasses) {
		return (IsCompDeclOf)getFirstEdgeOfClass(IsCompDeclOf.class, noSubClasses);
	}

	public IsCompDeclOf getFirstIsCompDeclOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsCompDeclOf)getFirstEdgeOfClass(IsCompDeclOf.class, orientation, noSubClasses);
	}

	public IsSimpleDeclOf getFirstIsSimpleDeclOf() {
		return (IsSimpleDeclOf)getFirstEdgeOfClass(IsSimpleDeclOf.class);
	}

	public IsSimpleDeclOf getFirstIsSimpleDeclOf(EdgeDirection orientation) {
		return (IsSimpleDeclOf)getFirstEdgeOfClass(IsSimpleDeclOf.class, orientation);
	}

	public IsSimpleDeclOf getFirstIsSimpleDeclOf(boolean noSubClasses) {
		return (IsSimpleDeclOf)getFirstEdgeOfClass(IsSimpleDeclOf.class, noSubClasses);
	}

	public IsSimpleDeclOf getFirstIsSimpleDeclOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsSimpleDeclOf)getFirstEdgeOfClass(IsSimpleDeclOf.class, orientation, noSubClasses);
	}

	public IsSubgraphOf getFirstIsSubgraphOf() {
		return (IsSubgraphOf)getFirstEdgeOfClass(IsSubgraphOf.class);
	}

	public IsSubgraphOf getFirstIsSubgraphOf(EdgeDirection orientation) {
		return (IsSubgraphOf)getFirstEdgeOfClass(IsSubgraphOf.class, orientation);
	}

	public IsSubgraphOf getFirstIsSubgraphOf(boolean noSubClasses) {
		return (IsSubgraphOf)getFirstEdgeOfClass(IsSubgraphOf.class, noSubClasses);
	}

	public IsSubgraphOf getFirstIsSubgraphOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsSubgraphOf)getFirstEdgeOfClass(IsSubgraphOf.class, orientation, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences() {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences() {
		return new IncidenceIterable<IsConstraintOf, Vertex>(this, IsConstraintOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsConstraintOf, Vertex>(this, IsConstraintOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsConstraintOf, Vertex>(this, IsConstraintOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsConstraintOf, Vertex>(this, IsConstraintOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences() {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(boolean noSubClasses) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences() {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsQuantifiedDeclOf, ? extends Vertex>> getIsQuantifiedDeclOfIncidences() {
		return new IncidenceIterable<IsQuantifiedDeclOf, Vertex>(this, IsQuantifiedDeclOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsQuantifiedDeclOf, ? extends Vertex>> getIsQuantifiedDeclOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsQuantifiedDeclOf, Vertex>(this, IsQuantifiedDeclOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsQuantifiedDeclOf, ? extends Vertex>> getIsQuantifiedDeclOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsQuantifiedDeclOf, Vertex>(this, IsQuantifiedDeclOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsQuantifiedDeclOf, ? extends Vertex>> getIsQuantifiedDeclOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsQuantifiedDeclOf, Vertex>(this, IsQuantifiedDeclOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsCompDeclOf, ? extends Vertex>> getIsCompDeclOfIncidences() {
		return new IncidenceIterable<IsCompDeclOf, Vertex>(this, IsCompDeclOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsCompDeclOf, ? extends Vertex>> getIsCompDeclOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsCompDeclOf, Vertex>(this, IsCompDeclOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsCompDeclOf, ? extends Vertex>> getIsCompDeclOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsCompDeclOf, Vertex>(this, IsCompDeclOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsCompDeclOf, ? extends Vertex>> getIsCompDeclOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsCompDeclOf, Vertex>(this, IsCompDeclOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences() {
		return new IncidenceIterable<IsSimpleDeclOf, Vertex>(this, IsSimpleDeclOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsSimpleDeclOf, Vertex>(this, IsSimpleDeclOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsSimpleDeclOf, Vertex>(this, IsSimpleDeclOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsSimpleDeclOf, Vertex>(this, IsSimpleDeclOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences() {
		return new IncidenceIterable<IsSubgraphOf, Vertex>(this, IsSubgraphOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsSubgraphOf, Vertex>(this, IsSubgraphOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsSubgraphOf, Vertex>(this, IsSubgraphOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsSubgraphOf, Vertex>(this, IsSubgraphOf.class, direction);
	}

}
