/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema.impl;

import de.uni_koblenz.jgralab.impl.array.GraphImpl;
import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.Aggregation;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.Composition;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeClass;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.Schema;
import de.uni_koblenz.jgralab.Vertex;
import de.uni_koblenz.jgralab.VertexClass;

import de.uni_koblenz.jgralab.greql2.schema.AlternativePathDescription;
import de.uni_koblenz.jgralab.greql2.schema.AttributeId;
import de.uni_koblenz.jgralab.greql2.schema.BackwardVertexSet;
import de.uni_koblenz.jgralab.greql2.schema.BagComprehension;
import de.uni_koblenz.jgralab.greql2.schema.BagConstruction;
import de.uni_koblenz.jgralab.greql2.schema.BoolLiteral;
import de.uni_koblenz.jgralab.greql2.schema.CfGrammar;
import de.uni_koblenz.jgralab.greql2.schema.Comprehension;
import de.uni_koblenz.jgralab.greql2.schema.ComprehensionWithTableHeader;
import de.uni_koblenz.jgralab.greql2.schema.ConditionalExpression;
import de.uni_koblenz.jgralab.greql2.schema.Declaration;
import de.uni_koblenz.jgralab.greql2.schema.Definition;
import de.uni_koblenz.jgralab.greql2.schema.DefinitionExpression;
import de.uni_koblenz.jgralab.greql2.schema.Direction;
import de.uni_koblenz.jgralab.greql2.schema.EdgePathDescription;
import de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction;
import de.uni_koblenz.jgralab.greql2.schema.EdgeSetExpression;
import de.uni_koblenz.jgralab.greql2.schema.EdgeSubgraphExpression;
import de.uni_koblenz.jgralab.greql2.schema.EdgeVertexList;
import de.uni_koblenz.jgralab.greql2.schema.ElementSetExpression;
import de.uni_koblenz.jgralab.greql2.schema.ExponentiatedPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.Expression;
import de.uni_koblenz.jgralab.greql2.schema.ForwardVertexSet;
import de.uni_koblenz.jgralab.greql2.schema.FunctionApplication;
import de.uni_koblenz.jgralab.greql2.schema.FunctionId;
import de.uni_koblenz.jgralab.greql2.schema.Greql2;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Aggregation;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Expression;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex;
import de.uni_koblenz.jgralab.greql2.schema.Identifier;
import de.uni_koblenz.jgralab.greql2.schema.IntLiteral;
import de.uni_koblenz.jgralab.greql2.schema.IntermediateVertexPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.IsAlternativePathOf;
import de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfDefinition;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf;
import de.uni_koblenz.jgralab.greql2.schema.IsColumnHeaderExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsCompDeclOf;
import de.uni_koblenz.jgralab.greql2.schema.IsCompResultDefOf;
import de.uni_koblenz.jgralab.greql2.schema.IsConditionOf;
import de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf;
import de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf;
import de.uni_koblenz.jgralab.greql2.schema.IsDefinitionOf;
import de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf;
import de.uni_koblenz.jgralab.greql2.schema.IsEdgeExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsEdgeOrVertexExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsEdgeRestrOf;
import de.uni_koblenz.jgralab.greql2.schema.IsEdgeVertexListOf;
import de.uni_koblenz.jgralab.greql2.schema.IsElementOf;
import de.uni_koblenz.jgralab.greql2.schema.IsExponentOf;
import de.uni_koblenz.jgralab.greql2.schema.IsExponentiatedPathOf;
import de.uni_koblenz.jgralab.greql2.schema.IsExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsFalseExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsFirstValueOf;
import de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf;
import de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf;
import de.uni_koblenz.jgralab.greql2.schema.IsIdOf;
import de.uni_koblenz.jgralab.greql2.schema.IsIntermediateVertexOf;
import de.uni_koblenz.jgralab.greql2.schema.IsIteratedPathOf;
import de.uni_koblenz.jgralab.greql2.schema.IsLastValueOf;
import de.uni_koblenz.jgralab.greql2.schema.IsLeftSideOf;
import de.uni_koblenz.jgralab.greql2.schema.IsNullExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsOptionalPathOf;
import de.uni_koblenz.jgralab.greql2.schema.IsPartOf;
import de.uni_koblenz.jgralab.greql2.schema.IsPathDescriptionOf;
import de.uni_koblenz.jgralab.greql2.schema.IsPathOf;
import de.uni_koblenz.jgralab.greql2.schema.IsProductionOf;
import de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf;
import de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf;
import de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRecordElementOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRestrictedExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRestrictionOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRightSideOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRoleIdOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRootOf;
import de.uni_koblenz.jgralab.greql2.schema.IsRowHeaderExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsSequenceElementOf;
import de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf;
import de.uni_koblenz.jgralab.greql2.schema.IsStartExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf;
import de.uni_koblenz.jgralab.greql2.schema.IsSubPathOf;
import de.uni_koblenz.jgralab.greql2.schema.IsSubgraphOf;
import de.uni_koblenz.jgralab.greql2.schema.IsSymbolOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTableHeaderOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTargetExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTransposedPathOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTrueExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeIdOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOf;
import de.uni_koblenz.jgralab.greql2.schema.IsVarOf;
import de.uni_koblenz.jgralab.greql2.schema.IteratedPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.LetExpression;
import de.uni_koblenz.jgralab.greql2.schema.ListConstruction;
import de.uni_koblenz.jgralab.greql2.schema.ListRangeConstruction;
import de.uni_koblenz.jgralab.greql2.schema.Literal;
import de.uni_koblenz.jgralab.greql2.schema.Nonterminal;
import de.uni_koblenz.jgralab.greql2.schema.NullLiteral;
import de.uni_koblenz.jgralab.greql2.schema.OptionalPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.PathConstruction;
import de.uni_koblenz.jgralab.greql2.schema.PathDescription;
import de.uni_koblenz.jgralab.greql2.schema.PathExistence;
import de.uni_koblenz.jgralab.greql2.schema.PathExpression;
import de.uni_koblenz.jgralab.greql2.schema.PathSystemConstruction;
import de.uni_koblenz.jgralab.greql2.schema.PrimaryPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.Production;
import de.uni_koblenz.jgralab.greql2.schema.QuantifiedExpression;
import de.uni_koblenz.jgralab.greql2.schema.Quantifier;
import de.uni_koblenz.jgralab.greql2.schema.RealLiteral;
import de.uni_koblenz.jgralab.greql2.schema.RecordConstruction;
import de.uni_koblenz.jgralab.greql2.schema.RecordElement;
import de.uni_koblenz.jgralab.greql2.schema.RecordId;
import de.uni_koblenz.jgralab.greql2.schema.RestrictedExpression;
import de.uni_koblenz.jgralab.greql2.schema.RightSide;
import de.uni_koblenz.jgralab.greql2.schema.RoleId;
import de.uni_koblenz.jgralab.greql2.schema.SequentialPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.SetComprehension;
import de.uni_koblenz.jgralab.greql2.schema.SetConstruction;
import de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration;
import de.uni_koblenz.jgralab.greql2.schema.SimplePathDescription;
import de.uni_koblenz.jgralab.greql2.schema.StringLiteral;
import de.uni_koblenz.jgralab.greql2.schema.SubgraphExpression;
import de.uni_koblenz.jgralab.greql2.schema.Symbol;
import de.uni_koblenz.jgralab.greql2.schema.TableComprehension;
import de.uni_koblenz.jgralab.greql2.schema.ThisLiteral;
import de.uni_koblenz.jgralab.greql2.schema.TransposedPathDescription;
import de.uni_koblenz.jgralab.greql2.schema.TupleConstruction;
import de.uni_koblenz.jgralab.greql2.schema.TypeId;
import de.uni_koblenz.jgralab.greql2.schema.ValueConstruction;
import de.uni_koblenz.jgralab.greql2.schema.Variable;
import de.uni_koblenz.jgralab.greql2.schema.VertexSetExpression;
import de.uni_koblenz.jgralab.greql2.schema.VertexSubgraphExpression;
import de.uni_koblenz.jgralab.greql2.schema.WhereExpression;

import de.uni_koblenz.jgralab.greql2.schema.Greql2Schema;

import java.io.IOException;

public class Greql2Impl extends GraphImpl implements Graph, Greql2 {

	public Greql2Impl(Schema schema, int vMax, int eMax) {
		this(null, schema, vMax, eMax);
	}
	
	public Greql2Impl(java.lang.String id, Schema schema, int vMax, int eMax) {
		super(id, schema.getGraphClass("Greql2"), schema, vMax, eMax);
	}
	
	public static Greql2 create(int vMax, int eMax) {
		return (Greql2) Greql2Schema.instance().createGreql2(null, vMax, eMax);
	}
	
	public static Greql2 create(String id, int vMax, int eMax) {
		return (Greql2) Greql2Schema.instance().createGreql2(id, vMax, eMax);
	}

	public Class<? extends AttributedElement> getM1Class() {
		return Greql2.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		throw new NoSuchFieldException("Greql2 doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		throw new NoSuchFieldException("Greql2 doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	// ------------------------ Code for AlternativePathDescription ------------------------

	public AlternativePathDescription getAlternativePathDescription(int id) {
		return (AlternativePathDescription)getVertex(id);
	}

	public AlternativePathDescription getFirstAlternativePathDescription() {
		return (AlternativePathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("AlternativePathDescription"));
	}

	public AlternativePathDescription getFirstAlternativePathDescription(boolean noSubClasses) {
		return (AlternativePathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("AlternativePathDescription"), noSubClasses);
	}

	public AlternativePathDescription createAlternativePathDescription() {
		AlternativePathDescription newVertex = (AlternativePathDescription) graphFactory.createVertex(AlternativePathDescription.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public AlternativePathDescription createAlternativePathDescription(int id) {
		AlternativePathDescription newVertex = (AlternativePathDescription) graphFactory.createVertex(AlternativePathDescription.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for AttributeId ------------------------

	public AttributeId getAttributeId(int id) {
		return (AttributeId)getVertex(id);
	}

	public AttributeId getFirstAttributeId() {
		return (AttributeId)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("AttributeId"));
	}

	public AttributeId getFirstAttributeId(boolean noSubClasses) {
		return (AttributeId)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("AttributeId"), noSubClasses);
	}

	public AttributeId createAttributeId() {
		AttributeId newVertex = (AttributeId) graphFactory.createVertex(AttributeId.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public AttributeId createAttributeId(int id) {
		AttributeId newVertex = (AttributeId) graphFactory.createVertex(AttributeId.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for BackwardVertexSet ------------------------

	public BackwardVertexSet getBackwardVertexSet(int id) {
		return (BackwardVertexSet)getVertex(id);
	}

	public BackwardVertexSet getFirstBackwardVertexSet() {
		return (BackwardVertexSet)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("BackwardVertexSet"));
	}

	public BackwardVertexSet getFirstBackwardVertexSet(boolean noSubClasses) {
		return (BackwardVertexSet)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("BackwardVertexSet"), noSubClasses);
	}

	public BackwardVertexSet createBackwardVertexSet() {
		BackwardVertexSet newVertex = (BackwardVertexSet) graphFactory.createVertex(BackwardVertexSet.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public BackwardVertexSet createBackwardVertexSet(int id) {
		BackwardVertexSet newVertex = (BackwardVertexSet) graphFactory.createVertex(BackwardVertexSet.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for BagComprehension ------------------------

	public BagComprehension getBagComprehension(int id) {
		return (BagComprehension)getVertex(id);
	}

	public BagComprehension getFirstBagComprehension() {
		return (BagComprehension)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("BagComprehension"));
	}

	public BagComprehension getFirstBagComprehension(boolean noSubClasses) {
		return (BagComprehension)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("BagComprehension"), noSubClasses);
	}

	public BagComprehension createBagComprehension() {
		BagComprehension newVertex = (BagComprehension) graphFactory.createVertex(BagComprehension.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public BagComprehension createBagComprehension(int id) {
		BagComprehension newVertex = (BagComprehension) graphFactory.createVertex(BagComprehension.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for BagConstruction ------------------------

	public BagConstruction getBagConstruction(int id) {
		return (BagConstruction)getVertex(id);
	}

	public BagConstruction getFirstBagConstruction() {
		return (BagConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("BagConstruction"));
	}

	public BagConstruction getFirstBagConstruction(boolean noSubClasses) {
		return (BagConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("BagConstruction"), noSubClasses);
	}

	public BagConstruction createBagConstruction() {
		BagConstruction newVertex = (BagConstruction) graphFactory.createVertex(BagConstruction.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public BagConstruction createBagConstruction(int id) {
		BagConstruction newVertex = (BagConstruction) graphFactory.createVertex(BagConstruction.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for BoolLiteral ------------------------

	public BoolLiteral getBoolLiteral(int id) {
		return (BoolLiteral)getVertex(id);
	}

	public BoolLiteral getFirstBoolLiteral() {
		return (BoolLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("BoolLiteral"));
	}

	public BoolLiteral getFirstBoolLiteral(boolean noSubClasses) {
		return (BoolLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("BoolLiteral"), noSubClasses);
	}

	public BoolLiteral createBoolLiteral() {
		BoolLiteral newVertex = (BoolLiteral) graphFactory.createVertex(BoolLiteral.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public BoolLiteral createBoolLiteral(int id) {
		BoolLiteral newVertex = (BoolLiteral) graphFactory.createVertex(BoolLiteral.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for CfGrammar ------------------------

	public CfGrammar getCfGrammar(int id) {
		return (CfGrammar)getVertex(id);
	}

	public CfGrammar getFirstCfGrammar() {
		return (CfGrammar)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("CfGrammar"));
	}

	public CfGrammar getFirstCfGrammar(boolean noSubClasses) {
		return (CfGrammar)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("CfGrammar"), noSubClasses);
	}

	public CfGrammar createCfGrammar() {
		CfGrammar newVertex = (CfGrammar) graphFactory.createVertex(CfGrammar.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public CfGrammar createCfGrammar(int id) {
		CfGrammar newVertex = (CfGrammar) graphFactory.createVertex(CfGrammar.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for Comprehension ------------------------

	public Comprehension getComprehension(int id) {
		return (Comprehension)getVertex(id);
	}

	public Comprehension getFirstComprehension() {
		return (Comprehension)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Comprehension"));
	}

	// ------------------------ Code for ComprehensionWithTableHeader ------------------------

	public ComprehensionWithTableHeader getComprehensionWithTableHeader(int id) {
		return (ComprehensionWithTableHeader)getVertex(id);
	}

	public ComprehensionWithTableHeader getFirstComprehensionWithTableHeader() {
		return (ComprehensionWithTableHeader)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ComprehensionWithTableHeader"));
	}

	// ------------------------ Code for ConditionalExpression ------------------------

	public ConditionalExpression getConditionalExpression(int id) {
		return (ConditionalExpression)getVertex(id);
	}

	public ConditionalExpression getFirstConditionalExpression() {
		return (ConditionalExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ConditionalExpression"));
	}

	public ConditionalExpression getFirstConditionalExpression(boolean noSubClasses) {
		return (ConditionalExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ConditionalExpression"), noSubClasses);
	}

	public ConditionalExpression createConditionalExpression() {
		ConditionalExpression newVertex = (ConditionalExpression) graphFactory.createVertex(ConditionalExpression.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public ConditionalExpression createConditionalExpression(int id) {
		ConditionalExpression newVertex = (ConditionalExpression) graphFactory.createVertex(ConditionalExpression.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for Declaration ------------------------

	public Declaration getDeclaration(int id) {
		return (Declaration)getVertex(id);
	}

	public Declaration getFirstDeclaration() {
		return (Declaration)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Declaration"));
	}

	public Declaration getFirstDeclaration(boolean noSubClasses) {
		return (Declaration)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Declaration"), noSubClasses);
	}

	public Declaration createDeclaration() {
		Declaration newVertex = (Declaration) graphFactory.createVertex(Declaration.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Declaration createDeclaration(int id) {
		Declaration newVertex = (Declaration) graphFactory.createVertex(Declaration.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for Definition ------------------------

	public Definition getDefinition(int id) {
		return (Definition)getVertex(id);
	}

	public Definition getFirstDefinition() {
		return (Definition)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Definition"));
	}

	public Definition getFirstDefinition(boolean noSubClasses) {
		return (Definition)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Definition"), noSubClasses);
	}

	public Definition createDefinition() {
		Definition newVertex = (Definition) graphFactory.createVertex(Definition.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Definition createDefinition(int id) {
		Definition newVertex = (Definition) graphFactory.createVertex(Definition.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for DefinitionExpression ------------------------

	public DefinitionExpression getDefinitionExpression(int id) {
		return (DefinitionExpression)getVertex(id);
	}

	public DefinitionExpression getFirstDefinitionExpression() {
		return (DefinitionExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("DefinitionExpression"));
	}

	// ------------------------ Code for Direction ------------------------

	public Direction getDirection(int id) {
		return (Direction)getVertex(id);
	}

	public Direction getFirstDirection() {
		return (Direction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Direction"));
	}

	public Direction getFirstDirection(boolean noSubClasses) {
		return (Direction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Direction"), noSubClasses);
	}

	public Direction createDirection() {
		Direction newVertex = (Direction) graphFactory.createVertex(Direction.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Direction createDirection(int id) {
		Direction newVertex = (Direction) graphFactory.createVertex(Direction.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for EdgePathDescription ------------------------

	public EdgePathDescription getEdgePathDescription(int id) {
		return (EdgePathDescription)getVertex(id);
	}

	public EdgePathDescription getFirstEdgePathDescription() {
		return (EdgePathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgePathDescription"));
	}

	public EdgePathDescription getFirstEdgePathDescription(boolean noSubClasses) {
		return (EdgePathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgePathDescription"), noSubClasses);
	}

	public EdgePathDescription createEdgePathDescription() {
		EdgePathDescription newVertex = (EdgePathDescription) graphFactory.createVertex(EdgePathDescription.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public EdgePathDescription createEdgePathDescription(int id) {
		EdgePathDescription newVertex = (EdgePathDescription) graphFactory.createVertex(EdgePathDescription.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for EdgeRestriction ------------------------

	public EdgeRestriction getEdgeRestriction(int id) {
		return (EdgeRestriction)getVertex(id);
	}

	public EdgeRestriction getFirstEdgeRestriction() {
		return (EdgeRestriction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgeRestriction"));
	}

	public EdgeRestriction getFirstEdgeRestriction(boolean noSubClasses) {
		return (EdgeRestriction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgeRestriction"), noSubClasses);
	}

	public EdgeRestriction createEdgeRestriction() {
		EdgeRestriction newVertex = (EdgeRestriction) graphFactory.createVertex(EdgeRestriction.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public EdgeRestriction createEdgeRestriction(int id) {
		EdgeRestriction newVertex = (EdgeRestriction) graphFactory.createVertex(EdgeRestriction.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for EdgeSetExpression ------------------------

	public EdgeSetExpression getEdgeSetExpression(int id) {
		return (EdgeSetExpression)getVertex(id);
	}

	public EdgeSetExpression getFirstEdgeSetExpression() {
		return (EdgeSetExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgeSetExpression"));
	}

	public EdgeSetExpression getFirstEdgeSetExpression(boolean noSubClasses) {
		return (EdgeSetExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgeSetExpression"), noSubClasses);
	}

	public EdgeSetExpression createEdgeSetExpression() {
		EdgeSetExpression newVertex = (EdgeSetExpression) graphFactory.createVertex(EdgeSetExpression.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public EdgeSetExpression createEdgeSetExpression(int id) {
		EdgeSetExpression newVertex = (EdgeSetExpression) graphFactory.createVertex(EdgeSetExpression.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for EdgeSubgraphExpression ------------------------

	public EdgeSubgraphExpression getEdgeSubgraphExpression(int id) {
		return (EdgeSubgraphExpression)getVertex(id);
	}

	public EdgeSubgraphExpression getFirstEdgeSubgraphExpression() {
		return (EdgeSubgraphExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgeSubgraphExpression"));
	}

	public EdgeSubgraphExpression getFirstEdgeSubgraphExpression(boolean noSubClasses) {
		return (EdgeSubgraphExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgeSubgraphExpression"), noSubClasses);
	}

	public EdgeSubgraphExpression createEdgeSubgraphExpression() {
		EdgeSubgraphExpression newVertex = (EdgeSubgraphExpression) graphFactory.createVertex(EdgeSubgraphExpression.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public EdgeSubgraphExpression createEdgeSubgraphExpression(int id) {
		EdgeSubgraphExpression newVertex = (EdgeSubgraphExpression) graphFactory.createVertex(EdgeSubgraphExpression.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for EdgeVertexList ------------------------

	public EdgeVertexList getEdgeVertexList(int id) {
		return (EdgeVertexList)getVertex(id);
	}

	public EdgeVertexList getFirstEdgeVertexList() {
		return (EdgeVertexList)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgeVertexList"));
	}

	public EdgeVertexList getFirstEdgeVertexList(boolean noSubClasses) {
		return (EdgeVertexList)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgeVertexList"), noSubClasses);
	}

	public EdgeVertexList createEdgeVertexList() {
		EdgeVertexList newVertex = (EdgeVertexList) graphFactory.createVertex(EdgeVertexList.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public EdgeVertexList createEdgeVertexList(int id) {
		EdgeVertexList newVertex = (EdgeVertexList) graphFactory.createVertex(EdgeVertexList.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for ElementSetExpression ------------------------

	public ElementSetExpression getElementSetExpression(int id) {
		return (ElementSetExpression)getVertex(id);
	}

	public ElementSetExpression getFirstElementSetExpression() {
		return (ElementSetExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ElementSetExpression"));
	}

	// ------------------------ Code for ExponentiatedPathDescription ------------------------

	public ExponentiatedPathDescription getExponentiatedPathDescription(int id) {
		return (ExponentiatedPathDescription)getVertex(id);
	}

	public ExponentiatedPathDescription getFirstExponentiatedPathDescription() {
		return (ExponentiatedPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ExponentiatedPathDescription"));
	}

	public ExponentiatedPathDescription getFirstExponentiatedPathDescription(boolean noSubClasses) {
		return (ExponentiatedPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ExponentiatedPathDescription"), noSubClasses);
	}

	public ExponentiatedPathDescription createExponentiatedPathDescription() {
		ExponentiatedPathDescription newVertex = (ExponentiatedPathDescription) graphFactory.createVertex(ExponentiatedPathDescription.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public ExponentiatedPathDescription createExponentiatedPathDescription(int id) {
		ExponentiatedPathDescription newVertex = (ExponentiatedPathDescription) graphFactory.createVertex(ExponentiatedPathDescription.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for Expression ------------------------

	public Expression getExpression(int id) {
		return (Expression)getVertex(id);
	}

	public Expression getFirstExpression() {
		return (Expression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Expression"));
	}

	// ------------------------ Code for ForwardVertexSet ------------------------

	public ForwardVertexSet getForwardVertexSet(int id) {
		return (ForwardVertexSet)getVertex(id);
	}

	public ForwardVertexSet getFirstForwardVertexSet() {
		return (ForwardVertexSet)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ForwardVertexSet"));
	}

	public ForwardVertexSet getFirstForwardVertexSet(boolean noSubClasses) {
		return (ForwardVertexSet)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ForwardVertexSet"), noSubClasses);
	}

	public ForwardVertexSet createForwardVertexSet() {
		ForwardVertexSet newVertex = (ForwardVertexSet) graphFactory.createVertex(ForwardVertexSet.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public ForwardVertexSet createForwardVertexSet(int id) {
		ForwardVertexSet newVertex = (ForwardVertexSet) graphFactory.createVertex(ForwardVertexSet.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for FunctionApplication ------------------------

	public FunctionApplication getFunctionApplication(int id) {
		return (FunctionApplication)getVertex(id);
	}

	public FunctionApplication getFirstFunctionApplication() {
		return (FunctionApplication)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("FunctionApplication"));
	}

	public FunctionApplication getFirstFunctionApplication(boolean noSubClasses) {
		return (FunctionApplication)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("FunctionApplication"), noSubClasses);
	}

	public FunctionApplication createFunctionApplication() {
		FunctionApplication newVertex = (FunctionApplication) graphFactory.createVertex(FunctionApplication.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public FunctionApplication createFunctionApplication(int id) {
		FunctionApplication newVertex = (FunctionApplication) graphFactory.createVertex(FunctionApplication.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for FunctionId ------------------------

	public FunctionId getFunctionId(int id) {
		return (FunctionId)getVertex(id);
	}

	public FunctionId getFirstFunctionId() {
		return (FunctionId)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("FunctionId"));
	}

	public FunctionId getFirstFunctionId(boolean noSubClasses) {
		return (FunctionId)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("FunctionId"), noSubClasses);
	}

	public FunctionId createFunctionId() {
		FunctionId newVertex = (FunctionId) graphFactory.createVertex(FunctionId.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public FunctionId createFunctionId(int id) {
		FunctionId newVertex = (FunctionId) graphFactory.createVertex(FunctionId.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for Greql2Aggregation ------------------------

	public Greql2Aggregation getGreql2Aggregation(int id) {
		return (Greql2Aggregation)getEdge(id);
	}

	public Greql2Aggregation getFirstGreql2AggregationInGraph() {
		return (Greql2Aggregation)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("Greql2Aggregation"));
	}

	// ------------------------ Code for Greql2Expression ------------------------

	public Greql2Expression getGreql2Expression(int id) {
		return (Greql2Expression)getVertex(id);
	}

	public Greql2Expression getFirstGreql2Expression() {
		return (Greql2Expression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Greql2Expression"));
	}

	public Greql2Expression getFirstGreql2Expression(boolean noSubClasses) {
		return (Greql2Expression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Greql2Expression"), noSubClasses);
	}

	public Greql2Expression createGreql2Expression() {
		Greql2Expression newVertex = (Greql2Expression) graphFactory.createVertex(Greql2Expression.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Greql2Expression createGreql2Expression(int id) {
		Greql2Expression newVertex = (Greql2Expression) graphFactory.createVertex(Greql2Expression.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for Greql2Vertex ------------------------

	public Greql2Vertex getGreql2Vertex(int id) {
		return (Greql2Vertex)getVertex(id);
	}

	public Greql2Vertex getFirstGreql2Vertex() {
		return (Greql2Vertex)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Greql2Vertex"));
	}

	// ------------------------ Code for Identifier ------------------------

	public Identifier getIdentifier(int id) {
		return (Identifier)getVertex(id);
	}

	public Identifier getFirstIdentifier() {
		return (Identifier)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Identifier"));
	}

	public Identifier getFirstIdentifier(boolean noSubClasses) {
		return (Identifier)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Identifier"), noSubClasses);
	}

	public Identifier createIdentifier() {
		Identifier newVertex = (Identifier) graphFactory.createVertex(Identifier.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Identifier createIdentifier(int id) {
		Identifier newVertex = (Identifier) graphFactory.createVertex(Identifier.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for IntLiteral ------------------------

	public IntLiteral getIntLiteral(int id) {
		return (IntLiteral)getVertex(id);
	}

	public IntLiteral getFirstIntLiteral() {
		return (IntLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("IntLiteral"));
	}

	public IntLiteral getFirstIntLiteral(boolean noSubClasses) {
		return (IntLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("IntLiteral"), noSubClasses);
	}

	public IntLiteral createIntLiteral() {
		IntLiteral newVertex = (IntLiteral) graphFactory.createVertex(IntLiteral.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public IntLiteral createIntLiteral(int id) {
		IntLiteral newVertex = (IntLiteral) graphFactory.createVertex(IntLiteral.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for IntermediateVertexPathDescription ------------------------

	public IntermediateVertexPathDescription getIntermediateVertexPathDescription(int id) {
		return (IntermediateVertexPathDescription)getVertex(id);
	}

	public IntermediateVertexPathDescription getFirstIntermediateVertexPathDescription() {
		return (IntermediateVertexPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("IntermediateVertexPathDescription"));
	}

	public IntermediateVertexPathDescription getFirstIntermediateVertexPathDescription(boolean noSubClasses) {
		return (IntermediateVertexPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("IntermediateVertexPathDescription"), noSubClasses);
	}

	public IntermediateVertexPathDescription createIntermediateVertexPathDescription() {
		IntermediateVertexPathDescription newVertex = (IntermediateVertexPathDescription) graphFactory.createVertex(IntermediateVertexPathDescription.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public IntermediateVertexPathDescription createIntermediateVertexPathDescription(int id) {
		IntermediateVertexPathDescription newVertex = (IntermediateVertexPathDescription) graphFactory.createVertex(IntermediateVertexPathDescription.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for IsAlternativePathOf ------------------------

	public IsAlternativePathOf getIsAlternativePathOf(int id) {
		return (IsAlternativePathOf)getEdge(id);
	}

	public IsAlternativePathOf getFirstIsAlternativePathOfInGraph() {
		return (IsAlternativePathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsAlternativePathOf"));
	}

	public IsAlternativePathOf getFirstIsAlternativePathOfInGraph(boolean noSubClasses) {
		return (IsAlternativePathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsAlternativePathOf"), noSubClasses);
	}

	public IsAlternativePathOf createIsAlternativePathOf(PathDescription alpha, AlternativePathDescription omega) {
		IsAlternativePathOf newEdge = (IsAlternativePathOf) graphFactory.createEdge(IsAlternativePathOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsAlternativePathOf createIsAlternativePathOf(int id, PathDescription alpha, AlternativePathDescription omega) {
		IsAlternativePathOf newEdge = (IsAlternativePathOf) graphFactory.createEdge(IsAlternativePathOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsArgumentOf ------------------------

	public IsArgumentOf getIsArgumentOf(int id) {
		return (IsArgumentOf)getEdge(id);
	}

	public IsArgumentOf getFirstIsArgumentOfInGraph() {
		return (IsArgumentOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsArgumentOf"));
	}

	public IsArgumentOf getFirstIsArgumentOfInGraph(boolean noSubClasses) {
		return (IsArgumentOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsArgumentOf"), noSubClasses);
	}

	public IsArgumentOf createIsArgumentOf(Expression alpha, FunctionApplication omega) {
		IsArgumentOf newEdge = (IsArgumentOf) graphFactory.createEdge(IsArgumentOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsArgumentOf createIsArgumentOf(int id, Expression alpha, FunctionApplication omega) {
		IsArgumentOf newEdge = (IsArgumentOf) graphFactory.createEdge(IsArgumentOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsBoundExprOf ------------------------

	public IsBoundExprOf getIsBoundExprOf(int id) {
		return (IsBoundExprOf)getEdge(id);
	}

	public IsBoundExprOf getFirstIsBoundExprOfInGraph() {
		return (IsBoundExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsBoundExprOf"));
	}

	// ------------------------ Code for IsBoundExprOfDefinition ------------------------

	public IsBoundExprOfDefinition getIsBoundExprOfDefinition(int id) {
		return (IsBoundExprOfDefinition)getEdge(id);
	}

	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinitionInGraph() {
		return (IsBoundExprOfDefinition)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsBoundExprOfDefinition"));
	}

	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinitionInGraph(boolean noSubClasses) {
		return (IsBoundExprOfDefinition)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsBoundExprOfDefinition"), noSubClasses);
	}

	public IsBoundExprOfDefinition createIsBoundExprOfDefinition(Expression alpha, DefinitionExpression omega) {
		IsBoundExprOfDefinition newEdge = (IsBoundExprOfDefinition) graphFactory.createEdge(IsBoundExprOfDefinition.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsBoundExprOfDefinition createIsBoundExprOfDefinition(int id, Expression alpha, DefinitionExpression omega) {
		IsBoundExprOfDefinition newEdge = (IsBoundExprOfDefinition) graphFactory.createEdge(IsBoundExprOfDefinition.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsBoundExprOfQuantifier ------------------------

	public IsBoundExprOfQuantifier getIsBoundExprOfQuantifier(int id) {
		return (IsBoundExprOfQuantifier)getEdge(id);
	}

	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifierInGraph() {
		return (IsBoundExprOfQuantifier)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsBoundExprOfQuantifier"));
	}

	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifierInGraph(boolean noSubClasses) {
		return (IsBoundExprOfQuantifier)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsBoundExprOfQuantifier"), noSubClasses);
	}

	public IsBoundExprOfQuantifier createIsBoundExprOfQuantifier(Expression alpha, QuantifiedExpression omega) {
		IsBoundExprOfQuantifier newEdge = (IsBoundExprOfQuantifier) graphFactory.createEdge(IsBoundExprOfQuantifier.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsBoundExprOfQuantifier createIsBoundExprOfQuantifier(int id, Expression alpha, QuantifiedExpression omega) {
		IsBoundExprOfQuantifier newEdge = (IsBoundExprOfQuantifier) graphFactory.createEdge(IsBoundExprOfQuantifier.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsBoundVarOf ------------------------

	public IsBoundVarOf getIsBoundVarOf(int id) {
		return (IsBoundVarOf)getEdge(id);
	}

	public IsBoundVarOf getFirstIsBoundVarOfInGraph() {
		return (IsBoundVarOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsBoundVarOf"));
	}

	public IsBoundVarOf getFirstIsBoundVarOfInGraph(boolean noSubClasses) {
		return (IsBoundVarOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsBoundVarOf"), noSubClasses);
	}

	public IsBoundVarOf createIsBoundVarOf(Variable alpha, Greql2Expression omega) {
		IsBoundVarOf newEdge = (IsBoundVarOf) graphFactory.createEdge(IsBoundVarOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsBoundVarOf createIsBoundVarOf(int id, Variable alpha, Greql2Expression omega) {
		IsBoundVarOf newEdge = (IsBoundVarOf) graphFactory.createEdge(IsBoundVarOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsColumnHeaderExprOf ------------------------

	public IsColumnHeaderExprOf getIsColumnHeaderExprOf(int id) {
		return (IsColumnHeaderExprOf)getEdge(id);
	}

	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOfInGraph() {
		return (IsColumnHeaderExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsColumnHeaderExprOf"));
	}

	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOfInGraph(boolean noSubClasses) {
		return (IsColumnHeaderExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsColumnHeaderExprOf"), noSubClasses);
	}

	public IsColumnHeaderExprOf createIsColumnHeaderExprOf(Expression alpha, TableComprehension omega) {
		IsColumnHeaderExprOf newEdge = (IsColumnHeaderExprOf) graphFactory.createEdge(IsColumnHeaderExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsColumnHeaderExprOf createIsColumnHeaderExprOf(int id, Expression alpha, TableComprehension omega) {
		IsColumnHeaderExprOf newEdge = (IsColumnHeaderExprOf) graphFactory.createEdge(IsColumnHeaderExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsCompDeclOf ------------------------

	public IsCompDeclOf getIsCompDeclOf(int id) {
		return (IsCompDeclOf)getEdge(id);
	}

	public IsCompDeclOf getFirstIsCompDeclOfInGraph() {
		return (IsCompDeclOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsCompDeclOf"));
	}

	public IsCompDeclOf getFirstIsCompDeclOfInGraph(boolean noSubClasses) {
		return (IsCompDeclOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsCompDeclOf"), noSubClasses);
	}

	public IsCompDeclOf createIsCompDeclOf(Declaration alpha, Comprehension omega) {
		IsCompDeclOf newEdge = (IsCompDeclOf) graphFactory.createEdge(IsCompDeclOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsCompDeclOf createIsCompDeclOf(int id, Declaration alpha, Comprehension omega) {
		IsCompDeclOf newEdge = (IsCompDeclOf) graphFactory.createEdge(IsCompDeclOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsCompResultDefOf ------------------------

	public IsCompResultDefOf getIsCompResultDefOf(int id) {
		return (IsCompResultDefOf)getEdge(id);
	}

	public IsCompResultDefOf getFirstIsCompResultDefOfInGraph() {
		return (IsCompResultDefOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsCompResultDefOf"));
	}

	public IsCompResultDefOf getFirstIsCompResultDefOfInGraph(boolean noSubClasses) {
		return (IsCompResultDefOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsCompResultDefOf"), noSubClasses);
	}

	public IsCompResultDefOf createIsCompResultDefOf(Expression alpha, Comprehension omega) {
		IsCompResultDefOf newEdge = (IsCompResultDefOf) graphFactory.createEdge(IsCompResultDefOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsCompResultDefOf createIsCompResultDefOf(int id, Expression alpha, Comprehension omega) {
		IsCompResultDefOf newEdge = (IsCompResultDefOf) graphFactory.createEdge(IsCompResultDefOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsConditionOf ------------------------

	public IsConditionOf getIsConditionOf(int id) {
		return (IsConditionOf)getEdge(id);
	}

	public IsConditionOf getFirstIsConditionOfInGraph() {
		return (IsConditionOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsConditionOf"));
	}

	public IsConditionOf getFirstIsConditionOfInGraph(boolean noSubClasses) {
		return (IsConditionOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsConditionOf"), noSubClasses);
	}

	public IsConditionOf createIsConditionOf(Expression alpha, ConditionalExpression omega) {
		IsConditionOf newEdge = (IsConditionOf) graphFactory.createEdge(IsConditionOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsConditionOf createIsConditionOf(int id, Expression alpha, ConditionalExpression omega) {
		IsConditionOf newEdge = (IsConditionOf) graphFactory.createEdge(IsConditionOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsConstraintOf ------------------------

	public IsConstraintOf getIsConstraintOf(int id) {
		return (IsConstraintOf)getEdge(id);
	}

	public IsConstraintOf getFirstIsConstraintOfInGraph() {
		return (IsConstraintOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsConstraintOf"));
	}

	public IsConstraintOf getFirstIsConstraintOfInGraph(boolean noSubClasses) {
		return (IsConstraintOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsConstraintOf"), noSubClasses);
	}

	public IsConstraintOf createIsConstraintOf(Expression alpha, Declaration omega) {
		IsConstraintOf newEdge = (IsConstraintOf) graphFactory.createEdge(IsConstraintOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsConstraintOf createIsConstraintOf(int id, Expression alpha, Declaration omega) {
		IsConstraintOf newEdge = (IsConstraintOf) graphFactory.createEdge(IsConstraintOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsDeclaredVarOf ------------------------

	public IsDeclaredVarOf getIsDeclaredVarOf(int id) {
		return (IsDeclaredVarOf)getEdge(id);
	}

	public IsDeclaredVarOf getFirstIsDeclaredVarOfInGraph() {
		return (IsDeclaredVarOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsDeclaredVarOf"));
	}

	public IsDeclaredVarOf getFirstIsDeclaredVarOfInGraph(boolean noSubClasses) {
		return (IsDeclaredVarOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsDeclaredVarOf"), noSubClasses);
	}

	public IsDeclaredVarOf createIsDeclaredVarOf(Variable alpha, SimpleDeclaration omega) {
		IsDeclaredVarOf newEdge = (IsDeclaredVarOf) graphFactory.createEdge(IsDeclaredVarOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsDeclaredVarOf createIsDeclaredVarOf(int id, Variable alpha, SimpleDeclaration omega) {
		IsDeclaredVarOf newEdge = (IsDeclaredVarOf) graphFactory.createEdge(IsDeclaredVarOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsDefinitionOf ------------------------

	public IsDefinitionOf getIsDefinitionOf(int id) {
		return (IsDefinitionOf)getEdge(id);
	}

	public IsDefinitionOf getFirstIsDefinitionOfInGraph() {
		return (IsDefinitionOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsDefinitionOf"));
	}

	public IsDefinitionOf getFirstIsDefinitionOfInGraph(boolean noSubClasses) {
		return (IsDefinitionOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsDefinitionOf"), noSubClasses);
	}

	public IsDefinitionOf createIsDefinitionOf(Definition alpha, DefinitionExpression omega) {
		IsDefinitionOf newEdge = (IsDefinitionOf) graphFactory.createEdge(IsDefinitionOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsDefinitionOf createIsDefinitionOf(int id, Definition alpha, DefinitionExpression omega) {
		IsDefinitionOf newEdge = (IsDefinitionOf) graphFactory.createEdge(IsDefinitionOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsDirectionOf ------------------------

	public IsDirectionOf getIsDirectionOf(int id) {
		return (IsDirectionOf)getEdge(id);
	}

	public IsDirectionOf getFirstIsDirectionOfInGraph() {
		return (IsDirectionOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsDirectionOf"));
	}

	public IsDirectionOf getFirstIsDirectionOfInGraph(boolean noSubClasses) {
		return (IsDirectionOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsDirectionOf"), noSubClasses);
	}

	public IsDirectionOf createIsDirectionOf(Direction alpha, PrimaryPathDescription omega) {
		IsDirectionOf newEdge = (IsDirectionOf) graphFactory.createEdge(IsDirectionOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsDirectionOf createIsDirectionOf(int id, Direction alpha, PrimaryPathDescription omega) {
		IsDirectionOf newEdge = (IsDirectionOf) graphFactory.createEdge(IsDirectionOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsEdgeExprOf ------------------------

	public IsEdgeExprOf getIsEdgeExprOf(int id) {
		return (IsEdgeExprOf)getEdge(id);
	}

	public IsEdgeExprOf getFirstIsEdgeExprOfInGraph() {
		return (IsEdgeExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsEdgeExprOf"));
	}

	public IsEdgeExprOf getFirstIsEdgeExprOfInGraph(boolean noSubClasses) {
		return (IsEdgeExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsEdgeExprOf"), noSubClasses);
	}

	public IsEdgeExprOf createIsEdgeExprOf(Expression alpha, EdgePathDescription omega) {
		IsEdgeExprOf newEdge = (IsEdgeExprOf) graphFactory.createEdge(IsEdgeExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsEdgeExprOf createIsEdgeExprOf(int id, Expression alpha, EdgePathDescription omega) {
		IsEdgeExprOf newEdge = (IsEdgeExprOf) graphFactory.createEdge(IsEdgeExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsEdgeOrVertexExprOf ------------------------

	public IsEdgeOrVertexExprOf getIsEdgeOrVertexExprOf(int id) {
		return (IsEdgeOrVertexExprOf)getEdge(id);
	}

	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOfInGraph() {
		return (IsEdgeOrVertexExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsEdgeOrVertexExprOf"));
	}

	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOfInGraph(boolean noSubClasses) {
		return (IsEdgeOrVertexExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsEdgeOrVertexExprOf"), noSubClasses);
	}

	public IsEdgeOrVertexExprOf createIsEdgeOrVertexExprOf(Expression alpha, EdgeVertexList omega) {
		IsEdgeOrVertexExprOf newEdge = (IsEdgeOrVertexExprOf) graphFactory.createEdge(IsEdgeOrVertexExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsEdgeOrVertexExprOf createIsEdgeOrVertexExprOf(int id, Expression alpha, EdgeVertexList omega) {
		IsEdgeOrVertexExprOf newEdge = (IsEdgeOrVertexExprOf) graphFactory.createEdge(IsEdgeOrVertexExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsEdgeRestrOf ------------------------

	public IsEdgeRestrOf getIsEdgeRestrOf(int id) {
		return (IsEdgeRestrOf)getEdge(id);
	}

	public IsEdgeRestrOf getFirstIsEdgeRestrOfInGraph() {
		return (IsEdgeRestrOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsEdgeRestrOf"));
	}

	public IsEdgeRestrOf getFirstIsEdgeRestrOfInGraph(boolean noSubClasses) {
		return (IsEdgeRestrOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsEdgeRestrOf"), noSubClasses);
	}

	public IsEdgeRestrOf createIsEdgeRestrOf(EdgeRestriction alpha, PrimaryPathDescription omega) {
		IsEdgeRestrOf newEdge = (IsEdgeRestrOf) graphFactory.createEdge(IsEdgeRestrOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsEdgeRestrOf createIsEdgeRestrOf(int id, EdgeRestriction alpha, PrimaryPathDescription omega) {
		IsEdgeRestrOf newEdge = (IsEdgeRestrOf) graphFactory.createEdge(IsEdgeRestrOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsEdgeVertexListOf ------------------------

	public IsEdgeVertexListOf getIsEdgeVertexListOf(int id) {
		return (IsEdgeVertexListOf)getEdge(id);
	}

	public IsEdgeVertexListOf getFirstIsEdgeVertexListOfInGraph() {
		return (IsEdgeVertexListOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsEdgeVertexListOf"));
	}

	public IsEdgeVertexListOf getFirstIsEdgeVertexListOfInGraph(boolean noSubClasses) {
		return (IsEdgeVertexListOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsEdgeVertexListOf"), noSubClasses);
	}

	public IsEdgeVertexListOf createIsEdgeVertexListOf(EdgeVertexList alpha, PathSystemConstruction omega) {
		IsEdgeVertexListOf newEdge = (IsEdgeVertexListOf) graphFactory.createEdge(IsEdgeVertexListOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsEdgeVertexListOf createIsEdgeVertexListOf(int id, EdgeVertexList alpha, PathSystemConstruction omega) {
		IsEdgeVertexListOf newEdge = (IsEdgeVertexListOf) graphFactory.createEdge(IsEdgeVertexListOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsElementOf ------------------------

	public IsElementOf getIsElementOf(int id) {
		return (IsElementOf)getEdge(id);
	}

	public IsElementOf getFirstIsElementOfInGraph() {
		return (IsElementOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsElementOf"));
	}

	public IsElementOf getFirstIsElementOfInGraph(boolean noSubClasses) {
		return (IsElementOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsElementOf"), noSubClasses);
	}

	public IsElementOf createIsElementOf(EdgeVertexList alpha, EdgeVertexList omega) {
		IsElementOf newEdge = (IsElementOf) graphFactory.createEdge(IsElementOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsElementOf createIsElementOf(int id, EdgeVertexList alpha, EdgeVertexList omega) {
		IsElementOf newEdge = (IsElementOf) graphFactory.createEdge(IsElementOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsExponentOf ------------------------

	public IsExponentOf getIsExponentOf(int id) {
		return (IsExponentOf)getEdge(id);
	}

	public IsExponentOf getFirstIsExponentOfInGraph() {
		return (IsExponentOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsExponentOf"));
	}

	public IsExponentOf getFirstIsExponentOfInGraph(boolean noSubClasses) {
		return (IsExponentOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsExponentOf"), noSubClasses);
	}

	public IsExponentOf createIsExponentOf(IntLiteral alpha, ExponentiatedPathDescription omega) {
		IsExponentOf newEdge = (IsExponentOf) graphFactory.createEdge(IsExponentOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsExponentOf createIsExponentOf(int id, IntLiteral alpha, ExponentiatedPathDescription omega) {
		IsExponentOf newEdge = (IsExponentOf) graphFactory.createEdge(IsExponentOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsExponentiatedPathOf ------------------------

	public IsExponentiatedPathOf getIsExponentiatedPathOf(int id) {
		return (IsExponentiatedPathOf)getEdge(id);
	}

	public IsExponentiatedPathOf getFirstIsExponentiatedPathOfInGraph() {
		return (IsExponentiatedPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsExponentiatedPathOf"));
	}

	public IsExponentiatedPathOf getFirstIsExponentiatedPathOfInGraph(boolean noSubClasses) {
		return (IsExponentiatedPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsExponentiatedPathOf"), noSubClasses);
	}

	public IsExponentiatedPathOf createIsExponentiatedPathOf(PathDescription alpha, ExponentiatedPathDescription omega) {
		IsExponentiatedPathOf newEdge = (IsExponentiatedPathOf) graphFactory.createEdge(IsExponentiatedPathOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsExponentiatedPathOf createIsExponentiatedPathOf(int id, PathDescription alpha, ExponentiatedPathDescription omega) {
		IsExponentiatedPathOf newEdge = (IsExponentiatedPathOf) graphFactory.createEdge(IsExponentiatedPathOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsExprOf ------------------------

	public IsExprOf getIsExprOf(int id) {
		return (IsExprOf)getEdge(id);
	}

	public IsExprOf getFirstIsExprOfInGraph() {
		return (IsExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsExprOf"));
	}

	public IsExprOf getFirstIsExprOfInGraph(boolean noSubClasses) {
		return (IsExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsExprOf"), noSubClasses);
	}

	public IsExprOf createIsExprOf(Expression alpha, Definition omega) {
		IsExprOf newEdge = (IsExprOf) graphFactory.createEdge(IsExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsExprOf createIsExprOf(int id, Expression alpha, Definition omega) {
		IsExprOf newEdge = (IsExprOf) graphFactory.createEdge(IsExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsFalseExprOf ------------------------

	public IsFalseExprOf getIsFalseExprOf(int id) {
		return (IsFalseExprOf)getEdge(id);
	}

	public IsFalseExprOf getFirstIsFalseExprOfInGraph() {
		return (IsFalseExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsFalseExprOf"));
	}

	public IsFalseExprOf getFirstIsFalseExprOfInGraph(boolean noSubClasses) {
		return (IsFalseExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsFalseExprOf"), noSubClasses);
	}

	public IsFalseExprOf createIsFalseExprOf(Expression alpha, ConditionalExpression omega) {
		IsFalseExprOf newEdge = (IsFalseExprOf) graphFactory.createEdge(IsFalseExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsFalseExprOf createIsFalseExprOf(int id, Expression alpha, ConditionalExpression omega) {
		IsFalseExprOf newEdge = (IsFalseExprOf) graphFactory.createEdge(IsFalseExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsFirstValueOf ------------------------

	public IsFirstValueOf getIsFirstValueOf(int id) {
		return (IsFirstValueOf)getEdge(id);
	}

	public IsFirstValueOf getFirstIsFirstValueOfInGraph() {
		return (IsFirstValueOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsFirstValueOf"));
	}

	public IsFirstValueOf getFirstIsFirstValueOfInGraph(boolean noSubClasses) {
		return (IsFirstValueOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsFirstValueOf"), noSubClasses);
	}

	public IsFirstValueOf createIsFirstValueOf(Expression alpha, ListRangeConstruction omega) {
		IsFirstValueOf newEdge = (IsFirstValueOf) graphFactory.createEdge(IsFirstValueOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsFirstValueOf createIsFirstValueOf(int id, Expression alpha, ListRangeConstruction omega) {
		IsFirstValueOf newEdge = (IsFirstValueOf) graphFactory.createEdge(IsFirstValueOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsFunctionIdOf ------------------------

	public IsFunctionIdOf getIsFunctionIdOf(int id) {
		return (IsFunctionIdOf)getEdge(id);
	}

	public IsFunctionIdOf getFirstIsFunctionIdOfInGraph() {
		return (IsFunctionIdOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsFunctionIdOf"));
	}

	public IsFunctionIdOf getFirstIsFunctionIdOfInGraph(boolean noSubClasses) {
		return (IsFunctionIdOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsFunctionIdOf"), noSubClasses);
	}

	public IsFunctionIdOf createIsFunctionIdOf(FunctionId alpha, FunctionApplication omega) {
		IsFunctionIdOf newEdge = (IsFunctionIdOf) graphFactory.createEdge(IsFunctionIdOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsFunctionIdOf createIsFunctionIdOf(int id, FunctionId alpha, FunctionApplication omega) {
		IsFunctionIdOf newEdge = (IsFunctionIdOf) graphFactory.createEdge(IsFunctionIdOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsGoalRestrOf ------------------------

	public IsGoalRestrOf getIsGoalRestrOf(int id) {
		return (IsGoalRestrOf)getEdge(id);
	}

	public IsGoalRestrOf getFirstIsGoalRestrOfInGraph() {
		return (IsGoalRestrOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsGoalRestrOf"));
	}

	public IsGoalRestrOf getFirstIsGoalRestrOfInGraph(boolean noSubClasses) {
		return (IsGoalRestrOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsGoalRestrOf"), noSubClasses);
	}

	public IsGoalRestrOf createIsGoalRestrOf(Expression alpha, PathDescription omega) {
		IsGoalRestrOf newEdge = (IsGoalRestrOf) graphFactory.createEdge(IsGoalRestrOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsGoalRestrOf createIsGoalRestrOf(int id, Expression alpha, PathDescription omega) {
		IsGoalRestrOf newEdge = (IsGoalRestrOf) graphFactory.createEdge(IsGoalRestrOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsIdOf ------------------------

	public IsIdOf getIsIdOf(int id) {
		return (IsIdOf)getEdge(id);
	}

	public IsIdOf getFirstIsIdOfInGraph() {
		return (IsIdOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsIdOf"));
	}

	public IsIdOf getFirstIsIdOfInGraph(boolean noSubClasses) {
		return (IsIdOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsIdOf"), noSubClasses);
	}

	public IsIdOf createIsIdOf(Identifier alpha, Greql2Expression omega) {
		IsIdOf newEdge = (IsIdOf) graphFactory.createEdge(IsIdOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsIdOf createIsIdOf(int id, Identifier alpha, Greql2Expression omega) {
		IsIdOf newEdge = (IsIdOf) graphFactory.createEdge(IsIdOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsIntermediateVertexOf ------------------------

	public IsIntermediateVertexOf getIsIntermediateVertexOf(int id) {
		return (IsIntermediateVertexOf)getEdge(id);
	}

	public IsIntermediateVertexOf getFirstIsIntermediateVertexOfInGraph() {
		return (IsIntermediateVertexOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsIntermediateVertexOf"));
	}

	public IsIntermediateVertexOf getFirstIsIntermediateVertexOfInGraph(boolean noSubClasses) {
		return (IsIntermediateVertexOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsIntermediateVertexOf"), noSubClasses);
	}

	public IsIntermediateVertexOf createIsIntermediateVertexOf(Expression alpha, IntermediateVertexPathDescription omega) {
		IsIntermediateVertexOf newEdge = (IsIntermediateVertexOf) graphFactory.createEdge(IsIntermediateVertexOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsIntermediateVertexOf createIsIntermediateVertexOf(int id, Expression alpha, IntermediateVertexPathDescription omega) {
		IsIntermediateVertexOf newEdge = (IsIntermediateVertexOf) graphFactory.createEdge(IsIntermediateVertexOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsIteratedPathOf ------------------------

	public IsIteratedPathOf getIsIteratedPathOf(int id) {
		return (IsIteratedPathOf)getEdge(id);
	}

	public IsIteratedPathOf getFirstIsIteratedPathOfInGraph() {
		return (IsIteratedPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsIteratedPathOf"));
	}

	public IsIteratedPathOf getFirstIsIteratedPathOfInGraph(boolean noSubClasses) {
		return (IsIteratedPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsIteratedPathOf"), noSubClasses);
	}

	public IsIteratedPathOf createIsIteratedPathOf(PathDescription alpha, IteratedPathDescription omega) {
		IsIteratedPathOf newEdge = (IsIteratedPathOf) graphFactory.createEdge(IsIteratedPathOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsIteratedPathOf createIsIteratedPathOf(int id, PathDescription alpha, IteratedPathDescription omega) {
		IsIteratedPathOf newEdge = (IsIteratedPathOf) graphFactory.createEdge(IsIteratedPathOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsLastValueOf ------------------------

	public IsLastValueOf getIsLastValueOf(int id) {
		return (IsLastValueOf)getEdge(id);
	}

	public IsLastValueOf getFirstIsLastValueOfInGraph() {
		return (IsLastValueOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsLastValueOf"));
	}

	public IsLastValueOf getFirstIsLastValueOfInGraph(boolean noSubClasses) {
		return (IsLastValueOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsLastValueOf"), noSubClasses);
	}

	public IsLastValueOf createIsLastValueOf(Expression alpha, ListRangeConstruction omega) {
		IsLastValueOf newEdge = (IsLastValueOf) graphFactory.createEdge(IsLastValueOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsLastValueOf createIsLastValueOf(int id, Expression alpha, ListRangeConstruction omega) {
		IsLastValueOf newEdge = (IsLastValueOf) graphFactory.createEdge(IsLastValueOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsLeftSideOf ------------------------

	public IsLeftSideOf getIsLeftSideOf(int id) {
		return (IsLeftSideOf)getEdge(id);
	}

	public IsLeftSideOf getFirstIsLeftSideOfInGraph() {
		return (IsLeftSideOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsLeftSideOf"));
	}

	public IsLeftSideOf getFirstIsLeftSideOfInGraph(boolean noSubClasses) {
		return (IsLeftSideOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsLeftSideOf"), noSubClasses);
	}

	public IsLeftSideOf createIsLeftSideOf(Nonterminal alpha, Production omega) {
		IsLeftSideOf newEdge = (IsLeftSideOf) graphFactory.createEdge(IsLeftSideOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsLeftSideOf createIsLeftSideOf(int id, Nonterminal alpha, Production omega) {
		IsLeftSideOf newEdge = (IsLeftSideOf) graphFactory.createEdge(IsLeftSideOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsNullExprOf ------------------------

	public IsNullExprOf getIsNullExprOf(int id) {
		return (IsNullExprOf)getEdge(id);
	}

	public IsNullExprOf getFirstIsNullExprOfInGraph() {
		return (IsNullExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsNullExprOf"));
	}

	public IsNullExprOf getFirstIsNullExprOfInGraph(boolean noSubClasses) {
		return (IsNullExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsNullExprOf"), noSubClasses);
	}

	public IsNullExprOf createIsNullExprOf(Expression alpha, ConditionalExpression omega) {
		IsNullExprOf newEdge = (IsNullExprOf) graphFactory.createEdge(IsNullExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsNullExprOf createIsNullExprOf(int id, Expression alpha, ConditionalExpression omega) {
		IsNullExprOf newEdge = (IsNullExprOf) graphFactory.createEdge(IsNullExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsOptionalPathOf ------------------------

	public IsOptionalPathOf getIsOptionalPathOf(int id) {
		return (IsOptionalPathOf)getEdge(id);
	}

	public IsOptionalPathOf getFirstIsOptionalPathOfInGraph() {
		return (IsOptionalPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsOptionalPathOf"));
	}

	public IsOptionalPathOf getFirstIsOptionalPathOfInGraph(boolean noSubClasses) {
		return (IsOptionalPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsOptionalPathOf"), noSubClasses);
	}

	public IsOptionalPathOf createIsOptionalPathOf(PathDescription alpha, OptionalPathDescription omega) {
		IsOptionalPathOf newEdge = (IsOptionalPathOf) graphFactory.createEdge(IsOptionalPathOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsOptionalPathOf createIsOptionalPathOf(int id, PathDescription alpha, OptionalPathDescription omega) {
		IsOptionalPathOf newEdge = (IsOptionalPathOf) graphFactory.createEdge(IsOptionalPathOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsPartOf ------------------------

	public IsPartOf getIsPartOf(int id) {
		return (IsPartOf)getEdge(id);
	}

	public IsPartOf getFirstIsPartOfInGraph() {
		return (IsPartOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsPartOf"));
	}

	public IsPartOf getFirstIsPartOfInGraph(boolean noSubClasses) {
		return (IsPartOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsPartOf"), noSubClasses);
	}

	public IsPartOf createIsPartOf(Expression alpha, ValueConstruction omega) {
		IsPartOf newEdge = (IsPartOf) graphFactory.createEdge(IsPartOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsPartOf createIsPartOf(int id, Expression alpha, ValueConstruction omega) {
		IsPartOf newEdge = (IsPartOf) graphFactory.createEdge(IsPartOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsPathDescriptionOf ------------------------

	public IsPathDescriptionOf getIsPathDescriptionOf(int id) {
		return (IsPathDescriptionOf)getEdge(id);
	}

	public IsPathDescriptionOf getFirstIsPathDescriptionOfInGraph() {
		return (IsPathDescriptionOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsPathDescriptionOf"));
	}

	// ------------------------ Code for IsPathOf ------------------------

	public IsPathOf getIsPathOf(int id) {
		return (IsPathOf)getEdge(id);
	}

	public IsPathOf getFirstIsPathOfInGraph() {
		return (IsPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsPathOf"));
	}

	public IsPathOf getFirstIsPathOfInGraph(boolean noSubClasses) {
		return (IsPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsPathOf"), noSubClasses);
	}

	public IsPathOf createIsPathOf(Expression alpha, PathExpression omega) {
		IsPathOf newEdge = (IsPathOf) graphFactory.createEdge(IsPathOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsPathOf createIsPathOf(int id, Expression alpha, PathExpression omega) {
		IsPathOf newEdge = (IsPathOf) graphFactory.createEdge(IsPathOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsProductionOf ------------------------

	public IsProductionOf getIsProductionOf(int id) {
		return (IsProductionOf)getEdge(id);
	}

	public IsProductionOf getFirstIsProductionOfInGraph() {
		return (IsProductionOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsProductionOf"));
	}

	public IsProductionOf getFirstIsProductionOfInGraph(boolean noSubClasses) {
		return (IsProductionOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsProductionOf"), noSubClasses);
	}

	public IsProductionOf createIsProductionOf(Production alpha, CfGrammar omega) {
		IsProductionOf newEdge = (IsProductionOf) graphFactory.createEdge(IsProductionOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsProductionOf createIsProductionOf(int id, Production alpha, CfGrammar omega) {
		IsProductionOf newEdge = (IsProductionOf) graphFactory.createEdge(IsProductionOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsQuantifiedDeclOf ------------------------

	public IsQuantifiedDeclOf getIsQuantifiedDeclOf(int id) {
		return (IsQuantifiedDeclOf)getEdge(id);
	}

	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOfInGraph() {
		return (IsQuantifiedDeclOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsQuantifiedDeclOf"));
	}

	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOfInGraph(boolean noSubClasses) {
		return (IsQuantifiedDeclOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsQuantifiedDeclOf"), noSubClasses);
	}

	public IsQuantifiedDeclOf createIsQuantifiedDeclOf(Declaration alpha, QuantifiedExpression omega) {
		IsQuantifiedDeclOf newEdge = (IsQuantifiedDeclOf) graphFactory.createEdge(IsQuantifiedDeclOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsQuantifiedDeclOf createIsQuantifiedDeclOf(int id, Declaration alpha, QuantifiedExpression omega) {
		IsQuantifiedDeclOf newEdge = (IsQuantifiedDeclOf) graphFactory.createEdge(IsQuantifiedDeclOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsQuantifierOf ------------------------

	public IsQuantifierOf getIsQuantifierOf(int id) {
		return (IsQuantifierOf)getEdge(id);
	}

	public IsQuantifierOf getFirstIsQuantifierOfInGraph() {
		return (IsQuantifierOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsQuantifierOf"));
	}

	public IsQuantifierOf getFirstIsQuantifierOfInGraph(boolean noSubClasses) {
		return (IsQuantifierOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsQuantifierOf"), noSubClasses);
	}

	public IsQuantifierOf createIsQuantifierOf(Quantifier alpha, QuantifiedExpression omega) {
		IsQuantifierOf newEdge = (IsQuantifierOf) graphFactory.createEdge(IsQuantifierOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsQuantifierOf createIsQuantifierOf(int id, Quantifier alpha, QuantifiedExpression omega) {
		IsQuantifierOf newEdge = (IsQuantifierOf) graphFactory.createEdge(IsQuantifierOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsQueryExprOf ------------------------

	public IsQueryExprOf getIsQueryExprOf(int id) {
		return (IsQueryExprOf)getEdge(id);
	}

	public IsQueryExprOf getFirstIsQueryExprOfInGraph() {
		return (IsQueryExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsQueryExprOf"));
	}

	public IsQueryExprOf getFirstIsQueryExprOfInGraph(boolean noSubClasses) {
		return (IsQueryExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsQueryExprOf"), noSubClasses);
	}

	public IsQueryExprOf createIsQueryExprOf(Expression alpha, Greql2Expression omega) {
		IsQueryExprOf newEdge = (IsQueryExprOf) graphFactory.createEdge(IsQueryExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsQueryExprOf createIsQueryExprOf(int id, Expression alpha, Greql2Expression omega) {
		IsQueryExprOf newEdge = (IsQueryExprOf) graphFactory.createEdge(IsQueryExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsRecordElementOf ------------------------

	public IsRecordElementOf getIsRecordElementOf(int id) {
		return (IsRecordElementOf)getEdge(id);
	}

	public IsRecordElementOf getFirstIsRecordElementOfInGraph() {
		return (IsRecordElementOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRecordElementOf"));
	}

	public IsRecordElementOf getFirstIsRecordElementOfInGraph(boolean noSubClasses) {
		return (IsRecordElementOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRecordElementOf"), noSubClasses);
	}

	public IsRecordElementOf createIsRecordElementOf(RecordElement alpha, RecordConstruction omega) {
		IsRecordElementOf newEdge = (IsRecordElementOf) graphFactory.createEdge(IsRecordElementOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsRecordElementOf createIsRecordElementOf(int id, RecordElement alpha, RecordConstruction omega) {
		IsRecordElementOf newEdge = (IsRecordElementOf) graphFactory.createEdge(IsRecordElementOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsRecordExprOf ------------------------

	public IsRecordExprOf getIsRecordExprOf(int id) {
		return (IsRecordExprOf)getEdge(id);
	}

	public IsRecordExprOf getFirstIsRecordExprOfInGraph() {
		return (IsRecordExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRecordExprOf"));
	}

	public IsRecordExprOf getFirstIsRecordExprOfInGraph(boolean noSubClasses) {
		return (IsRecordExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRecordExprOf"), noSubClasses);
	}

	public IsRecordExprOf createIsRecordExprOf(Expression alpha, RecordElement omega) {
		IsRecordExprOf newEdge = (IsRecordExprOf) graphFactory.createEdge(IsRecordExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsRecordExprOf createIsRecordExprOf(int id, Expression alpha, RecordElement omega) {
		IsRecordExprOf newEdge = (IsRecordExprOf) graphFactory.createEdge(IsRecordExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsRecordIdOf ------------------------

	public IsRecordIdOf getIsRecordIdOf(int id) {
		return (IsRecordIdOf)getEdge(id);
	}

	public IsRecordIdOf getFirstIsRecordIdOfInGraph() {
		return (IsRecordIdOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRecordIdOf"));
	}

	public IsRecordIdOf getFirstIsRecordIdOfInGraph(boolean noSubClasses) {
		return (IsRecordIdOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRecordIdOf"), noSubClasses);
	}

	public IsRecordIdOf createIsRecordIdOf(RecordId alpha, RecordElement omega) {
		IsRecordIdOf newEdge = (IsRecordIdOf) graphFactory.createEdge(IsRecordIdOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsRecordIdOf createIsRecordIdOf(int id, RecordId alpha, RecordElement omega) {
		IsRecordIdOf newEdge = (IsRecordIdOf) graphFactory.createEdge(IsRecordIdOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsRestrictedExprOf ------------------------

	public IsRestrictedExprOf getIsRestrictedExprOf(int id) {
		return (IsRestrictedExprOf)getEdge(id);
	}

	public IsRestrictedExprOf getFirstIsRestrictedExprOfInGraph() {
		return (IsRestrictedExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRestrictedExprOf"));
	}

	public IsRestrictedExprOf getFirstIsRestrictedExprOfInGraph(boolean noSubClasses) {
		return (IsRestrictedExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRestrictedExprOf"), noSubClasses);
	}

	public IsRestrictedExprOf createIsRestrictedExprOf(Expression alpha, RestrictedExpression omega) {
		IsRestrictedExprOf newEdge = (IsRestrictedExprOf) graphFactory.createEdge(IsRestrictedExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsRestrictedExprOf createIsRestrictedExprOf(int id, Expression alpha, RestrictedExpression omega) {
		IsRestrictedExprOf newEdge = (IsRestrictedExprOf) graphFactory.createEdge(IsRestrictedExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsRestrictionOf ------------------------

	public IsRestrictionOf getIsRestrictionOf(int id) {
		return (IsRestrictionOf)getEdge(id);
	}

	public IsRestrictionOf getFirstIsRestrictionOfInGraph() {
		return (IsRestrictionOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRestrictionOf"));
	}

	public IsRestrictionOf getFirstIsRestrictionOfInGraph(boolean noSubClasses) {
		return (IsRestrictionOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRestrictionOf"), noSubClasses);
	}

	public IsRestrictionOf createIsRestrictionOf(Expression alpha, RestrictedExpression omega) {
		IsRestrictionOf newEdge = (IsRestrictionOf) graphFactory.createEdge(IsRestrictionOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsRestrictionOf createIsRestrictionOf(int id, Expression alpha, RestrictedExpression omega) {
		IsRestrictionOf newEdge = (IsRestrictionOf) graphFactory.createEdge(IsRestrictionOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsRightSideOf ------------------------

	public IsRightSideOf getIsRightSideOf(int id) {
		return (IsRightSideOf)getEdge(id);
	}

	public IsRightSideOf getFirstIsRightSideOfInGraph() {
		return (IsRightSideOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRightSideOf"));
	}

	public IsRightSideOf getFirstIsRightSideOfInGraph(boolean noSubClasses) {
		return (IsRightSideOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRightSideOf"), noSubClasses);
	}

	public IsRightSideOf createIsRightSideOf(RightSide alpha, Production omega) {
		IsRightSideOf newEdge = (IsRightSideOf) graphFactory.createEdge(IsRightSideOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsRightSideOf createIsRightSideOf(int id, RightSide alpha, Production omega) {
		IsRightSideOf newEdge = (IsRightSideOf) graphFactory.createEdge(IsRightSideOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsRoleIdOf ------------------------

	public IsRoleIdOf getIsRoleIdOf(int id) {
		return (IsRoleIdOf)getEdge(id);
	}

	public IsRoleIdOf getFirstIsRoleIdOfInGraph() {
		return (IsRoleIdOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRoleIdOf"));
	}

	public IsRoleIdOf getFirstIsRoleIdOfInGraph(boolean noSubClasses) {
		return (IsRoleIdOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRoleIdOf"), noSubClasses);
	}

	public IsRoleIdOf createIsRoleIdOf(RoleId alpha, EdgeRestriction omega) {
		IsRoleIdOf newEdge = (IsRoleIdOf) graphFactory.createEdge(IsRoleIdOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsRoleIdOf createIsRoleIdOf(int id, RoleId alpha, EdgeRestriction omega) {
		IsRoleIdOf newEdge = (IsRoleIdOf) graphFactory.createEdge(IsRoleIdOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsRootOf ------------------------

	public IsRootOf getIsRootOf(int id) {
		return (IsRootOf)getEdge(id);
	}

	public IsRootOf getFirstIsRootOfInGraph() {
		return (IsRootOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRootOf"));
	}

	public IsRootOf getFirstIsRootOfInGraph(boolean noSubClasses) {
		return (IsRootOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRootOf"), noSubClasses);
	}

	public IsRootOf createIsRootOf(Expression alpha, PathSystemConstruction omega) {
		IsRootOf newEdge = (IsRootOf) graphFactory.createEdge(IsRootOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsRootOf createIsRootOf(int id, Expression alpha, PathSystemConstruction omega) {
		IsRootOf newEdge = (IsRootOf) graphFactory.createEdge(IsRootOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsRowHeaderExprOf ------------------------

	public IsRowHeaderExprOf getIsRowHeaderExprOf(int id) {
		return (IsRowHeaderExprOf)getEdge(id);
	}

	public IsRowHeaderExprOf getFirstIsRowHeaderExprOfInGraph() {
		return (IsRowHeaderExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRowHeaderExprOf"));
	}

	public IsRowHeaderExprOf getFirstIsRowHeaderExprOfInGraph(boolean noSubClasses) {
		return (IsRowHeaderExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsRowHeaderExprOf"), noSubClasses);
	}

	public IsRowHeaderExprOf createIsRowHeaderExprOf(Expression alpha, TableComprehension omega) {
		IsRowHeaderExprOf newEdge = (IsRowHeaderExprOf) graphFactory.createEdge(IsRowHeaderExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsRowHeaderExprOf createIsRowHeaderExprOf(int id, Expression alpha, TableComprehension omega) {
		IsRowHeaderExprOf newEdge = (IsRowHeaderExprOf) graphFactory.createEdge(IsRowHeaderExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsSequenceElementOf ------------------------

	public IsSequenceElementOf getIsSequenceElementOf(int id) {
		return (IsSequenceElementOf)getEdge(id);
	}

	public IsSequenceElementOf getFirstIsSequenceElementOfInGraph() {
		return (IsSequenceElementOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSequenceElementOf"));
	}

	public IsSequenceElementOf getFirstIsSequenceElementOfInGraph(boolean noSubClasses) {
		return (IsSequenceElementOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSequenceElementOf"), noSubClasses);
	}

	public IsSequenceElementOf createIsSequenceElementOf(PathDescription alpha, SequentialPathDescription omega) {
		IsSequenceElementOf newEdge = (IsSequenceElementOf) graphFactory.createEdge(IsSequenceElementOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsSequenceElementOf createIsSequenceElementOf(int id, PathDescription alpha, SequentialPathDescription omega) {
		IsSequenceElementOf newEdge = (IsSequenceElementOf) graphFactory.createEdge(IsSequenceElementOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsSimpleDeclOf ------------------------

	public IsSimpleDeclOf getIsSimpleDeclOf(int id) {
		return (IsSimpleDeclOf)getEdge(id);
	}

	public IsSimpleDeclOf getFirstIsSimpleDeclOfInGraph() {
		return (IsSimpleDeclOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSimpleDeclOf"));
	}

	public IsSimpleDeclOf getFirstIsSimpleDeclOfInGraph(boolean noSubClasses) {
		return (IsSimpleDeclOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSimpleDeclOf"), noSubClasses);
	}

	public IsSimpleDeclOf createIsSimpleDeclOf(SimpleDeclaration alpha, Declaration omega) {
		IsSimpleDeclOf newEdge = (IsSimpleDeclOf) graphFactory.createEdge(IsSimpleDeclOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsSimpleDeclOf createIsSimpleDeclOf(int id, SimpleDeclaration alpha, Declaration omega) {
		IsSimpleDeclOf newEdge = (IsSimpleDeclOf) graphFactory.createEdge(IsSimpleDeclOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsStartExprOf ------------------------

	public IsStartExprOf getIsStartExprOf(int id) {
		return (IsStartExprOf)getEdge(id);
	}

	public IsStartExprOf getFirstIsStartExprOfInGraph() {
		return (IsStartExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsStartExprOf"));
	}

	public IsStartExprOf getFirstIsStartExprOfInGraph(boolean noSubClasses) {
		return (IsStartExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsStartExprOf"), noSubClasses);
	}

	public IsStartExprOf createIsStartExprOf(Expression alpha, PathExpression omega) {
		IsStartExprOf newEdge = (IsStartExprOf) graphFactory.createEdge(IsStartExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsStartExprOf createIsStartExprOf(int id, Expression alpha, PathExpression omega) {
		IsStartExprOf newEdge = (IsStartExprOf) graphFactory.createEdge(IsStartExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsStartRestrOf ------------------------

	public IsStartRestrOf getIsStartRestrOf(int id) {
		return (IsStartRestrOf)getEdge(id);
	}

	public IsStartRestrOf getFirstIsStartRestrOfInGraph() {
		return (IsStartRestrOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsStartRestrOf"));
	}

	public IsStartRestrOf getFirstIsStartRestrOfInGraph(boolean noSubClasses) {
		return (IsStartRestrOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsStartRestrOf"), noSubClasses);
	}

	public IsStartRestrOf createIsStartRestrOf(Expression alpha, PathDescription omega) {
		IsStartRestrOf newEdge = (IsStartRestrOf) graphFactory.createEdge(IsStartRestrOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsStartRestrOf createIsStartRestrOf(int id, Expression alpha, PathDescription omega) {
		IsStartRestrOf newEdge = (IsStartRestrOf) graphFactory.createEdge(IsStartRestrOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsSubPathOf ------------------------

	public IsSubPathOf getIsSubPathOf(int id) {
		return (IsSubPathOf)getEdge(id);
	}

	public IsSubPathOf getFirstIsSubPathOfInGraph() {
		return (IsSubPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSubPathOf"));
	}

	public IsSubPathOf getFirstIsSubPathOfInGraph(boolean noSubClasses) {
		return (IsSubPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSubPathOf"), noSubClasses);
	}

	public IsSubPathOf createIsSubPathOf(PathDescription alpha, IntermediateVertexPathDescription omega) {
		IsSubPathOf newEdge = (IsSubPathOf) graphFactory.createEdge(IsSubPathOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsSubPathOf createIsSubPathOf(int id, PathDescription alpha, IntermediateVertexPathDescription omega) {
		IsSubPathOf newEdge = (IsSubPathOf) graphFactory.createEdge(IsSubPathOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsSubgraphOf ------------------------

	public IsSubgraphOf getIsSubgraphOf(int id) {
		return (IsSubgraphOf)getEdge(id);
	}

	public IsSubgraphOf getFirstIsSubgraphOfInGraph() {
		return (IsSubgraphOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSubgraphOf"));
	}

	public IsSubgraphOf getFirstIsSubgraphOfInGraph(boolean noSubClasses) {
		return (IsSubgraphOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSubgraphOf"), noSubClasses);
	}

	public IsSubgraphOf createIsSubgraphOf(Expression alpha, Declaration omega) {
		IsSubgraphOf newEdge = (IsSubgraphOf) graphFactory.createEdge(IsSubgraphOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsSubgraphOf createIsSubgraphOf(int id, Expression alpha, Declaration omega) {
		IsSubgraphOf newEdge = (IsSubgraphOf) graphFactory.createEdge(IsSubgraphOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsSymbolOf ------------------------

	public IsSymbolOf getIsSymbolOf(int id) {
		return (IsSymbolOf)getEdge(id);
	}

	public IsSymbolOf getFirstIsSymbolOfInGraph() {
		return (IsSymbolOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSymbolOf"));
	}

	public IsSymbolOf getFirstIsSymbolOfInGraph(boolean noSubClasses) {
		return (IsSymbolOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSymbolOf"), noSubClasses);
	}

	public IsSymbolOf createIsSymbolOf(Symbol alpha, RightSide omega) {
		IsSymbolOf newEdge = (IsSymbolOf) graphFactory.createEdge(IsSymbolOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsSymbolOf createIsSymbolOf(int id, Symbol alpha, RightSide omega) {
		IsSymbolOf newEdge = (IsSymbolOf) graphFactory.createEdge(IsSymbolOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsTableHeaderOf ------------------------

	public IsTableHeaderOf getIsTableHeaderOf(int id) {
		return (IsTableHeaderOf)getEdge(id);
	}

	public IsTableHeaderOf getFirstIsTableHeaderOfInGraph() {
		return (IsTableHeaderOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTableHeaderOf"));
	}

	public IsTableHeaderOf getFirstIsTableHeaderOfInGraph(boolean noSubClasses) {
		return (IsTableHeaderOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTableHeaderOf"), noSubClasses);
	}

	public IsTableHeaderOf createIsTableHeaderOf(Expression alpha, ComprehensionWithTableHeader omega) {
		IsTableHeaderOf newEdge = (IsTableHeaderOf) graphFactory.createEdge(IsTableHeaderOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsTableHeaderOf createIsTableHeaderOf(int id, Expression alpha, ComprehensionWithTableHeader omega) {
		IsTableHeaderOf newEdge = (IsTableHeaderOf) graphFactory.createEdge(IsTableHeaderOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsTargetExprOf ------------------------

	public IsTargetExprOf getIsTargetExprOf(int id) {
		return (IsTargetExprOf)getEdge(id);
	}

	public IsTargetExprOf getFirstIsTargetExprOfInGraph() {
		return (IsTargetExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTargetExprOf"));
	}

	public IsTargetExprOf getFirstIsTargetExprOfInGraph(boolean noSubClasses) {
		return (IsTargetExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTargetExprOf"), noSubClasses);
	}

	public IsTargetExprOf createIsTargetExprOf(Expression alpha, PathExpression omega) {
		IsTargetExprOf newEdge = (IsTargetExprOf) graphFactory.createEdge(IsTargetExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsTargetExprOf createIsTargetExprOf(int id, Expression alpha, PathExpression omega) {
		IsTargetExprOf newEdge = (IsTargetExprOf) graphFactory.createEdge(IsTargetExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsTransposedPathOf ------------------------

	public IsTransposedPathOf getIsTransposedPathOf(int id) {
		return (IsTransposedPathOf)getEdge(id);
	}

	public IsTransposedPathOf getFirstIsTransposedPathOfInGraph() {
		return (IsTransposedPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTransposedPathOf"));
	}

	public IsTransposedPathOf getFirstIsTransposedPathOfInGraph(boolean noSubClasses) {
		return (IsTransposedPathOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTransposedPathOf"), noSubClasses);
	}

	public IsTransposedPathOf createIsTransposedPathOf(PathDescription alpha, TransposedPathDescription omega) {
		IsTransposedPathOf newEdge = (IsTransposedPathOf) graphFactory.createEdge(IsTransposedPathOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsTransposedPathOf createIsTransposedPathOf(int id, PathDescription alpha, TransposedPathDescription omega) {
		IsTransposedPathOf newEdge = (IsTransposedPathOf) graphFactory.createEdge(IsTransposedPathOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsTrueExprOf ------------------------

	public IsTrueExprOf getIsTrueExprOf(int id) {
		return (IsTrueExprOf)getEdge(id);
	}

	public IsTrueExprOf getFirstIsTrueExprOfInGraph() {
		return (IsTrueExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTrueExprOf"));
	}

	public IsTrueExprOf getFirstIsTrueExprOfInGraph(boolean noSubClasses) {
		return (IsTrueExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTrueExprOf"), noSubClasses);
	}

	public IsTrueExprOf createIsTrueExprOf(Expression alpha, ConditionalExpression omega) {
		IsTrueExprOf newEdge = (IsTrueExprOf) graphFactory.createEdge(IsTrueExprOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsTrueExprOf createIsTrueExprOf(int id, Expression alpha, ConditionalExpression omega) {
		IsTrueExprOf newEdge = (IsTrueExprOf) graphFactory.createEdge(IsTrueExprOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsTypeExprOf ------------------------

	public IsTypeExprOf getIsTypeExprOf(int id) {
		return (IsTypeExprOf)getEdge(id);
	}

	public IsTypeExprOf getFirstIsTypeExprOfInGraph() {
		return (IsTypeExprOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTypeExprOf"));
	}

	// ------------------------ Code for IsTypeExprOfDeclaration ------------------------

	public IsTypeExprOfDeclaration getIsTypeExprOfDeclaration(int id) {
		return (IsTypeExprOfDeclaration)getEdge(id);
	}

	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclarationInGraph() {
		return (IsTypeExprOfDeclaration)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTypeExprOfDeclaration"));
	}

	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclarationInGraph(boolean noSubClasses) {
		return (IsTypeExprOfDeclaration)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTypeExprOfDeclaration"), noSubClasses);
	}

	public IsTypeExprOfDeclaration createIsTypeExprOfDeclaration(Expression alpha, SimpleDeclaration omega) {
		IsTypeExprOfDeclaration newEdge = (IsTypeExprOfDeclaration) graphFactory.createEdge(IsTypeExprOfDeclaration.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsTypeExprOfDeclaration createIsTypeExprOfDeclaration(int id, Expression alpha, SimpleDeclaration omega) {
		IsTypeExprOfDeclaration newEdge = (IsTypeExprOfDeclaration) graphFactory.createEdge(IsTypeExprOfDeclaration.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsTypeExprOfFunction ------------------------

	public IsTypeExprOfFunction getIsTypeExprOfFunction(int id) {
		return (IsTypeExprOfFunction)getEdge(id);
	}

	public IsTypeExprOfFunction getFirstIsTypeExprOfFunctionInGraph() {
		return (IsTypeExprOfFunction)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTypeExprOfFunction"));
	}

	public IsTypeExprOfFunction getFirstIsTypeExprOfFunctionInGraph(boolean noSubClasses) {
		return (IsTypeExprOfFunction)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTypeExprOfFunction"), noSubClasses);
	}

	public IsTypeExprOfFunction createIsTypeExprOfFunction(Expression alpha, FunctionApplication omega) {
		IsTypeExprOfFunction newEdge = (IsTypeExprOfFunction) graphFactory.createEdge(IsTypeExprOfFunction.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsTypeExprOfFunction createIsTypeExprOfFunction(int id, Expression alpha, FunctionApplication omega) {
		IsTypeExprOfFunction newEdge = (IsTypeExprOfFunction) graphFactory.createEdge(IsTypeExprOfFunction.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsTypeIdOf ------------------------

	public IsTypeIdOf getIsTypeIdOf(int id) {
		return (IsTypeIdOf)getEdge(id);
	}

	public IsTypeIdOf getFirstIsTypeIdOfInGraph() {
		return (IsTypeIdOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTypeIdOf"));
	}

	public IsTypeIdOf getFirstIsTypeIdOfInGraph(boolean noSubClasses) {
		return (IsTypeIdOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTypeIdOf"), noSubClasses);
	}

	public IsTypeIdOf createIsTypeIdOf(TypeId alpha, EdgeRestriction omega) {
		IsTypeIdOf newEdge = (IsTypeIdOf) graphFactory.createEdge(IsTypeIdOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsTypeIdOf createIsTypeIdOf(int id, TypeId alpha, EdgeRestriction omega) {
		IsTypeIdOf newEdge = (IsTypeIdOf) graphFactory.createEdge(IsTypeIdOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsTypeRestrOf ------------------------

	public IsTypeRestrOf getIsTypeRestrOf(int id) {
		return (IsTypeRestrOf)getEdge(id);
	}

	public IsTypeRestrOf getFirstIsTypeRestrOfInGraph() {
		return (IsTypeRestrOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTypeRestrOf"));
	}

	public IsTypeRestrOf getFirstIsTypeRestrOfInGraph(boolean noSubClasses) {
		return (IsTypeRestrOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsTypeRestrOf"), noSubClasses);
	}

	public IsTypeRestrOf createIsTypeRestrOf(TypeId alpha, Expression omega) {
		IsTypeRestrOf newEdge = (IsTypeRestrOf) graphFactory.createEdge(IsTypeRestrOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsTypeRestrOf createIsTypeRestrOf(int id, TypeId alpha, Expression omega) {
		IsTypeRestrOf newEdge = (IsTypeRestrOf) graphFactory.createEdge(IsTypeRestrOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsVarOf ------------------------

	public IsVarOf getIsVarOf(int id) {
		return (IsVarOf)getEdge(id);
	}

	public IsVarOf getFirstIsVarOfInGraph() {
		return (IsVarOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsVarOf"));
	}

	public IsVarOf getFirstIsVarOfInGraph(boolean noSubClasses) {
		return (IsVarOf)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsVarOf"), noSubClasses);
	}

	public IsVarOf createIsVarOf(Variable alpha, Definition omega) {
		IsVarOf newEdge = (IsVarOf) graphFactory.createEdge(IsVarOf.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsVarOf createIsVarOf(int id, Variable alpha, Definition omega) {
		IsVarOf newEdge = (IsVarOf) graphFactory.createEdge(IsVarOf.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IteratedPathDescription ------------------------

	public IteratedPathDescription getIteratedPathDescription(int id) {
		return (IteratedPathDescription)getVertex(id);
	}

	public IteratedPathDescription getFirstIteratedPathDescription() {
		return (IteratedPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("IteratedPathDescription"));
	}

	public IteratedPathDescription getFirstIteratedPathDescription(boolean noSubClasses) {
		return (IteratedPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("IteratedPathDescription"), noSubClasses);
	}

	public IteratedPathDescription createIteratedPathDescription() {
		IteratedPathDescription newVertex = (IteratedPathDescription) graphFactory.createVertex(IteratedPathDescription.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public IteratedPathDescription createIteratedPathDescription(int id) {
		IteratedPathDescription newVertex = (IteratedPathDescription) graphFactory.createVertex(IteratedPathDescription.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for LetExpression ------------------------

	public LetExpression getLetExpression(int id) {
		return (LetExpression)getVertex(id);
	}

	public LetExpression getFirstLetExpression() {
		return (LetExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("LetExpression"));
	}

	public LetExpression getFirstLetExpression(boolean noSubClasses) {
		return (LetExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("LetExpression"), noSubClasses);
	}

	public LetExpression createLetExpression() {
		LetExpression newVertex = (LetExpression) graphFactory.createVertex(LetExpression.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public LetExpression createLetExpression(int id) {
		LetExpression newVertex = (LetExpression) graphFactory.createVertex(LetExpression.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for ListConstruction ------------------------

	public ListConstruction getListConstruction(int id) {
		return (ListConstruction)getVertex(id);
	}

	public ListConstruction getFirstListConstruction() {
		return (ListConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ListConstruction"));
	}

	public ListConstruction getFirstListConstruction(boolean noSubClasses) {
		return (ListConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ListConstruction"), noSubClasses);
	}

	public ListConstruction createListConstruction() {
		ListConstruction newVertex = (ListConstruction) graphFactory.createVertex(ListConstruction.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public ListConstruction createListConstruction(int id) {
		ListConstruction newVertex = (ListConstruction) graphFactory.createVertex(ListConstruction.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for ListRangeConstruction ------------------------

	public ListRangeConstruction getListRangeConstruction(int id) {
		return (ListRangeConstruction)getVertex(id);
	}

	public ListRangeConstruction getFirstListRangeConstruction() {
		return (ListRangeConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ListRangeConstruction"));
	}

	public ListRangeConstruction getFirstListRangeConstruction(boolean noSubClasses) {
		return (ListRangeConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ListRangeConstruction"), noSubClasses);
	}

	public ListRangeConstruction createListRangeConstruction() {
		ListRangeConstruction newVertex = (ListRangeConstruction) graphFactory.createVertex(ListRangeConstruction.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public ListRangeConstruction createListRangeConstruction(int id) {
		ListRangeConstruction newVertex = (ListRangeConstruction) graphFactory.createVertex(ListRangeConstruction.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for Literal ------------------------

	public Literal getLiteral(int id) {
		return (Literal)getVertex(id);
	}

	public Literal getFirstLiteral() {
		return (Literal)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Literal"));
	}

	public Literal getFirstLiteral(boolean noSubClasses) {
		return (Literal)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Literal"), noSubClasses);
	}

	public Literal createLiteral() {
		Literal newVertex = (Literal) graphFactory.createVertex(Literal.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Literal createLiteral(int id) {
		Literal newVertex = (Literal) graphFactory.createVertex(Literal.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for Nonterminal ------------------------

	public Nonterminal getNonterminal(int id) {
		return (Nonterminal)getVertex(id);
	}

	public Nonterminal getFirstNonterminal() {
		return (Nonterminal)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Nonterminal"));
	}

	public Nonterminal getFirstNonterminal(boolean noSubClasses) {
		return (Nonterminal)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Nonterminal"), noSubClasses);
	}

	public Nonterminal createNonterminal() {
		Nonterminal newVertex = (Nonterminal) graphFactory.createVertex(Nonterminal.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Nonterminal createNonterminal(int id) {
		Nonterminal newVertex = (Nonterminal) graphFactory.createVertex(Nonterminal.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for NullLiteral ------------------------

	public NullLiteral getNullLiteral(int id) {
		return (NullLiteral)getVertex(id);
	}

	public NullLiteral getFirstNullLiteral() {
		return (NullLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("NullLiteral"));
	}

	public NullLiteral getFirstNullLiteral(boolean noSubClasses) {
		return (NullLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("NullLiteral"), noSubClasses);
	}

	public NullLiteral createNullLiteral() {
		NullLiteral newVertex = (NullLiteral) graphFactory.createVertex(NullLiteral.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public NullLiteral createNullLiteral(int id) {
		NullLiteral newVertex = (NullLiteral) graphFactory.createVertex(NullLiteral.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for OptionalPathDescription ------------------------

	public OptionalPathDescription getOptionalPathDescription(int id) {
		return (OptionalPathDescription)getVertex(id);
	}

	public OptionalPathDescription getFirstOptionalPathDescription() {
		return (OptionalPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("OptionalPathDescription"));
	}

	public OptionalPathDescription getFirstOptionalPathDescription(boolean noSubClasses) {
		return (OptionalPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("OptionalPathDescription"), noSubClasses);
	}

	public OptionalPathDescription createOptionalPathDescription() {
		OptionalPathDescription newVertex = (OptionalPathDescription) graphFactory.createVertex(OptionalPathDescription.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public OptionalPathDescription createOptionalPathDescription(int id) {
		OptionalPathDescription newVertex = (OptionalPathDescription) graphFactory.createVertex(OptionalPathDescription.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for PathConstruction ------------------------

	public PathConstruction getPathConstruction(int id) {
		return (PathConstruction)getVertex(id);
	}

	public PathConstruction getFirstPathConstruction() {
		return (PathConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("PathConstruction"));
	}

	public PathConstruction getFirstPathConstruction(boolean noSubClasses) {
		return (PathConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("PathConstruction"), noSubClasses);
	}

	public PathConstruction createPathConstruction() {
		PathConstruction newVertex = (PathConstruction) graphFactory.createVertex(PathConstruction.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public PathConstruction createPathConstruction(int id) {
		PathConstruction newVertex = (PathConstruction) graphFactory.createVertex(PathConstruction.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for PathDescription ------------------------

	public PathDescription getPathDescription(int id) {
		return (PathDescription)getVertex(id);
	}

	public PathDescription getFirstPathDescription() {
		return (PathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("PathDescription"));
	}

	// ------------------------ Code for PathExistence ------------------------

	public PathExistence getPathExistence(int id) {
		return (PathExistence)getVertex(id);
	}

	public PathExistence getFirstPathExistence() {
		return (PathExistence)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("PathExistence"));
	}

	public PathExistence getFirstPathExistence(boolean noSubClasses) {
		return (PathExistence)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("PathExistence"), noSubClasses);
	}

	public PathExistence createPathExistence() {
		PathExistence newVertex = (PathExistence) graphFactory.createVertex(PathExistence.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public PathExistence createPathExistence(int id) {
		PathExistence newVertex = (PathExistence) graphFactory.createVertex(PathExistence.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for PathExpression ------------------------

	public PathExpression getPathExpression(int id) {
		return (PathExpression)getVertex(id);
	}

	public PathExpression getFirstPathExpression() {
		return (PathExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("PathExpression"));
	}

	// ------------------------ Code for PathSystemConstruction ------------------------

	public PathSystemConstruction getPathSystemConstruction(int id) {
		return (PathSystemConstruction)getVertex(id);
	}

	public PathSystemConstruction getFirstPathSystemConstruction() {
		return (PathSystemConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("PathSystemConstruction"));
	}

	public PathSystemConstruction getFirstPathSystemConstruction(boolean noSubClasses) {
		return (PathSystemConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("PathSystemConstruction"), noSubClasses);
	}

	public PathSystemConstruction createPathSystemConstruction() {
		PathSystemConstruction newVertex = (PathSystemConstruction) graphFactory.createVertex(PathSystemConstruction.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public PathSystemConstruction createPathSystemConstruction(int id) {
		PathSystemConstruction newVertex = (PathSystemConstruction) graphFactory.createVertex(PathSystemConstruction.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for PrimaryPathDescription ------------------------

	public PrimaryPathDescription getPrimaryPathDescription(int id) {
		return (PrimaryPathDescription)getVertex(id);
	}

	public PrimaryPathDescription getFirstPrimaryPathDescription() {
		return (PrimaryPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("PrimaryPathDescription"));
	}

	// ------------------------ Code for Production ------------------------

	public Production getProduction(int id) {
		return (Production)getVertex(id);
	}

	public Production getFirstProduction() {
		return (Production)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Production"));
	}

	public Production getFirstProduction(boolean noSubClasses) {
		return (Production)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Production"), noSubClasses);
	}

	public Production createProduction() {
		Production newVertex = (Production) graphFactory.createVertex(Production.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Production createProduction(int id) {
		Production newVertex = (Production) graphFactory.createVertex(Production.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for QuantifiedExpression ------------------------

	public QuantifiedExpression getQuantifiedExpression(int id) {
		return (QuantifiedExpression)getVertex(id);
	}

	public QuantifiedExpression getFirstQuantifiedExpression() {
		return (QuantifiedExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("QuantifiedExpression"));
	}

	public QuantifiedExpression getFirstQuantifiedExpression(boolean noSubClasses) {
		return (QuantifiedExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("QuantifiedExpression"), noSubClasses);
	}

	public QuantifiedExpression createQuantifiedExpression() {
		QuantifiedExpression newVertex = (QuantifiedExpression) graphFactory.createVertex(QuantifiedExpression.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public QuantifiedExpression createQuantifiedExpression(int id) {
		QuantifiedExpression newVertex = (QuantifiedExpression) graphFactory.createVertex(QuantifiedExpression.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for Quantifier ------------------------

	public Quantifier getQuantifier(int id) {
		return (Quantifier)getVertex(id);
	}

	public Quantifier getFirstQuantifier() {
		return (Quantifier)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Quantifier"));
	}

	public Quantifier getFirstQuantifier(boolean noSubClasses) {
		return (Quantifier)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Quantifier"), noSubClasses);
	}

	public Quantifier createQuantifier() {
		Quantifier newVertex = (Quantifier) graphFactory.createVertex(Quantifier.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Quantifier createQuantifier(int id) {
		Quantifier newVertex = (Quantifier) graphFactory.createVertex(Quantifier.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for RealLiteral ------------------------

	public RealLiteral getRealLiteral(int id) {
		return (RealLiteral)getVertex(id);
	}

	public RealLiteral getFirstRealLiteral() {
		return (RealLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RealLiteral"));
	}

	public RealLiteral getFirstRealLiteral(boolean noSubClasses) {
		return (RealLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RealLiteral"), noSubClasses);
	}

	public RealLiteral createRealLiteral() {
		RealLiteral newVertex = (RealLiteral) graphFactory.createVertex(RealLiteral.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public RealLiteral createRealLiteral(int id) {
		RealLiteral newVertex = (RealLiteral) graphFactory.createVertex(RealLiteral.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for RecordConstruction ------------------------

	public RecordConstruction getRecordConstruction(int id) {
		return (RecordConstruction)getVertex(id);
	}

	public RecordConstruction getFirstRecordConstruction() {
		return (RecordConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RecordConstruction"));
	}

	public RecordConstruction getFirstRecordConstruction(boolean noSubClasses) {
		return (RecordConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RecordConstruction"), noSubClasses);
	}

	public RecordConstruction createRecordConstruction() {
		RecordConstruction newVertex = (RecordConstruction) graphFactory.createVertex(RecordConstruction.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public RecordConstruction createRecordConstruction(int id) {
		RecordConstruction newVertex = (RecordConstruction) graphFactory.createVertex(RecordConstruction.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for RecordElement ------------------------

	public RecordElement getRecordElement(int id) {
		return (RecordElement)getVertex(id);
	}

	public RecordElement getFirstRecordElement() {
		return (RecordElement)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RecordElement"));
	}

	public RecordElement getFirstRecordElement(boolean noSubClasses) {
		return (RecordElement)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RecordElement"), noSubClasses);
	}

	public RecordElement createRecordElement() {
		RecordElement newVertex = (RecordElement) graphFactory.createVertex(RecordElement.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public RecordElement createRecordElement(int id) {
		RecordElement newVertex = (RecordElement) graphFactory.createVertex(RecordElement.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for RecordId ------------------------

	public RecordId getRecordId(int id) {
		return (RecordId)getVertex(id);
	}

	public RecordId getFirstRecordId() {
		return (RecordId)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RecordId"));
	}

	public RecordId getFirstRecordId(boolean noSubClasses) {
		return (RecordId)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RecordId"), noSubClasses);
	}

	public RecordId createRecordId() {
		RecordId newVertex = (RecordId) graphFactory.createVertex(RecordId.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public RecordId createRecordId(int id) {
		RecordId newVertex = (RecordId) graphFactory.createVertex(RecordId.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for RestrictedExpression ------------------------

	public RestrictedExpression getRestrictedExpression(int id) {
		return (RestrictedExpression)getVertex(id);
	}

	public RestrictedExpression getFirstRestrictedExpression() {
		return (RestrictedExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RestrictedExpression"));
	}

	public RestrictedExpression getFirstRestrictedExpression(boolean noSubClasses) {
		return (RestrictedExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RestrictedExpression"), noSubClasses);
	}

	public RestrictedExpression createRestrictedExpression() {
		RestrictedExpression newVertex = (RestrictedExpression) graphFactory.createVertex(RestrictedExpression.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public RestrictedExpression createRestrictedExpression(int id) {
		RestrictedExpression newVertex = (RestrictedExpression) graphFactory.createVertex(RestrictedExpression.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for RightSide ------------------------

	public RightSide getRightSide(int id) {
		return (RightSide)getVertex(id);
	}

	public RightSide getFirstRightSide() {
		return (RightSide)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RightSide"));
	}

	public RightSide getFirstRightSide(boolean noSubClasses) {
		return (RightSide)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RightSide"), noSubClasses);
	}

	public RightSide createRightSide() {
		RightSide newVertex = (RightSide) graphFactory.createVertex(RightSide.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public RightSide createRightSide(int id) {
		RightSide newVertex = (RightSide) graphFactory.createVertex(RightSide.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for RoleId ------------------------

	public RoleId getRoleId(int id) {
		return (RoleId)getVertex(id);
	}

	public RoleId getFirstRoleId() {
		return (RoleId)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RoleId"));
	}

	public RoleId getFirstRoleId(boolean noSubClasses) {
		return (RoleId)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RoleId"), noSubClasses);
	}

	public RoleId createRoleId() {
		RoleId newVertex = (RoleId) graphFactory.createVertex(RoleId.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public RoleId createRoleId(int id) {
		RoleId newVertex = (RoleId) graphFactory.createVertex(RoleId.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for SequentialPathDescription ------------------------

	public SequentialPathDescription getSequentialPathDescription(int id) {
		return (SequentialPathDescription)getVertex(id);
	}

	public SequentialPathDescription getFirstSequentialPathDescription() {
		return (SequentialPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SequentialPathDescription"));
	}

	public SequentialPathDescription getFirstSequentialPathDescription(boolean noSubClasses) {
		return (SequentialPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SequentialPathDescription"), noSubClasses);
	}

	public SequentialPathDescription createSequentialPathDescription() {
		SequentialPathDescription newVertex = (SequentialPathDescription) graphFactory.createVertex(SequentialPathDescription.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public SequentialPathDescription createSequentialPathDescription(int id) {
		SequentialPathDescription newVertex = (SequentialPathDescription) graphFactory.createVertex(SequentialPathDescription.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for SetComprehension ------------------------

	public SetComprehension getSetComprehension(int id) {
		return (SetComprehension)getVertex(id);
	}

	public SetComprehension getFirstSetComprehension() {
		return (SetComprehension)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SetComprehension"));
	}

	public SetComprehension getFirstSetComprehension(boolean noSubClasses) {
		return (SetComprehension)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SetComprehension"), noSubClasses);
	}

	public SetComprehension createSetComprehension() {
		SetComprehension newVertex = (SetComprehension) graphFactory.createVertex(SetComprehension.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public SetComprehension createSetComprehension(int id) {
		SetComprehension newVertex = (SetComprehension) graphFactory.createVertex(SetComprehension.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for SetConstruction ------------------------

	public SetConstruction getSetConstruction(int id) {
		return (SetConstruction)getVertex(id);
	}

	public SetConstruction getFirstSetConstruction() {
		return (SetConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SetConstruction"));
	}

	public SetConstruction getFirstSetConstruction(boolean noSubClasses) {
		return (SetConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SetConstruction"), noSubClasses);
	}

	public SetConstruction createSetConstruction() {
		SetConstruction newVertex = (SetConstruction) graphFactory.createVertex(SetConstruction.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public SetConstruction createSetConstruction(int id) {
		SetConstruction newVertex = (SetConstruction) graphFactory.createVertex(SetConstruction.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for SimpleDeclaration ------------------------

	public SimpleDeclaration getSimpleDeclaration(int id) {
		return (SimpleDeclaration)getVertex(id);
	}

	public SimpleDeclaration getFirstSimpleDeclaration() {
		return (SimpleDeclaration)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SimpleDeclaration"));
	}

	public SimpleDeclaration getFirstSimpleDeclaration(boolean noSubClasses) {
		return (SimpleDeclaration)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SimpleDeclaration"), noSubClasses);
	}

	public SimpleDeclaration createSimpleDeclaration() {
		SimpleDeclaration newVertex = (SimpleDeclaration) graphFactory.createVertex(SimpleDeclaration.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public SimpleDeclaration createSimpleDeclaration(int id) {
		SimpleDeclaration newVertex = (SimpleDeclaration) graphFactory.createVertex(SimpleDeclaration.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for SimplePathDescription ------------------------

	public SimplePathDescription getSimplePathDescription(int id) {
		return (SimplePathDescription)getVertex(id);
	}

	public SimplePathDescription getFirstSimplePathDescription() {
		return (SimplePathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SimplePathDescription"));
	}

	public SimplePathDescription getFirstSimplePathDescription(boolean noSubClasses) {
		return (SimplePathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SimplePathDescription"), noSubClasses);
	}

	public SimplePathDescription createSimplePathDescription() {
		SimplePathDescription newVertex = (SimplePathDescription) graphFactory.createVertex(SimplePathDescription.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public SimplePathDescription createSimplePathDescription(int id) {
		SimplePathDescription newVertex = (SimplePathDescription) graphFactory.createVertex(SimplePathDescription.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for StringLiteral ------------------------

	public StringLiteral getStringLiteral(int id) {
		return (StringLiteral)getVertex(id);
	}

	public StringLiteral getFirstStringLiteral() {
		return (StringLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("StringLiteral"));
	}

	public StringLiteral getFirstStringLiteral(boolean noSubClasses) {
		return (StringLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("StringLiteral"), noSubClasses);
	}

	public StringLiteral createStringLiteral() {
		StringLiteral newVertex = (StringLiteral) graphFactory.createVertex(StringLiteral.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public StringLiteral createStringLiteral(int id) {
		StringLiteral newVertex = (StringLiteral) graphFactory.createVertex(StringLiteral.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for SubgraphExpression ------------------------

	public SubgraphExpression getSubgraphExpression(int id) {
		return (SubgraphExpression)getVertex(id);
	}

	public SubgraphExpression getFirstSubgraphExpression() {
		return (SubgraphExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SubgraphExpression"));
	}

	// ------------------------ Code for Symbol ------------------------

	public Symbol getSymbol(int id) {
		return (Symbol)getVertex(id);
	}

	public Symbol getFirstSymbol() {
		return (Symbol)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Symbol"));
	}

	public Symbol getFirstSymbol(boolean noSubClasses) {
		return (Symbol)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Symbol"), noSubClasses);
	}

	public Symbol createSymbol() {
		Symbol newVertex = (Symbol) graphFactory.createVertex(Symbol.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Symbol createSymbol(int id) {
		Symbol newVertex = (Symbol) graphFactory.createVertex(Symbol.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for TableComprehension ------------------------

	public TableComprehension getTableComprehension(int id) {
		return (TableComprehension)getVertex(id);
	}

	public TableComprehension getFirstTableComprehension() {
		return (TableComprehension)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("TableComprehension"));
	}

	public TableComprehension getFirstTableComprehension(boolean noSubClasses) {
		return (TableComprehension)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("TableComprehension"), noSubClasses);
	}

	public TableComprehension createTableComprehension() {
		TableComprehension newVertex = (TableComprehension) graphFactory.createVertex(TableComprehension.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public TableComprehension createTableComprehension(int id) {
		TableComprehension newVertex = (TableComprehension) graphFactory.createVertex(TableComprehension.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for ThisLiteral ------------------------

	public ThisLiteral getThisLiteral(int id) {
		return (ThisLiteral)getVertex(id);
	}

	public ThisLiteral getFirstThisLiteral() {
		return (ThisLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ThisLiteral"));
	}

	public ThisLiteral getFirstThisLiteral(boolean noSubClasses) {
		return (ThisLiteral)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ThisLiteral"), noSubClasses);
	}

	public ThisLiteral createThisLiteral() {
		ThisLiteral newVertex = (ThisLiteral) graphFactory.createVertex(ThisLiteral.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public ThisLiteral createThisLiteral(int id) {
		ThisLiteral newVertex = (ThisLiteral) graphFactory.createVertex(ThisLiteral.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for TransposedPathDescription ------------------------

	public TransposedPathDescription getTransposedPathDescription(int id) {
		return (TransposedPathDescription)getVertex(id);
	}

	public TransposedPathDescription getFirstTransposedPathDescription() {
		return (TransposedPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("TransposedPathDescription"));
	}

	public TransposedPathDescription getFirstTransposedPathDescription(boolean noSubClasses) {
		return (TransposedPathDescription)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("TransposedPathDescription"), noSubClasses);
	}

	public TransposedPathDescription createTransposedPathDescription() {
		TransposedPathDescription newVertex = (TransposedPathDescription) graphFactory.createVertex(TransposedPathDescription.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public TransposedPathDescription createTransposedPathDescription(int id) {
		TransposedPathDescription newVertex = (TransposedPathDescription) graphFactory.createVertex(TransposedPathDescription.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for TupleConstruction ------------------------

	public TupleConstruction getTupleConstruction(int id) {
		return (TupleConstruction)getVertex(id);
	}

	public TupleConstruction getFirstTupleConstruction() {
		return (TupleConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("TupleConstruction"));
	}

	public TupleConstruction getFirstTupleConstruction(boolean noSubClasses) {
		return (TupleConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("TupleConstruction"), noSubClasses);
	}

	public TupleConstruction createTupleConstruction() {
		TupleConstruction newVertex = (TupleConstruction) graphFactory.createVertex(TupleConstruction.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public TupleConstruction createTupleConstruction(int id) {
		TupleConstruction newVertex = (TupleConstruction) graphFactory.createVertex(TupleConstruction.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for TypeId ------------------------

	public TypeId getTypeId(int id) {
		return (TypeId)getVertex(id);
	}

	public TypeId getFirstTypeId() {
		return (TypeId)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("TypeId"));
	}

	public TypeId getFirstTypeId(boolean noSubClasses) {
		return (TypeId)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("TypeId"), noSubClasses);
	}

	public TypeId createTypeId() {
		TypeId newVertex = (TypeId) graphFactory.createVertex(TypeId.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public TypeId createTypeId(int id) {
		TypeId newVertex = (TypeId) graphFactory.createVertex(TypeId.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for ValueConstruction ------------------------

	public ValueConstruction getValueConstruction(int id) {
		return (ValueConstruction)getVertex(id);
	}

	public ValueConstruction getFirstValueConstruction() {
		return (ValueConstruction)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ValueConstruction"));
	}

	// ------------------------ Code for Variable ------------------------

	public Variable getVariable(int id) {
		return (Variable)getVertex(id);
	}

	public Variable getFirstVariable() {
		return (Variable)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Variable"));
	}

	public Variable getFirstVariable(boolean noSubClasses) {
		return (Variable)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("Variable"), noSubClasses);
	}

	public Variable createVariable() {
		Variable newVertex = (Variable) graphFactory.createVertex(Variable.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Variable createVariable(int id) {
		Variable newVertex = (Variable) graphFactory.createVertex(Variable.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for VertexSetExpression ------------------------

	public VertexSetExpression getVertexSetExpression(int id) {
		return (VertexSetExpression)getVertex(id);
	}

	public VertexSetExpression getFirstVertexSetExpression() {
		return (VertexSetExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("VertexSetExpression"));
	}

	public VertexSetExpression getFirstVertexSetExpression(boolean noSubClasses) {
		return (VertexSetExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("VertexSetExpression"), noSubClasses);
	}

	public VertexSetExpression createVertexSetExpression() {
		VertexSetExpression newVertex = (VertexSetExpression) graphFactory.createVertex(VertexSetExpression.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public VertexSetExpression createVertexSetExpression(int id) {
		VertexSetExpression newVertex = (VertexSetExpression) graphFactory.createVertex(VertexSetExpression.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for VertexSubgraphExpression ------------------------

	public VertexSubgraphExpression getVertexSubgraphExpression(int id) {
		return (VertexSubgraphExpression)getVertex(id);
	}

	public VertexSubgraphExpression getFirstVertexSubgraphExpression() {
		return (VertexSubgraphExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("VertexSubgraphExpression"));
	}

	public VertexSubgraphExpression getFirstVertexSubgraphExpression(boolean noSubClasses) {
		return (VertexSubgraphExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("VertexSubgraphExpression"), noSubClasses);
	}

	public VertexSubgraphExpression createVertexSubgraphExpression() {
		VertexSubgraphExpression newVertex = (VertexSubgraphExpression) graphFactory.createVertex(VertexSubgraphExpression.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public VertexSubgraphExpression createVertexSubgraphExpression(int id) {
		VertexSubgraphExpression newVertex = (VertexSubgraphExpression) graphFactory.createVertex(VertexSubgraphExpression.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for WhereExpression ------------------------

	public WhereExpression getWhereExpression(int id) {
		return (WhereExpression)getVertex(id);
	}

	public WhereExpression getFirstWhereExpression() {
		return (WhereExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("WhereExpression"));
	}

	public WhereExpression getFirstWhereExpression(boolean noSubClasses) {
		return (WhereExpression)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("WhereExpression"), noSubClasses);
	}

	public WhereExpression createWhereExpression() {
		WhereExpression newVertex = (WhereExpression) graphFactory.createVertex(WhereExpression.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public WhereExpression createWhereExpression(int id) {
		WhereExpression newVertex = (WhereExpression) graphFactory.createVertex(WhereExpression.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Iterable<? extends IsTypeRestrOf> getIsTypeRestrOfEdges() {
		return new EdgeIterable<IsTypeRestrOf>(this, IsTypeRestrOf.class);
	}
	
	public Iterable<? extends IsTypeRestrOf> getIsTypeRestrOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsTypeRestrOf>(this, IsTypeRestrOf.class, noSubClasses);
	}


	public Iterable<? extends IsConditionOf> getIsConditionOfEdges() {
		return new EdgeIterable<IsConditionOf>(this, IsConditionOf.class);
	}
	
	public Iterable<? extends IsConditionOf> getIsConditionOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsConditionOf>(this, IsConditionOf.class, noSubClasses);
	}


	public Iterable<? extends IsRestrictedExprOf> getIsRestrictedExprOfEdges() {
		return new EdgeIterable<IsRestrictedExprOf>(this, IsRestrictedExprOf.class);
	}
	
	public Iterable<? extends IsRestrictedExprOf> getIsRestrictedExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsRestrictedExprOf>(this, IsRestrictedExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsDefinitionOf> getIsDefinitionOfEdges() {
		return new EdgeIterable<IsDefinitionOf>(this, IsDefinitionOf.class);
	}
	
	public Iterable<? extends IsDefinitionOf> getIsDefinitionOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsDefinitionOf>(this, IsDefinitionOf.class, noSubClasses);
	}


	public Iterable<? extends IsPathOf> getIsPathOfEdges() {
		return new EdgeIterable<IsPathOf>(this, IsPathOf.class);
	}
	
	public Iterable<? extends IsPathOf> getIsPathOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsPathOf>(this, IsPathOf.class, noSubClasses);
	}


	public Iterable<? extends IsTypeExprOf> getIsTypeExprOfEdges() {
		return new EdgeIterable<IsTypeExprOf>(this, IsTypeExprOf.class);
	}
	
	public Iterable<? extends IsTypeExprOf> getIsTypeExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsTypeExprOf>(this, IsTypeExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsDirectionOf> getIsDirectionOfEdges() {
		return new EdgeIterable<IsDirectionOf>(this, IsDirectionOf.class);
	}
	
	public Iterable<? extends IsDirectionOf> getIsDirectionOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsDirectionOf>(this, IsDirectionOf.class, noSubClasses);
	}


	public Iterable<? extends IsSubPathOf> getIsSubPathOfEdges() {
		return new EdgeIterable<IsSubPathOf>(this, IsSubPathOf.class);
	}
	
	public Iterable<? extends IsSubPathOf> getIsSubPathOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsSubPathOf>(this, IsSubPathOf.class, noSubClasses);
	}


	public Iterable<? extends IsBoundVarOf> getIsBoundVarOfEdges() {
		return new EdgeIterable<IsBoundVarOf>(this, IsBoundVarOf.class);
	}
	
	public Iterable<? extends IsBoundVarOf> getIsBoundVarOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsBoundVarOf>(this, IsBoundVarOf.class, noSubClasses);
	}


	public Iterable<? extends IsDeclaredVarOf> getIsDeclaredVarOfEdges() {
		return new EdgeIterable<IsDeclaredVarOf>(this, IsDeclaredVarOf.class);
	}
	
	public Iterable<? extends IsDeclaredVarOf> getIsDeclaredVarOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsDeclaredVarOf>(this, IsDeclaredVarOf.class, noSubClasses);
	}


	public Iterable<? extends IsTypeIdOf> getIsTypeIdOfEdges() {
		return new EdgeIterable<IsTypeIdOf>(this, IsTypeIdOf.class);
	}
	
	public Iterable<? extends IsTypeIdOf> getIsTypeIdOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsTypeIdOf>(this, IsTypeIdOf.class, noSubClasses);
	}


	public Iterable<? extends IsElementOf> getIsElementOfEdges() {
		return new EdgeIterable<IsElementOf>(this, IsElementOf.class);
	}
	
	public Iterable<? extends IsElementOf> getIsElementOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsElementOf>(this, IsElementOf.class, noSubClasses);
	}


	public Iterable<? extends IsBoundExprOfQuantifier> getIsBoundExprOfQuantifierEdges() {
		return new EdgeIterable<IsBoundExprOfQuantifier>(this, IsBoundExprOfQuantifier.class);
	}
	
	public Iterable<? extends IsBoundExprOfQuantifier> getIsBoundExprOfQuantifierEdges(boolean noSubClasses) {
		return new EdgeIterable<IsBoundExprOfQuantifier>(this, IsBoundExprOfQuantifier.class, noSubClasses);
	}


	public Iterable<? extends IsRowHeaderExprOf> getIsRowHeaderExprOfEdges() {
		return new EdgeIterable<IsRowHeaderExprOf>(this, IsRowHeaderExprOf.class);
	}
	
	public Iterable<? extends IsRowHeaderExprOf> getIsRowHeaderExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsRowHeaderExprOf>(this, IsRowHeaderExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsArgumentOf> getIsArgumentOfEdges() {
		return new EdgeIterable<IsArgumentOf>(this, IsArgumentOf.class);
	}
	
	public Iterable<? extends IsArgumentOf> getIsArgumentOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsArgumentOf>(this, IsArgumentOf.class, noSubClasses);
	}


	public Iterable<? extends IsTypeExprOfFunction> getIsTypeExprOfFunctionEdges() {
		return new EdgeIterable<IsTypeExprOfFunction>(this, IsTypeExprOfFunction.class);
	}
	
	public Iterable<? extends IsTypeExprOfFunction> getIsTypeExprOfFunctionEdges(boolean noSubClasses) {
		return new EdgeIterable<IsTypeExprOfFunction>(this, IsTypeExprOfFunction.class, noSubClasses);
	}


	public Iterable<? extends IsCompResultDefOf> getIsCompResultDefOfEdges() {
		return new EdgeIterable<IsCompResultDefOf>(this, IsCompResultDefOf.class);
	}
	
	public Iterable<? extends IsCompResultDefOf> getIsCompResultDefOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsCompResultDefOf>(this, IsCompResultDefOf.class, noSubClasses);
	}


	public Iterable<? extends IsLastValueOf> getIsLastValueOfEdges() {
		return new EdgeIterable<IsLastValueOf>(this, IsLastValueOf.class);
	}
	
	public Iterable<? extends IsLastValueOf> getIsLastValueOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsLastValueOf>(this, IsLastValueOf.class, noSubClasses);
	}


	public Iterable<? extends IsFirstValueOf> getIsFirstValueOfEdges() {
		return new EdgeIterable<IsFirstValueOf>(this, IsFirstValueOf.class);
	}
	
	public Iterable<? extends IsFirstValueOf> getIsFirstValueOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsFirstValueOf>(this, IsFirstValueOf.class, noSubClasses);
	}


	public Iterable<? extends IsEdgeRestrOf> getIsEdgeRestrOfEdges() {
		return new EdgeIterable<IsEdgeRestrOf>(this, IsEdgeRestrOf.class);
	}
	
	public Iterable<? extends IsEdgeRestrOf> getIsEdgeRestrOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsEdgeRestrOf>(this, IsEdgeRestrOf.class, noSubClasses);
	}


	public Iterable<? extends IsSequenceElementOf> getIsSequenceElementOfEdges() {
		return new EdgeIterable<IsSequenceElementOf>(this, IsSequenceElementOf.class);
	}
	
	public Iterable<? extends IsSequenceElementOf> getIsSequenceElementOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsSequenceElementOf>(this, IsSequenceElementOf.class, noSubClasses);
	}


	public Iterable<? extends IsPartOf> getIsPartOfEdges() {
		return new EdgeIterable<IsPartOf>(this, IsPartOf.class);
	}
	
	public Iterable<? extends IsPartOf> getIsPartOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsPartOf>(this, IsPartOf.class, noSubClasses);
	}


	public Iterable<? extends IsBoundExprOf> getIsBoundExprOfEdges() {
		return new EdgeIterable<IsBoundExprOf>(this, IsBoundExprOf.class);
	}
	
	public Iterable<? extends IsBoundExprOf> getIsBoundExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsBoundExprOf>(this, IsBoundExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsIntermediateVertexOf> getIsIntermediateVertexOfEdges() {
		return new EdgeIterable<IsIntermediateVertexOf>(this, IsIntermediateVertexOf.class);
	}
	
	public Iterable<? extends IsIntermediateVertexOf> getIsIntermediateVertexOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsIntermediateVertexOf>(this, IsIntermediateVertexOf.class, noSubClasses);
	}


	public Iterable<? extends IsRecordElementOf> getIsRecordElementOfEdges() {
		return new EdgeIterable<IsRecordElementOf>(this, IsRecordElementOf.class);
	}
	
	public Iterable<? extends IsRecordElementOf> getIsRecordElementOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsRecordElementOf>(this, IsRecordElementOf.class, noSubClasses);
	}


	public Iterable<? extends IsPathDescriptionOf> getIsPathDescriptionOfEdges() {
		return new EdgeIterable<IsPathDescriptionOf>(this, IsPathDescriptionOf.class);
	}
	
	public Iterable<? extends IsPathDescriptionOf> getIsPathDescriptionOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsPathDescriptionOf>(this, IsPathDescriptionOf.class, noSubClasses);
	}


	public Iterable<? extends IsRecordIdOf> getIsRecordIdOfEdges() {
		return new EdgeIterable<IsRecordIdOf>(this, IsRecordIdOf.class);
	}
	
	public Iterable<? extends IsRecordIdOf> getIsRecordIdOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsRecordIdOf>(this, IsRecordIdOf.class, noSubClasses);
	}


	public Iterable<? extends IsExponentiatedPathOf> getIsExponentiatedPathOfEdges() {
		return new EdgeIterable<IsExponentiatedPathOf>(this, IsExponentiatedPathOf.class);
	}
	
	public Iterable<? extends IsExponentiatedPathOf> getIsExponentiatedPathOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsExponentiatedPathOf>(this, IsExponentiatedPathOf.class, noSubClasses);
	}


	public Iterable<? extends IsStartRestrOf> getIsStartRestrOfEdges() {
		return new EdgeIterable<IsStartRestrOf>(this, IsStartRestrOf.class);
	}
	
	public Iterable<? extends IsStartRestrOf> getIsStartRestrOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsStartRestrOf>(this, IsStartRestrOf.class, noSubClasses);
	}


	public Iterable<? extends IsTypeExprOfDeclaration> getIsTypeExprOfDeclarationEdges() {
		return new EdgeIterable<IsTypeExprOfDeclaration>(this, IsTypeExprOfDeclaration.class);
	}
	
	public Iterable<? extends IsTypeExprOfDeclaration> getIsTypeExprOfDeclarationEdges(boolean noSubClasses) {
		return new EdgeIterable<IsTypeExprOfDeclaration>(this, IsTypeExprOfDeclaration.class, noSubClasses);
	}


	public Iterable<? extends IsIteratedPathOf> getIsIteratedPathOfEdges() {
		return new EdgeIterable<IsIteratedPathOf>(this, IsIteratedPathOf.class);
	}
	
	public Iterable<? extends IsIteratedPathOf> getIsIteratedPathOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsIteratedPathOf>(this, IsIteratedPathOf.class, noSubClasses);
	}


	public Iterable<? extends IsExprOf> getIsExprOfEdges() {
		return new EdgeIterable<IsExprOf>(this, IsExprOf.class);
	}
	
	public Iterable<? extends IsExprOf> getIsExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsExprOf>(this, IsExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsConstraintOf> getIsConstraintOfEdges() {
		return new EdgeIterable<IsConstraintOf>(this, IsConstraintOf.class);
	}
	
	public Iterable<? extends IsConstraintOf> getIsConstraintOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsConstraintOf>(this, IsConstraintOf.class, noSubClasses);
	}


	public Iterable<? extends IsRecordExprOf> getIsRecordExprOfEdges() {
		return new EdgeIterable<IsRecordExprOf>(this, IsRecordExprOf.class);
	}
	
	public Iterable<? extends IsRecordExprOf> getIsRecordExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsRecordExprOf>(this, IsRecordExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsBoundExprOfDefinition> getIsBoundExprOfDefinitionEdges() {
		return new EdgeIterable<IsBoundExprOfDefinition>(this, IsBoundExprOfDefinition.class);
	}
	
	public Iterable<? extends IsBoundExprOfDefinition> getIsBoundExprOfDefinitionEdges(boolean noSubClasses) {
		return new EdgeIterable<IsBoundExprOfDefinition>(this, IsBoundExprOfDefinition.class, noSubClasses);
	}


	public Iterable<? extends Greql2Aggregation> getGreql2AggregationEdges() {
		return new EdgeIterable<Greql2Aggregation>(this, Greql2Aggregation.class);
	}
	
	public Iterable<? extends Greql2Aggregation> getGreql2AggregationEdges(boolean noSubClasses) {
		return new EdgeIterable<Greql2Aggregation>(this, Greql2Aggregation.class, noSubClasses);
	}


	public Iterable<? extends IsAlternativePathOf> getIsAlternativePathOfEdges() {
		return new EdgeIterable<IsAlternativePathOf>(this, IsAlternativePathOf.class);
	}
	
	public Iterable<? extends IsAlternativePathOf> getIsAlternativePathOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsAlternativePathOf>(this, IsAlternativePathOf.class, noSubClasses);
	}


	public Iterable<? extends IsTransposedPathOf> getIsTransposedPathOfEdges() {
		return new EdgeIterable<IsTransposedPathOf>(this, IsTransposedPathOf.class);
	}
	
	public Iterable<? extends IsTransposedPathOf> getIsTransposedPathOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsTransposedPathOf>(this, IsTransposedPathOf.class, noSubClasses);
	}


	public Iterable<? extends IsIdOf> getIsIdOfEdges() {
		return new EdgeIterable<IsIdOf>(this, IsIdOf.class);
	}
	
	public Iterable<? extends IsIdOf> getIsIdOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsIdOf>(this, IsIdOf.class, noSubClasses);
	}


	public Iterable<? extends IsFunctionIdOf> getIsFunctionIdOfEdges() {
		return new EdgeIterable<IsFunctionIdOf>(this, IsFunctionIdOf.class);
	}
	
	public Iterable<? extends IsFunctionIdOf> getIsFunctionIdOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsFunctionIdOf>(this, IsFunctionIdOf.class, noSubClasses);
	}


	public Iterable<? extends IsQueryExprOf> getIsQueryExprOfEdges() {
		return new EdgeIterable<IsQueryExprOf>(this, IsQueryExprOf.class);
	}
	
	public Iterable<? extends IsQueryExprOf> getIsQueryExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsQueryExprOf>(this, IsQueryExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsStartExprOf> getIsStartExprOfEdges() {
		return new EdgeIterable<IsStartExprOf>(this, IsStartExprOf.class);
	}
	
	public Iterable<? extends IsStartExprOf> getIsStartExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsStartExprOf>(this, IsStartExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsEdgeVertexListOf> getIsEdgeVertexListOfEdges() {
		return new EdgeIterable<IsEdgeVertexListOf>(this, IsEdgeVertexListOf.class);
	}
	
	public Iterable<? extends IsEdgeVertexListOf> getIsEdgeVertexListOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsEdgeVertexListOf>(this, IsEdgeVertexListOf.class, noSubClasses);
	}


	public Iterable<? extends IsOptionalPathOf> getIsOptionalPathOfEdges() {
		return new EdgeIterable<IsOptionalPathOf>(this, IsOptionalPathOf.class);
	}
	
	public Iterable<? extends IsOptionalPathOf> getIsOptionalPathOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsOptionalPathOf>(this, IsOptionalPathOf.class, noSubClasses);
	}


	public Iterable<? extends IsRoleIdOf> getIsRoleIdOfEdges() {
		return new EdgeIterable<IsRoleIdOf>(this, IsRoleIdOf.class);
	}
	
	public Iterable<? extends IsRoleIdOf> getIsRoleIdOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsRoleIdOf>(this, IsRoleIdOf.class, noSubClasses);
	}


	public Iterable<? extends IsEdgeOrVertexExprOf> getIsEdgeOrVertexExprOfEdges() {
		return new EdgeIterable<IsEdgeOrVertexExprOf>(this, IsEdgeOrVertexExprOf.class);
	}
	
	public Iterable<? extends IsEdgeOrVertexExprOf> getIsEdgeOrVertexExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsEdgeOrVertexExprOf>(this, IsEdgeOrVertexExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsProductionOf> getIsProductionOfEdges() {
		return new EdgeIterable<IsProductionOf>(this, IsProductionOf.class);
	}
	
	public Iterable<? extends IsProductionOf> getIsProductionOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsProductionOf>(this, IsProductionOf.class, noSubClasses);
	}


	public Iterable<? extends IsCompDeclOf> getIsCompDeclOfEdges() {
		return new EdgeIterable<IsCompDeclOf>(this, IsCompDeclOf.class);
	}
	
	public Iterable<? extends IsCompDeclOf> getIsCompDeclOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsCompDeclOf>(this, IsCompDeclOf.class, noSubClasses);
	}


	public Iterable<? extends IsRootOf> getIsRootOfEdges() {
		return new EdgeIterable<IsRootOf>(this, IsRootOf.class);
	}
	
	public Iterable<? extends IsRootOf> getIsRootOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsRootOf>(this, IsRootOf.class, noSubClasses);
	}


	public Iterable<? extends IsRightSideOf> getIsRightSideOfEdges() {
		return new EdgeIterable<IsRightSideOf>(this, IsRightSideOf.class);
	}
	
	public Iterable<? extends IsRightSideOf> getIsRightSideOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsRightSideOf>(this, IsRightSideOf.class, noSubClasses);
	}


	public Iterable<? extends IsEdgeExprOf> getIsEdgeExprOfEdges() {
		return new EdgeIterable<IsEdgeExprOf>(this, IsEdgeExprOf.class);
	}
	
	public Iterable<? extends IsEdgeExprOf> getIsEdgeExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsEdgeExprOf>(this, IsEdgeExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsTableHeaderOf> getIsTableHeaderOfEdges() {
		return new EdgeIterable<IsTableHeaderOf>(this, IsTableHeaderOf.class);
	}
	
	public Iterable<? extends IsTableHeaderOf> getIsTableHeaderOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsTableHeaderOf>(this, IsTableHeaderOf.class, noSubClasses);
	}


	public Iterable<? extends IsExponentOf> getIsExponentOfEdges() {
		return new EdgeIterable<IsExponentOf>(this, IsExponentOf.class);
	}
	
	public Iterable<? extends IsExponentOf> getIsExponentOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsExponentOf>(this, IsExponentOf.class, noSubClasses);
	}


	public Iterable<? extends IsColumnHeaderExprOf> getIsColumnHeaderExprOfEdges() {
		return new EdgeIterable<IsColumnHeaderExprOf>(this, IsColumnHeaderExprOf.class);
	}
	
	public Iterable<? extends IsColumnHeaderExprOf> getIsColumnHeaderExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsColumnHeaderExprOf>(this, IsColumnHeaderExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsRestrictionOf> getIsRestrictionOfEdges() {
		return new EdgeIterable<IsRestrictionOf>(this, IsRestrictionOf.class);
	}
	
	public Iterable<? extends IsRestrictionOf> getIsRestrictionOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsRestrictionOf>(this, IsRestrictionOf.class, noSubClasses);
	}


	public Iterable<? extends IsSimpleDeclOf> getIsSimpleDeclOfEdges() {
		return new EdgeIterable<IsSimpleDeclOf>(this, IsSimpleDeclOf.class);
	}
	
	public Iterable<? extends IsSimpleDeclOf> getIsSimpleDeclOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsSimpleDeclOf>(this, IsSimpleDeclOf.class, noSubClasses);
	}


	public Iterable<? extends IsTrueExprOf> getIsTrueExprOfEdges() {
		return new EdgeIterable<IsTrueExprOf>(this, IsTrueExprOf.class);
	}
	
	public Iterable<? extends IsTrueExprOf> getIsTrueExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsTrueExprOf>(this, IsTrueExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsSymbolOf> getIsSymbolOfEdges() {
		return new EdgeIterable<IsSymbolOf>(this, IsSymbolOf.class);
	}
	
	public Iterable<? extends IsSymbolOf> getIsSymbolOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsSymbolOf>(this, IsSymbolOf.class, noSubClasses);
	}


	public Iterable<? extends IsQuantifierOf> getIsQuantifierOfEdges() {
		return new EdgeIterable<IsQuantifierOf>(this, IsQuantifierOf.class);
	}
	
	public Iterable<? extends IsQuantifierOf> getIsQuantifierOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsQuantifierOf>(this, IsQuantifierOf.class, noSubClasses);
	}


	public Iterable<? extends IsQuantifiedDeclOf> getIsQuantifiedDeclOfEdges() {
		return new EdgeIterable<IsQuantifiedDeclOf>(this, IsQuantifiedDeclOf.class);
	}
	
	public Iterable<? extends IsQuantifiedDeclOf> getIsQuantifiedDeclOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsQuantifiedDeclOf>(this, IsQuantifiedDeclOf.class, noSubClasses);
	}


	public Iterable<? extends IsGoalRestrOf> getIsGoalRestrOfEdges() {
		return new EdgeIterable<IsGoalRestrOf>(this, IsGoalRestrOf.class);
	}
	
	public Iterable<? extends IsGoalRestrOf> getIsGoalRestrOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsGoalRestrOf>(this, IsGoalRestrOf.class, noSubClasses);
	}


	public Iterable<? extends IsVarOf> getIsVarOfEdges() {
		return new EdgeIterable<IsVarOf>(this, IsVarOf.class);
	}
	
	public Iterable<? extends IsVarOf> getIsVarOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsVarOf>(this, IsVarOf.class, noSubClasses);
	}


	public Iterable<? extends IsNullExprOf> getIsNullExprOfEdges() {
		return new EdgeIterable<IsNullExprOf>(this, IsNullExprOf.class);
	}
	
	public Iterable<? extends IsNullExprOf> getIsNullExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsNullExprOf>(this, IsNullExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsFalseExprOf> getIsFalseExprOfEdges() {
		return new EdgeIterable<IsFalseExprOf>(this, IsFalseExprOf.class);
	}
	
	public Iterable<? extends IsFalseExprOf> getIsFalseExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsFalseExprOf>(this, IsFalseExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsLeftSideOf> getIsLeftSideOfEdges() {
		return new EdgeIterable<IsLeftSideOf>(this, IsLeftSideOf.class);
	}
	
	public Iterable<? extends IsLeftSideOf> getIsLeftSideOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsLeftSideOf>(this, IsLeftSideOf.class, noSubClasses);
	}


	public Iterable<? extends IsTargetExprOf> getIsTargetExprOfEdges() {
		return new EdgeIterable<IsTargetExprOf>(this, IsTargetExprOf.class);
	}
	
	public Iterable<? extends IsTargetExprOf> getIsTargetExprOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsTargetExprOf>(this, IsTargetExprOf.class, noSubClasses);
	}


	public Iterable<? extends IsSubgraphOf> getIsSubgraphOfEdges() {
		return new EdgeIterable<IsSubgraphOf>(this, IsSubgraphOf.class);
	}
	
	public Iterable<? extends IsSubgraphOf> getIsSubgraphOfEdges(boolean noSubClasses) {
		return new EdgeIterable<IsSubgraphOf>(this, IsSubgraphOf.class, noSubClasses);
	}


	public Iterable<? extends RestrictedExpression> getRestrictedExpressionVertices() {
		return new VertexIterable<RestrictedExpression>(this, RestrictedExpression.class);
	}
	
	public Iterable<? extends RestrictedExpression> getRestrictedExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<RestrictedExpression>(this, RestrictedExpression.class, noSubClasses);
	}


	public Iterable<? extends WhereExpression> getWhereExpressionVertices() {
		return new VertexIterable<WhereExpression>(this, WhereExpression.class);
	}
	
	public Iterable<? extends WhereExpression> getWhereExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<WhereExpression>(this, WhereExpression.class, noSubClasses);
	}


	public Iterable<? extends Quantifier> getQuantifierVertices() {
		return new VertexIterable<Quantifier>(this, Quantifier.class);
	}
	
	public Iterable<? extends Quantifier> getQuantifierVertices(boolean noSubClasses) {
		return new VertexIterable<Quantifier>(this, Quantifier.class, noSubClasses);
	}


	public Iterable<? extends Production> getProductionVertices() {
		return new VertexIterable<Production>(this, Production.class);
	}
	
	public Iterable<? extends Production> getProductionVertices(boolean noSubClasses) {
		return new VertexIterable<Production>(this, Production.class, noSubClasses);
	}


	public Iterable<? extends PathDescription> getPathDescriptionVertices() {
		return new VertexIterable<PathDescription>(this, PathDescription.class);
	}
	
	public Iterable<? extends PathDescription> getPathDescriptionVertices(boolean noSubClasses) {
		return new VertexIterable<PathDescription>(this, PathDescription.class, noSubClasses);
	}


	public Iterable<? extends ExponentiatedPathDescription> getExponentiatedPathDescriptionVertices() {
		return new VertexIterable<ExponentiatedPathDescription>(this, ExponentiatedPathDescription.class);
	}
	
	public Iterable<? extends ExponentiatedPathDescription> getExponentiatedPathDescriptionVertices(boolean noSubClasses) {
		return new VertexIterable<ExponentiatedPathDescription>(this, ExponentiatedPathDescription.class, noSubClasses);
	}


	public Iterable<? extends SimplePathDescription> getSimplePathDescriptionVertices() {
		return new VertexIterable<SimplePathDescription>(this, SimplePathDescription.class);
	}
	
	public Iterable<? extends SimplePathDescription> getSimplePathDescriptionVertices(boolean noSubClasses) {
		return new VertexIterable<SimplePathDescription>(this, SimplePathDescription.class, noSubClasses);
	}


	public Iterable<? extends RecordId> getRecordIdVertices() {
		return new VertexIterable<RecordId>(this, RecordId.class);
	}
	
	public Iterable<? extends RecordId> getRecordIdVertices(boolean noSubClasses) {
		return new VertexIterable<RecordId>(this, RecordId.class, noSubClasses);
	}


	public Iterable<? extends PathSystemConstruction> getPathSystemConstructionVertices() {
		return new VertexIterable<PathSystemConstruction>(this, PathSystemConstruction.class);
	}
	
	public Iterable<? extends PathSystemConstruction> getPathSystemConstructionVertices(boolean noSubClasses) {
		return new VertexIterable<PathSystemConstruction>(this, PathSystemConstruction.class, noSubClasses);
	}


	public Iterable<? extends TypeId> getTypeIdVertices() {
		return new VertexIterable<TypeId>(this, TypeId.class);
	}
	
	public Iterable<? extends TypeId> getTypeIdVertices(boolean noSubClasses) {
		return new VertexIterable<TypeId>(this, TypeId.class, noSubClasses);
	}


	public Iterable<? extends IntLiteral> getIntLiteralVertices() {
		return new VertexIterable<IntLiteral>(this, IntLiteral.class);
	}
	
	public Iterable<? extends IntLiteral> getIntLiteralVertices(boolean noSubClasses) {
		return new VertexIterable<IntLiteral>(this, IntLiteral.class, noSubClasses);
	}


	public Iterable<? extends PathConstruction> getPathConstructionVertices() {
		return new VertexIterable<PathConstruction>(this, PathConstruction.class);
	}
	
	public Iterable<? extends PathConstruction> getPathConstructionVertices(boolean noSubClasses) {
		return new VertexIterable<PathConstruction>(this, PathConstruction.class, noSubClasses);
	}


	public Iterable<? extends SubgraphExpression> getSubgraphExpressionVertices() {
		return new VertexIterable<SubgraphExpression>(this, SubgraphExpression.class);
	}
	
	public Iterable<? extends SubgraphExpression> getSubgraphExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<SubgraphExpression>(this, SubgraphExpression.class, noSubClasses);
	}


	public Iterable<? extends Declaration> getDeclarationVertices() {
		return new VertexIterable<Declaration>(this, Declaration.class);
	}
	
	public Iterable<? extends Declaration> getDeclarationVertices(boolean noSubClasses) {
		return new VertexIterable<Declaration>(this, Declaration.class, noSubClasses);
	}


	public Iterable<? extends ListRangeConstruction> getListRangeConstructionVertices() {
		return new VertexIterable<ListRangeConstruction>(this, ListRangeConstruction.class);
	}
	
	public Iterable<? extends ListRangeConstruction> getListRangeConstructionVertices(boolean noSubClasses) {
		return new VertexIterable<ListRangeConstruction>(this, ListRangeConstruction.class, noSubClasses);
	}


	public Iterable<? extends CfGrammar> getCfGrammarVertices() {
		return new VertexIterable<CfGrammar>(this, CfGrammar.class);
	}
	
	public Iterable<? extends CfGrammar> getCfGrammarVertices(boolean noSubClasses) {
		return new VertexIterable<CfGrammar>(this, CfGrammar.class, noSubClasses);
	}


	public Iterable<? extends Greql2Vertex> getGreql2VertexVertices() {
		return new VertexIterable<Greql2Vertex>(this, Greql2Vertex.class);
	}
	
	public Iterable<? extends Greql2Vertex> getGreql2VertexVertices(boolean noSubClasses) {
		return new VertexIterable<Greql2Vertex>(this, Greql2Vertex.class, noSubClasses);
	}


	public Iterable<? extends TableComprehension> getTableComprehensionVertices() {
		return new VertexIterable<TableComprehension>(this, TableComprehension.class);
	}
	
	public Iterable<? extends TableComprehension> getTableComprehensionVertices(boolean noSubClasses) {
		return new VertexIterable<TableComprehension>(this, TableComprehension.class, noSubClasses);
	}


	public Iterable<? extends Comprehension> getComprehensionVertices() {
		return new VertexIterable<Comprehension>(this, Comprehension.class);
	}
	
	public Iterable<? extends Comprehension> getComprehensionVertices(boolean noSubClasses) {
		return new VertexIterable<Comprehension>(this, Comprehension.class, noSubClasses);
	}


	public Iterable<? extends Nonterminal> getNonterminalVertices() {
		return new VertexIterable<Nonterminal>(this, Nonterminal.class);
	}
	
	public Iterable<? extends Nonterminal> getNonterminalVertices(boolean noSubClasses) {
		return new VertexIterable<Nonterminal>(this, Nonterminal.class, noSubClasses);
	}


	public Iterable<? extends BoolLiteral> getBoolLiteralVertices() {
		return new VertexIterable<BoolLiteral>(this, BoolLiteral.class);
	}
	
	public Iterable<? extends BoolLiteral> getBoolLiteralVertices(boolean noSubClasses) {
		return new VertexIterable<BoolLiteral>(this, BoolLiteral.class, noSubClasses);
	}


	public Iterable<? extends Symbol> getSymbolVertices() {
		return new VertexIterable<Symbol>(this, Symbol.class);
	}
	
	public Iterable<? extends Symbol> getSymbolVertices(boolean noSubClasses) {
		return new VertexIterable<Symbol>(this, Symbol.class, noSubClasses);
	}


	public Iterable<? extends DefinitionExpression> getDefinitionExpressionVertices() {
		return new VertexIterable<DefinitionExpression>(this, DefinitionExpression.class);
	}
	
	public Iterable<? extends DefinitionExpression> getDefinitionExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<DefinitionExpression>(this, DefinitionExpression.class, noSubClasses);
	}


	public Iterable<? extends AlternativePathDescription> getAlternativePathDescriptionVertices() {
		return new VertexIterable<AlternativePathDescription>(this, AlternativePathDescription.class);
	}
	
	public Iterable<? extends AlternativePathDescription> getAlternativePathDescriptionVertices(boolean noSubClasses) {
		return new VertexIterable<AlternativePathDescription>(this, AlternativePathDescription.class, noSubClasses);
	}


	public Iterable<? extends Expression> getExpressionVertices() {
		return new VertexIterable<Expression>(this, Expression.class);
	}
	
	public Iterable<? extends Expression> getExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<Expression>(this, Expression.class, noSubClasses);
	}


	public Iterable<? extends EdgeSubgraphExpression> getEdgeSubgraphExpressionVertices() {
		return new VertexIterable<EdgeSubgraphExpression>(this, EdgeSubgraphExpression.class);
	}
	
	public Iterable<? extends EdgeSubgraphExpression> getEdgeSubgraphExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<EdgeSubgraphExpression>(this, EdgeSubgraphExpression.class, noSubClasses);
	}


	public Iterable<? extends ComprehensionWithTableHeader> getComprehensionWithTableHeaderVertices() {
		return new VertexIterable<ComprehensionWithTableHeader>(this, ComprehensionWithTableHeader.class);
	}
	
	public Iterable<? extends ComprehensionWithTableHeader> getComprehensionWithTableHeaderVertices(boolean noSubClasses) {
		return new VertexIterable<ComprehensionWithTableHeader>(this, ComprehensionWithTableHeader.class, noSubClasses);
	}


	public Iterable<? extends EdgeVertexList> getEdgeVertexListVertices() {
		return new VertexIterable<EdgeVertexList>(this, EdgeVertexList.class);
	}
	
	public Iterable<? extends EdgeVertexList> getEdgeVertexListVertices(boolean noSubClasses) {
		return new VertexIterable<EdgeVertexList>(this, EdgeVertexList.class, noSubClasses);
	}


	public Iterable<? extends BagConstruction> getBagConstructionVertices() {
		return new VertexIterable<BagConstruction>(this, BagConstruction.class);
	}
	
	public Iterable<? extends BagConstruction> getBagConstructionVertices(boolean noSubClasses) {
		return new VertexIterable<BagConstruction>(this, BagConstruction.class, noSubClasses);
	}


	public Iterable<? extends StringLiteral> getStringLiteralVertices() {
		return new VertexIterable<StringLiteral>(this, StringLiteral.class);
	}
	
	public Iterable<? extends StringLiteral> getStringLiteralVertices(boolean noSubClasses) {
		return new VertexIterable<StringLiteral>(this, StringLiteral.class, noSubClasses);
	}


	public Iterable<? extends ConditionalExpression> getConditionalExpressionVertices() {
		return new VertexIterable<ConditionalExpression>(this, ConditionalExpression.class);
	}
	
	public Iterable<? extends ConditionalExpression> getConditionalExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<ConditionalExpression>(this, ConditionalExpression.class, noSubClasses);
	}


	public Iterable<? extends Variable> getVariableVertices() {
		return new VertexIterable<Variable>(this, Variable.class);
	}
	
	public Iterable<? extends Variable> getVariableVertices(boolean noSubClasses) {
		return new VertexIterable<Variable>(this, Variable.class, noSubClasses);
	}


	public Iterable<? extends ListConstruction> getListConstructionVertices() {
		return new VertexIterable<ListConstruction>(this, ListConstruction.class);
	}
	
	public Iterable<? extends ListConstruction> getListConstructionVertices(boolean noSubClasses) {
		return new VertexIterable<ListConstruction>(this, ListConstruction.class, noSubClasses);
	}


	public Iterable<? extends EdgePathDescription> getEdgePathDescriptionVertices() {
		return new VertexIterable<EdgePathDescription>(this, EdgePathDescription.class);
	}
	
	public Iterable<? extends EdgePathDescription> getEdgePathDescriptionVertices(boolean noSubClasses) {
		return new VertexIterable<EdgePathDescription>(this, EdgePathDescription.class, noSubClasses);
	}


	public Iterable<? extends RecordConstruction> getRecordConstructionVertices() {
		return new VertexIterable<RecordConstruction>(this, RecordConstruction.class);
	}
	
	public Iterable<? extends RecordConstruction> getRecordConstructionVertices(boolean noSubClasses) {
		return new VertexIterable<RecordConstruction>(this, RecordConstruction.class, noSubClasses);
	}


	public Iterable<? extends FunctionId> getFunctionIdVertices() {
		return new VertexIterable<FunctionId>(this, FunctionId.class);
	}
	
	public Iterable<? extends FunctionId> getFunctionIdVertices(boolean noSubClasses) {
		return new VertexIterable<FunctionId>(this, FunctionId.class, noSubClasses);
	}


	public Iterable<? extends BagComprehension> getBagComprehensionVertices() {
		return new VertexIterable<BagComprehension>(this, BagComprehension.class);
	}
	
	public Iterable<? extends BagComprehension> getBagComprehensionVertices(boolean noSubClasses) {
		return new VertexIterable<BagComprehension>(this, BagComprehension.class, noSubClasses);
	}


	public Iterable<? extends PrimaryPathDescription> getPrimaryPathDescriptionVertices() {
		return new VertexIterable<PrimaryPathDescription>(this, PrimaryPathDescription.class);
	}
	
	public Iterable<? extends PrimaryPathDescription> getPrimaryPathDescriptionVertices(boolean noSubClasses) {
		return new VertexIterable<PrimaryPathDescription>(this, PrimaryPathDescription.class, noSubClasses);
	}


	public Iterable<? extends ElementSetExpression> getElementSetExpressionVertices() {
		return new VertexIterable<ElementSetExpression>(this, ElementSetExpression.class);
	}
	
	public Iterable<? extends ElementSetExpression> getElementSetExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<ElementSetExpression>(this, ElementSetExpression.class, noSubClasses);
	}


	public Iterable<? extends TupleConstruction> getTupleConstructionVertices() {
		return new VertexIterable<TupleConstruction>(this, TupleConstruction.class);
	}
	
	public Iterable<? extends TupleConstruction> getTupleConstructionVertices(boolean noSubClasses) {
		return new VertexIterable<TupleConstruction>(this, TupleConstruction.class, noSubClasses);
	}


	public Iterable<? extends LetExpression> getLetExpressionVertices() {
		return new VertexIterable<LetExpression>(this, LetExpression.class);
	}
	
	public Iterable<? extends LetExpression> getLetExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<LetExpression>(this, LetExpression.class, noSubClasses);
	}


	public Iterable<? extends ValueConstruction> getValueConstructionVertices() {
		return new VertexIterable<ValueConstruction>(this, ValueConstruction.class);
	}
	
	public Iterable<? extends ValueConstruction> getValueConstructionVertices(boolean noSubClasses) {
		return new VertexIterable<ValueConstruction>(this, ValueConstruction.class, noSubClasses);
	}


	public Iterable<? extends EdgeSetExpression> getEdgeSetExpressionVertices() {
		return new VertexIterable<EdgeSetExpression>(this, EdgeSetExpression.class);
	}
	
	public Iterable<? extends EdgeSetExpression> getEdgeSetExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<EdgeSetExpression>(this, EdgeSetExpression.class, noSubClasses);
	}


	public Iterable<? extends RoleId> getRoleIdVertices() {
		return new VertexIterable<RoleId>(this, RoleId.class);
	}
	
	public Iterable<? extends RoleId> getRoleIdVertices(boolean noSubClasses) {
		return new VertexIterable<RoleId>(this, RoleId.class, noSubClasses);
	}


	public Iterable<? extends SetConstruction> getSetConstructionVertices() {
		return new VertexIterable<SetConstruction>(this, SetConstruction.class);
	}
	
	public Iterable<? extends SetConstruction> getSetConstructionVertices(boolean noSubClasses) {
		return new VertexIterable<SetConstruction>(this, SetConstruction.class, noSubClasses);
	}


	public Iterable<? extends OptionalPathDescription> getOptionalPathDescriptionVertices() {
		return new VertexIterable<OptionalPathDescription>(this, OptionalPathDescription.class);
	}
	
	public Iterable<? extends OptionalPathDescription> getOptionalPathDescriptionVertices(boolean noSubClasses) {
		return new VertexIterable<OptionalPathDescription>(this, OptionalPathDescription.class, noSubClasses);
	}


	public Iterable<? extends NullLiteral> getNullLiteralVertices() {
		return new VertexIterable<NullLiteral>(this, NullLiteral.class);
	}
	
	public Iterable<? extends NullLiteral> getNullLiteralVertices(boolean noSubClasses) {
		return new VertexIterable<NullLiteral>(this, NullLiteral.class, noSubClasses);
	}


	public Iterable<? extends Greql2Expression> getGreql2ExpressionVertices() {
		return new VertexIterable<Greql2Expression>(this, Greql2Expression.class);
	}
	
	public Iterable<? extends Greql2Expression> getGreql2ExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<Greql2Expression>(this, Greql2Expression.class, noSubClasses);
	}


	public Iterable<? extends TransposedPathDescription> getTransposedPathDescriptionVertices() {
		return new VertexIterable<TransposedPathDescription>(this, TransposedPathDescription.class);
	}
	
	public Iterable<? extends TransposedPathDescription> getTransposedPathDescriptionVertices(boolean noSubClasses) {
		return new VertexIterable<TransposedPathDescription>(this, TransposedPathDescription.class, noSubClasses);
	}


	public Iterable<? extends IntermediateVertexPathDescription> getIntermediateVertexPathDescriptionVertices() {
		return new VertexIterable<IntermediateVertexPathDescription>(this, IntermediateVertexPathDescription.class);
	}
	
	public Iterable<? extends IntermediateVertexPathDescription> getIntermediateVertexPathDescriptionVertices(boolean noSubClasses) {
		return new VertexIterable<IntermediateVertexPathDescription>(this, IntermediateVertexPathDescription.class, noSubClasses);
	}


	public Iterable<? extends IteratedPathDescription> getIteratedPathDescriptionVertices() {
		return new VertexIterable<IteratedPathDescription>(this, IteratedPathDescription.class);
	}
	
	public Iterable<? extends IteratedPathDescription> getIteratedPathDescriptionVertices(boolean noSubClasses) {
		return new VertexIterable<IteratedPathDescription>(this, IteratedPathDescription.class, noSubClasses);
	}


	public Iterable<? extends Definition> getDefinitionVertices() {
		return new VertexIterable<Definition>(this, Definition.class);
	}
	
	public Iterable<? extends Definition> getDefinitionVertices(boolean noSubClasses) {
		return new VertexIterable<Definition>(this, Definition.class, noSubClasses);
	}


	public Iterable<? extends QuantifiedExpression> getQuantifiedExpressionVertices() {
		return new VertexIterable<QuantifiedExpression>(this, QuantifiedExpression.class);
	}
	
	public Iterable<? extends QuantifiedExpression> getQuantifiedExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<QuantifiedExpression>(this, QuantifiedExpression.class, noSubClasses);
	}


	public Iterable<? extends Literal> getLiteralVertices() {
		return new VertexIterable<Literal>(this, Literal.class);
	}
	
	public Iterable<? extends Literal> getLiteralVertices(boolean noSubClasses) {
		return new VertexIterable<Literal>(this, Literal.class, noSubClasses);
	}


	public Iterable<? extends SetComprehension> getSetComprehensionVertices() {
		return new VertexIterable<SetComprehension>(this, SetComprehension.class);
	}
	
	public Iterable<? extends SetComprehension> getSetComprehensionVertices(boolean noSubClasses) {
		return new VertexIterable<SetComprehension>(this, SetComprehension.class, noSubClasses);
	}


	public Iterable<? extends EdgeRestriction> getEdgeRestrictionVertices() {
		return new VertexIterable<EdgeRestriction>(this, EdgeRestriction.class);
	}
	
	public Iterable<? extends EdgeRestriction> getEdgeRestrictionVertices(boolean noSubClasses) {
		return new VertexIterable<EdgeRestriction>(this, EdgeRestriction.class, noSubClasses);
	}


	public Iterable<? extends RightSide> getRightSideVertices() {
		return new VertexIterable<RightSide>(this, RightSide.class);
	}
	
	public Iterable<? extends RightSide> getRightSideVertices(boolean noSubClasses) {
		return new VertexIterable<RightSide>(this, RightSide.class, noSubClasses);
	}


	public Iterable<? extends PathExistence> getPathExistenceVertices() {
		return new VertexIterable<PathExistence>(this, PathExistence.class);
	}
	
	public Iterable<? extends PathExistence> getPathExistenceVertices(boolean noSubClasses) {
		return new VertexIterable<PathExistence>(this, PathExistence.class, noSubClasses);
	}


	public Iterable<? extends ThisLiteral> getThisLiteralVertices() {
		return new VertexIterable<ThisLiteral>(this, ThisLiteral.class);
	}
	
	public Iterable<? extends ThisLiteral> getThisLiteralVertices(boolean noSubClasses) {
		return new VertexIterable<ThisLiteral>(this, ThisLiteral.class, noSubClasses);
	}


	public Iterable<? extends RealLiteral> getRealLiteralVertices() {
		return new VertexIterable<RealLiteral>(this, RealLiteral.class);
	}
	
	public Iterable<? extends RealLiteral> getRealLiteralVertices(boolean noSubClasses) {
		return new VertexIterable<RealLiteral>(this, RealLiteral.class, noSubClasses);
	}


	public Iterable<? extends VertexSubgraphExpression> getVertexSubgraphExpressionVertices() {
		return new VertexIterable<VertexSubgraphExpression>(this, VertexSubgraphExpression.class);
	}
	
	public Iterable<? extends VertexSubgraphExpression> getVertexSubgraphExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<VertexSubgraphExpression>(this, VertexSubgraphExpression.class, noSubClasses);
	}


	public Iterable<? extends SimpleDeclaration> getSimpleDeclarationVertices() {
		return new VertexIterable<SimpleDeclaration>(this, SimpleDeclaration.class);
	}
	
	public Iterable<? extends SimpleDeclaration> getSimpleDeclarationVertices(boolean noSubClasses) {
		return new VertexIterable<SimpleDeclaration>(this, SimpleDeclaration.class, noSubClasses);
	}


	public Iterable<? extends Direction> getDirectionVertices() {
		return new VertexIterable<Direction>(this, Direction.class);
	}
	
	public Iterable<? extends Direction> getDirectionVertices(boolean noSubClasses) {
		return new VertexIterable<Direction>(this, Direction.class, noSubClasses);
	}


	public Iterable<? extends PathExpression> getPathExpressionVertices() {
		return new VertexIterable<PathExpression>(this, PathExpression.class);
	}
	
	public Iterable<? extends PathExpression> getPathExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<PathExpression>(this, PathExpression.class, noSubClasses);
	}


	public Iterable<? extends Identifier> getIdentifierVertices() {
		return new VertexIterable<Identifier>(this, Identifier.class);
	}
	
	public Iterable<? extends Identifier> getIdentifierVertices(boolean noSubClasses) {
		return new VertexIterable<Identifier>(this, Identifier.class, noSubClasses);
	}


	public Iterable<? extends BackwardVertexSet> getBackwardVertexSetVertices() {
		return new VertexIterable<BackwardVertexSet>(this, BackwardVertexSet.class);
	}
	
	public Iterable<? extends BackwardVertexSet> getBackwardVertexSetVertices(boolean noSubClasses) {
		return new VertexIterable<BackwardVertexSet>(this, BackwardVertexSet.class, noSubClasses);
	}


	public Iterable<? extends FunctionApplication> getFunctionApplicationVertices() {
		return new VertexIterable<FunctionApplication>(this, FunctionApplication.class);
	}
	
	public Iterable<? extends FunctionApplication> getFunctionApplicationVertices(boolean noSubClasses) {
		return new VertexIterable<FunctionApplication>(this, FunctionApplication.class, noSubClasses);
	}


	public Iterable<? extends ForwardVertexSet> getForwardVertexSetVertices() {
		return new VertexIterable<ForwardVertexSet>(this, ForwardVertexSet.class);
	}
	
	public Iterable<? extends ForwardVertexSet> getForwardVertexSetVertices(boolean noSubClasses) {
		return new VertexIterable<ForwardVertexSet>(this, ForwardVertexSet.class, noSubClasses);
	}


	public Iterable<? extends SequentialPathDescription> getSequentialPathDescriptionVertices() {
		return new VertexIterable<SequentialPathDescription>(this, SequentialPathDescription.class);
	}
	
	public Iterable<? extends SequentialPathDescription> getSequentialPathDescriptionVertices(boolean noSubClasses) {
		return new VertexIterable<SequentialPathDescription>(this, SequentialPathDescription.class, noSubClasses);
	}


	public Iterable<? extends AttributeId> getAttributeIdVertices() {
		return new VertexIterable<AttributeId>(this, AttributeId.class);
	}
	
	public Iterable<? extends AttributeId> getAttributeIdVertices(boolean noSubClasses) {
		return new VertexIterable<AttributeId>(this, AttributeId.class, noSubClasses);
	}


	public Iterable<? extends VertexSetExpression> getVertexSetExpressionVertices() {
		return new VertexIterable<VertexSetExpression>(this, VertexSetExpression.class);
	}
	
	public Iterable<? extends VertexSetExpression> getVertexSetExpressionVertices(boolean noSubClasses) {
		return new VertexIterable<VertexSetExpression>(this, VertexSetExpression.class, noSubClasses);
	}


	public Iterable<? extends RecordElement> getRecordElementVertices() {
		return new VertexIterable<RecordElement>(this, RecordElement.class);
	}
	
	public Iterable<? extends RecordElement> getRecordElementVertices(boolean noSubClasses) {
		return new VertexIterable<RecordElement>(this, RecordElement.class, noSubClasses);
	}


}
