/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema.impl;

import de.uni_koblenz.jgralab.impl.array.VertexImpl;
import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.VertexClass;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.Greql2Aggregation;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Expression;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf;
import de.uni_koblenz.jgralab.greql2.schema.IsIdOf;
import de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class Greql2ExpressionImpl extends VertexImpl implements Greql2Expression, Greql2Vertex, Vertex {

	protected String _costModel;

	protected String _optimizer;

	protected String _queryText;

	public Greql2ExpressionImpl(int id, Graph g) {
		super(id, g, (VertexClass)g.getGraphClass().getGraphElementClass("Greql2Expression"));
	}

	public Class<? extends AttributedElement> getM1Class() {
		return Greql2Expression.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		if (attributeName.equals("_costModel")) return _costModel;
		if (attributeName.equals("_optimizer")) return _optimizer;
		if (attributeName.equals("_queryText")) return _queryText;
		throw new NoSuchFieldException("Greql2Expression doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		if (attributeName.equals("_costModel")) {
			set_costModel((String) data);
			return;
		}
		if (attributeName.equals("_optimizer")) {
			set_optimizer((String) data);
			return;
		}
		if (attributeName.equals("_queryText")) {
			set_queryText((String) data);
			return;
		}
		throw new NoSuchFieldException("Greql2Expression doesn't contain an attribute " + attributeName);
	}

	public String get_costModel() {
		return _costModel;
	}

	public String get_optimizer() {
		return _optimizer;
	}

	public String get_queryText() {
		return _queryText;
	}

	public void set_costModel(String _costModel) {
		this._costModel = _costModel;
		modified();
	}

	public void set_optimizer(String _optimizer) {
		this._optimizer = _optimizer;
		modified();
	}

	public void set_queryText(String _queryText) {
		this._queryText = _queryText;
		modified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_costModel = io.matchUtfString();
		set_costModel(_costModel);
		_optimizer = io.matchUtfString();
		set_optimizer(_optimizer);
		_queryText = io.matchUtfString();
		set_queryText(_queryText);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_costModel);
		io.writeUtfString(_optimizer);
		io.writeUtfString(_queryText);
	}

	/* add all valid from edges */
	private static Set<Class<? extends Edge>> validFromEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidAlpha()
	 */
	public boolean isValidAlpha(Edge edge) {
		return validFromEdges.contains(edge.getClass());
	}
	
	{

	}
	
	/* add all valid to edges */
	private static Set<Class<? extends Edge>> validToEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidOemga()
	 */
	public boolean isValidOmega(Edge edge) {
		return validToEdges.contains(edge.getClass());
	}
	
	{

		validToEdges.add(IsBoundVarOfImpl.class);

		validToEdges.add(IsIdOfImpl.class);

		validToEdges.add(IsQueryExprOfImpl.class);

	}

	public Greql2Expression getNextGreql2Expression() {
		return (Greql2Expression)getNextVertexOfClass(Greql2Expression.class);
	}

	public Greql2Expression getNextGreql2Expression(boolean noSubClasses) {
		return (Greql2Expression)getNextVertexOfClass(Greql2Expression.class, noSubClasses);
	}

	public Greql2Vertex getNextGreql2Vertex() {
		return (Greql2Vertex)getNextVertexOfClass(Greql2Vertex.class);
	}

	public IsBoundExprOf getFirstIsBoundExprOf() {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class);
	}

	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation) {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class, orientation);
	}

	public Greql2Aggregation getFirstGreql2Aggregation() {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class);
	}

	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation) {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class, orientation);
	}

	public IsTypeExprOf getFirstIsTypeExprOf() {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class);
	}

	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation) {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class, orientation);
	}

	public IsIdOf getFirstIsIdOf() {
		return (IsIdOf)getFirstEdgeOfClass(IsIdOf.class);
	}

	public IsIdOf getFirstIsIdOf(EdgeDirection orientation) {
		return (IsIdOf)getFirstEdgeOfClass(IsIdOf.class, orientation);
	}

	public IsIdOf getFirstIsIdOf(boolean noSubClasses) {
		return (IsIdOf)getFirstEdgeOfClass(IsIdOf.class, noSubClasses);
	}

	public IsIdOf getFirstIsIdOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsIdOf)getFirstEdgeOfClass(IsIdOf.class, orientation, noSubClasses);
	}

	public IsBoundVarOf getFirstIsBoundVarOf() {
		return (IsBoundVarOf)getFirstEdgeOfClass(IsBoundVarOf.class);
	}

	public IsBoundVarOf getFirstIsBoundVarOf(EdgeDirection orientation) {
		return (IsBoundVarOf)getFirstEdgeOfClass(IsBoundVarOf.class, orientation);
	}

	public IsBoundVarOf getFirstIsBoundVarOf(boolean noSubClasses) {
		return (IsBoundVarOf)getFirstEdgeOfClass(IsBoundVarOf.class, noSubClasses);
	}

	public IsBoundVarOf getFirstIsBoundVarOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsBoundVarOf)getFirstEdgeOfClass(IsBoundVarOf.class, orientation, noSubClasses);
	}

	public IsQueryExprOf getFirstIsQueryExprOf() {
		return (IsQueryExprOf)getFirstEdgeOfClass(IsQueryExprOf.class);
	}

	public IsQueryExprOf getFirstIsQueryExprOf(EdgeDirection orientation) {
		return (IsQueryExprOf)getFirstEdgeOfClass(IsQueryExprOf.class, orientation);
	}

	public IsQueryExprOf getFirstIsQueryExprOf(boolean noSubClasses) {
		return (IsQueryExprOf)getFirstEdgeOfClass(IsQueryExprOf.class, noSubClasses);
	}

	public IsQueryExprOf getFirstIsQueryExprOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsQueryExprOf)getFirstEdgeOfClass(IsQueryExprOf.class, orientation, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences() {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences() {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(boolean noSubClasses) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences() {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsIdOf, ? extends Vertex>> getIsIdOfIncidences() {
		return new IncidenceIterable<IsIdOf, Vertex>(this, IsIdOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsIdOf, ? extends Vertex>> getIsIdOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsIdOf, Vertex>(this, IsIdOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsIdOf, ? extends Vertex>> getIsIdOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsIdOf, Vertex>(this, IsIdOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsIdOf, ? extends Vertex>> getIsIdOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsIdOf, Vertex>(this, IsIdOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundVarOf, ? extends Vertex>> getIsBoundVarOfIncidences() {
		return new IncidenceIterable<IsBoundVarOf, Vertex>(this, IsBoundVarOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundVarOf, ? extends Vertex>> getIsBoundVarOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsBoundVarOf, Vertex>(this, IsBoundVarOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundVarOf, ? extends Vertex>> getIsBoundVarOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsBoundVarOf, Vertex>(this, IsBoundVarOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundVarOf, ? extends Vertex>> getIsBoundVarOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsBoundVarOf, Vertex>(this, IsBoundVarOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences() {
		return new IncidenceIterable<IsQueryExprOf, Vertex>(this, IsQueryExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsQueryExprOf, Vertex>(this, IsQueryExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsQueryExprOf, Vertex>(this, IsQueryExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsQueryExprOf, Vertex>(this, IsQueryExprOf.class, direction);
	}

}
