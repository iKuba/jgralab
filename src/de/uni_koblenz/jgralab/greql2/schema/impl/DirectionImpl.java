/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema.impl;

import de.uni_koblenz.jgralab.impl.array.VertexImpl;
import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.VertexClass;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.Direction;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Aggregation;
import de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex;
import de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf;
import de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf;
import de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class DirectionImpl extends VertexImpl implements Direction, Greql2Vertex, Vertex {

	protected String dirValue;

	public DirectionImpl(int id, Graph g) {
		super(id, g, (VertexClass)g.getGraphClass().getGraphElementClass("Direction"));
	}

	public Class<? extends AttributedElement> getM1Class() {
		return Direction.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		if (attributeName.equals("dirValue")) return dirValue;
		throw new NoSuchFieldException("Direction doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		if (attributeName.equals("dirValue")) {
			setDirValue((String) data);
			return;
		}
		throw new NoSuchFieldException("Direction doesn't contain an attribute " + attributeName);
	}

	public String getDirValue() {
		return dirValue;
	}

	public void setDirValue(String dirValue) {
		this.dirValue = dirValue;
		modified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		dirValue = io.matchUtfString();
		setDirValue(dirValue);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(dirValue);
	}

	/* add all valid from edges */
	private static Set<Class<? extends Edge>> validFromEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidAlpha()
	 */
	public boolean isValidAlpha(Edge edge) {
		return validFromEdges.contains(edge.getClass());
	}
	
	{

		validFromEdges.add(IsDirectionOfImpl.class);

	}
	
	/* add all valid to edges */
	private static Set<Class<? extends Edge>> validToEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidOemga()
	 */
	public boolean isValidOmega(Edge edge) {
		return validToEdges.contains(edge.getClass());
	}
	
	{

	}

	public Direction getNextDirection() {
		return (Direction)getNextVertexOfClass(Direction.class);
	}

	public Direction getNextDirection(boolean noSubClasses) {
		return (Direction)getNextVertexOfClass(Direction.class, noSubClasses);
	}

	public Greql2Vertex getNextGreql2Vertex() {
		return (Greql2Vertex)getNextVertexOfClass(Greql2Vertex.class);
	}

	public IsBoundExprOf getFirstIsBoundExprOf() {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class);
	}

	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation) {
		return (IsBoundExprOf)getFirstEdgeOfClass(IsBoundExprOf.class, orientation);
	}

	public Greql2Aggregation getFirstGreql2Aggregation() {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class);
	}

	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation) {
		return (Greql2Aggregation)getFirstEdgeOfClass(Greql2Aggregation.class, orientation);
	}

	public IsTypeExprOf getFirstIsTypeExprOf() {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class);
	}

	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation) {
		return (IsTypeExprOf)getFirstEdgeOfClass(IsTypeExprOf.class, orientation);
	}

	public IsDirectionOf getFirstIsDirectionOf() {
		return (IsDirectionOf)getFirstEdgeOfClass(IsDirectionOf.class);
	}

	public IsDirectionOf getFirstIsDirectionOf(EdgeDirection orientation) {
		return (IsDirectionOf)getFirstEdgeOfClass(IsDirectionOf.class, orientation);
	}

	public IsDirectionOf getFirstIsDirectionOf(boolean noSubClasses) {
		return (IsDirectionOf)getFirstEdgeOfClass(IsDirectionOf.class, noSubClasses);
	}

	public IsDirectionOf getFirstIsDirectionOf(EdgeDirection orientation, boolean noSubClasses) {
		return (IsDirectionOf)getFirstEdgeOfClass(IsDirectionOf.class, orientation, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences() {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsBoundExprOf, Vertex>(this, IsBoundExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences() {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(boolean noSubClasses) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends Greql2Aggregation, ? extends Vertex>> getGreql2AggregationIncidences(EdgeDirection direction) {
		return new IncidenceIterable<Greql2Aggregation, Vertex>(this, Greql2Aggregation.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences() {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsTypeExprOf, Vertex>(this, IsTypeExprOf.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends IsDirectionOf, ? extends Vertex>> getIsDirectionOfIncidences() {
		return new IncidenceIterable<IsDirectionOf, Vertex>(this, IsDirectionOf.class);
	}
	
	public Iterable<EdgeVertexPair<? extends IsDirectionOf, ? extends Vertex>> getIsDirectionOfIncidences(boolean noSubClasses) {
		return new IncidenceIterable<IsDirectionOf, Vertex>(this, IsDirectionOf.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends IsDirectionOf, ? extends Vertex>> getIsDirectionOfIncidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<IsDirectionOf, Vertex>(this, IsDirectionOf.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends IsDirectionOf, ? extends Vertex>> getIsDirectionOfIncidences(EdgeDirection direction) {
		return new IncidenceIterable<IsDirectionOf, Vertex>(this, IsDirectionOf.class, direction);
	}

}
