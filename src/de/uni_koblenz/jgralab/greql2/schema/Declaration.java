/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.impl.DeclarationImpl;

public interface Declaration extends Greql2Vertex, Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<DeclarationImpl> IMPLEMENTATION_CLASS = DeclarationImpl.class;

	/**
	 * @return the next Declaration vertex in the global vertex sequence
	 */
	public Declaration getNextDeclaration();

	/**
	 * @return the next Declaration vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Declaration are accepted
	 */
	public Declaration getNextDeclaration(boolean noSubClasses);

	/**
	 * @return the next Greql2Vertex vertex in the global vertex sequence
	 */
	public Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 */
	public IsBoundExprOf getFirstIsBoundExprOf();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 */
	public IsConstraintOf getFirstIsConstraintOf();

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsConstraintOf getFirstIsConstraintOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsConstraintOf are accepted
	 */
	public IsConstraintOf getFirstIsConstraintOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsConstraintOf are accepted
	 */
	public IsConstraintOf getFirstIsConstraintOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 */
	public Greql2Aggregation getFirstGreql2Aggregation();

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 */
	public IsTypeExprOf getFirstIsTypeExprOf();

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsQuantifiedDeclOf at this vertex
	 */
	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOf();

	/**
	 * @return the first edge of class IsQuantifiedDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsQuantifiedDeclOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsQuantifiedDeclOf are accepted
	 */
	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsQuantifiedDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsQuantifiedDeclOf are accepted
	 */
	public IsQuantifiedDeclOf getFirstIsQuantifiedDeclOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsCompDeclOf at this vertex
	 */
	public IsCompDeclOf getFirstIsCompDeclOf();

	/**
	 * @return the first edge of class IsCompDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsCompDeclOf getFirstIsCompDeclOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsCompDeclOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsCompDeclOf are accepted
	 */
	public IsCompDeclOf getFirstIsCompDeclOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsCompDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsCompDeclOf are accepted
	 */
	public IsCompDeclOf getFirstIsCompDeclOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 */
	public IsSimpleDeclOf getFirstIsSimpleDeclOf();

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSimpleDeclOf getFirstIsSimpleDeclOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSimpleDeclOf are accepted
	 */
	public IsSimpleDeclOf getFirstIsSimpleDeclOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSimpleDeclOf are accepted
	 */
	public IsSimpleDeclOf getFirstIsSimpleDeclOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubgraphOf at this vertex
	 */
	public IsSubgraphOf getFirstIsSubgraphOf();

	/**
	 * @return the first edge of class IsSubgraphOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSubgraphOf getFirstIsSubgraphOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSubgraphOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubgraphOf are accepted
	 */
	public IsSubgraphOf getFirstIsSubgraphOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubgraphOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubgraphOf are accepted
	 */
	public IsSubgraphOf getFirstIsSubgraphOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConstraintOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConstraintOf
	 * @param noSubClasses toggles wether subclasses of IsConstraintOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConstraintOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsConstraintOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConstraintOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQuantifiedDeclOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsQuantifiedDeclOf, ? extends Vertex>> getIsQuantifiedDeclOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQuantifiedDeclOf
	 * @param noSubClasses toggles wether subclasses of IsQuantifiedDeclOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsQuantifiedDeclOf, ? extends Vertex>> getIsQuantifiedDeclOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQuantifiedDeclOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsQuantifiedDeclOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsQuantifiedDeclOf, ? extends Vertex>> getIsQuantifiedDeclOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQuantifiedDeclOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsQuantifiedDeclOf, ? extends Vertex>> getIsQuantifiedDeclOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsCompDeclOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsCompDeclOf, ? extends Vertex>> getIsCompDeclOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsCompDeclOf
	 * @param noSubClasses toggles wether subclasses of IsCompDeclOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsCompDeclOf, ? extends Vertex>> getIsCompDeclOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsCompDeclOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsCompDeclOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsCompDeclOf, ? extends Vertex>> getIsCompDeclOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsCompDeclOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsCompDeclOf, ? extends Vertex>> getIsCompDeclOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubgraphOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubgraphOf
	 * @param noSubClasses toggles wether subclasses of IsSubgraphOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubgraphOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsSubgraphOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubgraphOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf
	 * @param noSubClasses toggles wether subclasses of IsSimpleDeclOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsSimpleDeclOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsSimpleDeclOf, ? extends Vertex>> getIsSimpleDeclOfIncidences(EdgeDirection direction);

}
