/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.impl.SchemaImpl;

import de.uni_koblenz.jgralab.AggregationClass;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphClass;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.ProgressFunction;
import de.uni_koblenz.jgralab.RecordDomain;
import de.uni_koblenz.jgralab.VertexClass;

import de.uni_koblenz.jgralab.greql2.schema.impl.Greql2SchemaFactory;

/**
 * The schema Greql2Schema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class Greql2Schema extends SchemaImpl {

	/**
	 * the singleton instance
	 */
	static Greql2Schema theInstance = null;
	
	/**
	 * @return the singleton instance of Greql2Schema
	 */
	public static Greql2Schema instance() {
		if (theInstance == null) {
			theInstance = new Greql2Schema();
		}
		return theInstance;
	}
	
	/**
	 * Creates a Greql2Schema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private Greql2Schema() {
		super("Greql2Schema", "de.uni_koblenz.jgralab.greql2.schema");

		{
			RecordDomain dom = createRecordDomain("SourcePosition");
			dom.addComponent("length", getDomain("Integer"));
			dom.addComponent("offset", getDomain("Integer"));
		}

		createListDomain(getDomain("SourcePosition"));

		{
			GraphClass gc = createGraphClass("Greql2");
			gc.setAbstract(false);

			{
				VertexClass vc = gc.createVertexClass("Greql2Vertex");
				vc.setAbstract(true);
			}

			{
				VertexClass vc = gc.createVertexClass("Expression");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
			}

			{
				VertexClass vc = gc.createVertexClass("EdgeVertexList");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
			}

			{
				VertexClass vc = gc.createVertexClass("ConditionalExpression");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("ElementSetExpression");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("ValueConstruction");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("EdgeSetExpression");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ElementSetExpression"));
			}

			{
				VertexClass vc = gc.createVertexClass("SetConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ValueConstruction"));
			}

			{
				VertexClass vc = gc.createVertexClass("Greql2Expression");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
				vc.addAttribute(createAttribute("_costModel", getDomain("String")));
				vc.addAttribute(createAttribute("_optimizer", getDomain("String")));
				vc.addAttribute(createAttribute("_queryText", getDomain("String")));
			}

			{
				VertexClass vc = gc.createVertexClass("Definition");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
			}

			{
				VertexClass vc = gc.createVertexClass("QuantifiedExpression");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("Literal");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("EdgeRestriction");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
			}

			{
				VertexClass vc = gc.createVertexClass("RightSide");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
			}

			{
				VertexClass vc = gc.createVertexClass("ThisLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Literal"));
				vc.addAttribute(createAttribute("thisValue", getDomain("String")));
			}

			{
				VertexClass vc = gc.createVertexClass("RealLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Literal"));
				vc.addAttribute(createAttribute("realValue", getDomain("Double")));
			}

			{
				VertexClass vc = gc.createVertexClass("SimpleDeclaration");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
			}

			{
				VertexClass vc = gc.createVertexClass("Direction");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
				vc.addAttribute(createAttribute("dirValue", getDomain("String")));
			}

			{
				VertexClass vc = gc.createVertexClass("PathExpression");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("Identifier");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Expression"));
				vc.addAttribute(createAttribute("name", getDomain("String")));
			}

			{
				VertexClass vc = gc.createVertexClass("BackwardVertexSet");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PathExpression"));
			}

			{
				VertexClass vc = gc.createVertexClass("FunctionApplication");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("ForwardVertexSet");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PathExpression"));
			}

			{
				VertexClass vc = gc.createVertexClass("AttributeId");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Identifier"));
			}

			{
				VertexClass vc = gc.createVertexClass("VertexSetExpression");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ElementSetExpression"));
			}

			{
				VertexClass vc = gc.createVertexClass("RecordElement");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
			}

			{
				VertexClass vc = gc.createVertexClass("RestrictedExpression");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("Quantifier");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
				vc.addAttribute(createAttribute("name", getDomain("String")));
			}

			{
				VertexClass vc = gc.createVertexClass("Production");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
			}

			{
				VertexClass vc = gc.createVertexClass("PathDescription");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("ExponentiatedPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PathDescription"));
			}

			{
				VertexClass vc = gc.createVertexClass("RecordId");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Identifier"));
			}

			{
				VertexClass vc = gc.createVertexClass("PathSystemConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ValueConstruction"));
			}

			{
				VertexClass vc = gc.createVertexClass("IntLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Literal"));
				vc.addAttribute(createAttribute("intValue", getDomain("Integer")));
			}

			{
				VertexClass vc = gc.createVertexClass("PathConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ValueConstruction"));
			}

			{
				VertexClass vc = gc.createVertexClass("SubgraphExpression");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("Declaration");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Greql2Vertex"));
			}

			{
				VertexClass vc = gc.createVertexClass("CfGrammar");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("Comprehension");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("BoolLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Literal"));
				vc.addAttribute(createAttribute("boolValue", getDomain("Boolean")));
			}

			{
				VertexClass vc = gc.createVertexClass("Symbol");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Identifier"));
			}

			{
				VertexClass vc = gc.createVertexClass("DefinitionExpression");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("Expression"));
			}

			{
				VertexClass vc = gc.createVertexClass("AlternativePathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PathDescription"));
			}

			{
				VertexClass vc = gc.createVertexClass("EdgeSubgraphExpression");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("SubgraphExpression"));
			}

			{
				VertexClass vc = gc.createVertexClass("ComprehensionWithTableHeader");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("Comprehension"));
			}

			{
				VertexClass vc = gc.createVertexClass("BagConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ValueConstruction"));
			}

			{
				VertexClass vc = gc.createVertexClass("StringLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Literal"));
				vc.addAttribute(createAttribute("stringValue", getDomain("String")));
			}

			{
				VertexClass vc = gc.createVertexClass("Variable");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Identifier"));
			}

			{
				VertexClass vc = gc.createVertexClass("ListConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ValueConstruction"));
			}

			{
				VertexClass vc = gc.createVertexClass("RecordConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ValueConstruction"));
			}

			{
				VertexClass vc = gc.createVertexClass("FunctionId");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Identifier"));
			}

			{
				VertexClass vc = gc.createVertexClass("BagComprehension");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ComprehensionWithTableHeader"));
			}

			{
				VertexClass vc = gc.createVertexClass("PrimaryPathDescription");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("PathDescription"));
			}

			{
				VertexClass vc = gc.createVertexClass("TupleConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ValueConstruction"));
			}

			{
				VertexClass vc = gc.createVertexClass("LetExpression");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("DefinitionExpression"));
			}

			{
				VertexClass vc = gc.createVertexClass("RoleId");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Identifier"));
			}

			{
				VertexClass vc = gc.createVertexClass("OptionalPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PathDescription"));
			}

			{
				VertexClass vc = gc.createVertexClass("NullLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Literal"));
			}

			{
				VertexClass vc = gc.createVertexClass("TransposedPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PathDescription"));
			}

			{
				VertexClass vc = gc.createVertexClass("IntermediateVertexPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PathDescription"));
			}

			{
				VertexClass vc = gc.createVertexClass("IteratedPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PathDescription"));
				vc.addAttribute(createAttribute("times", getDomain("String")));
			}

			{
				VertexClass vc = gc.createVertexClass("SetComprehension");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Comprehension"));
			}

			{
				VertexClass vc = gc.createVertexClass("PathExistence");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PathExpression"));
			}

			{
				VertexClass vc = gc.createVertexClass("VertexSubgraphExpression");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("SubgraphExpression"));
			}

			{
				VertexClass vc = gc.createVertexClass("SequentialPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PathDescription"));
			}

			{
				VertexClass vc = gc.createVertexClass("WhereExpression");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("DefinitionExpression"));
			}

			{
				VertexClass vc = gc.createVertexClass("SimplePathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PrimaryPathDescription"));
			}

			{
				VertexClass vc = gc.createVertexClass("TypeId");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Symbol"));
				vc.addAttribute(createAttribute("excluded", getDomain("Boolean")));
				vc.addAttribute(createAttribute("type", getDomain("Boolean")));
			}

			{
				VertexClass vc = gc.createVertexClass("ListRangeConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ListConstruction"));
			}

			{
				VertexClass vc = gc.createVertexClass("TableComprehension");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("ComprehensionWithTableHeader"));
			}

			{
				VertexClass vc = gc.createVertexClass("Nonterminal");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("Symbol"));
			}

			{
				VertexClass vc = gc.createVertexClass("EdgePathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("PrimaryPathDescription"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("Greql2Aggregation",
					gc.getVertexClass("Vertex"), 0, 2147483647, "", false,
					gc.getVertexClass("Vertex"), 0, 2147483647, "");
				ec.setAbstract(true);
				ec.addAttribute(createAttribute("sourcePositions", getDomain("List<SourcePosition>")));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsIdOf",
					gc.getVertexClass("Identifier"), 0, 1, "", false,
					gc.getVertexClass("Greql2Expression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsFunctionIdOf",
					gc.getVertexClass("FunctionId"), 1, 1, "", false,
					gc.getVertexClass("FunctionApplication"), 1, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsStartExprOf",
					gc.getVertexClass("Expression"), 0, 1, "", false,
					gc.getVertexClass("PathExpression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsQueryExprOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("Greql2Expression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsEdgeVertexListOf",
					gc.getVertexClass("EdgeVertexList"), 0, 2147483647, "", false,
					gc.getVertexClass("PathSystemConstruction"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsRoleIdOf",
					gc.getVertexClass("RoleId"), 0, 1, "", false,
					gc.getVertexClass("EdgeRestriction"), 1, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsEdgeOrVertexExprOf",
					gc.getVertexClass("Expression"), 2, 2147483647, "", false,
					gc.getVertexClass("EdgeVertexList"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsProductionOf",
					gc.getVertexClass("Production"), 1, 2147483647, "", false,
					gc.getVertexClass("CfGrammar"), 1, 1, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsCompDeclOf",
					gc.getVertexClass("Declaration"), 1, 1, "", false,
					gc.getVertexClass("Comprehension"), 0, 1, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsRootOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("PathSystemConstruction"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsRightSideOf",
					gc.getVertexClass("RightSide"), 1, 2147483647, "", false,
					gc.getVertexClass("Production"), 1, 1, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsEdgeExprOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("EdgePathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsTableHeaderOf",
					gc.getVertexClass("Expression"), 0, 2147483647, "", false,
					gc.getVertexClass("ComprehensionWithTableHeader"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsExponentOf",
					gc.getVertexClass("IntLiteral"), 1, 1, "", false,
					gc.getVertexClass("ExponentiatedPathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsColumnHeaderExprOf",
					gc.getVertexClass("Expression"), 0, 2147483647, "", false,
					gc.getVertexClass("TableComprehension"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsRestrictionOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("RestrictedExpression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsSimpleDeclOf",
					gc.getVertexClass("SimpleDeclaration"), 1, 2147483647, "", false,
					gc.getVertexClass("Declaration"), 1, 1, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsTrueExprOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("ConditionalExpression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsSymbolOf",
					gc.getVertexClass("Symbol"), 0, 2147483647, "", false,
					gc.getVertexClass("RightSide"), 1, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsQuantifierOf",
					gc.getVertexClass("Quantifier"), 1, 1, "", false,
					gc.getVertexClass("QuantifiedExpression"), 1, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsQuantifiedDeclOf",
					gc.getVertexClass("Declaration"), 1, 1, "", false,
					gc.getVertexClass("QuantifiedExpression"), 0, 1, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsGoalRestrOf",
					gc.getVertexClass("Expression"), 0, 1, "", false,
					gc.getVertexClass("PathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsVarOf",
					gc.getVertexClass("Variable"), 1, 1, "", false,
					gc.getVertexClass("Definition"), 0, 1, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsNullExprOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("ConditionalExpression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsFalseExprOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("ConditionalExpression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsLeftSideOf",
					gc.getVertexClass("Nonterminal"), 1, 1, "", false,
					gc.getVertexClass("Production"), 1, 1, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsTargetExprOf",
					gc.getVertexClass("Expression"), 0, 1, "", false,
					gc.getVertexClass("PathExpression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsSubgraphOf",
					gc.getVertexClass("Expression"), 0, 1, "", false,
					gc.getVertexClass("Declaration"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsTypeRestrOf",
					gc.getVertexClass("TypeId"), 0, 2147483647, "", false,
					gc.getVertexClass("Expression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsConditionOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("ConditionalExpression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsRestrictedExprOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("RestrictedExpression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsDefinitionOf",
					gc.getVertexClass("Definition"), 1, 2147483647, "", false,
					gc.getVertexClass("DefinitionExpression"), 1, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsPathOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("PathExpression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsTypeExprOf",
					gc.getVertexClass("Expression"), 0, 2147483647, "", false,
					gc.getVertexClass("Vertex"), 0, 2147483647, "");
				ec.setAbstract(true);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsDirectionOf",
					gc.getVertexClass("Direction"), 1, 1, "", false,
					gc.getVertexClass("PrimaryPathDescription"), 1, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsBoundVarOf",
					gc.getVertexClass("Variable"), 0, 2147483647, "", false,
					gc.getVertexClass("Greql2Expression"), 0, 1, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsDeclaredVarOf",
					gc.getVertexClass("Variable"), 1, 2147483647, "", false,
					gc.getVertexClass("SimpleDeclaration"), 0, 1, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsTypeIdOf",
					gc.getVertexClass("TypeId"), 0, 1, "", false,
					gc.getVertexClass("EdgeRestriction"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsElementOf",
					gc.getVertexClass("EdgeVertexList"), 0, 2147483647, "", false,
					gc.getVertexClass("EdgeVertexList"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsRowHeaderExprOf",
					gc.getVertexClass("Expression"), 0, 2147483647, "", false,
					gc.getVertexClass("TableComprehension"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsArgumentOf",
					gc.getVertexClass("Expression"), 0, 2147483647, "", false,
					gc.getVertexClass("FunctionApplication"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsTypeExprOfFunction",
					gc.getVertexClass("Expression"), 0, 1, "", false,
					gc.getVertexClass("FunctionApplication"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsTypeExprOf"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsCompResultDefOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("Comprehension"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsLastValueOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("ListRangeConstruction"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsFirstValueOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("ListRangeConstruction"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsEdgeRestrOf",
					gc.getVertexClass("EdgeRestriction"), 0, 2147483647, "", false,
					gc.getVertexClass("PrimaryPathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsPartOf",
					gc.getVertexClass("Expression"), 0, 2147483647, "", false,
					gc.getVertexClass("ValueConstruction"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsBoundExprOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("Vertex"), 0, 2147483647, "");
				ec.setAbstract(true);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsIntermediateVertexOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("IntermediateVertexPathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsRecordElementOf",
					gc.getVertexClass("RecordElement"), 1, 2147483647, "", false,
					gc.getVertexClass("RecordConstruction"), 1, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsPathDescriptionOf",
					gc.getVertexClass("PathDescription"), 0, 2147483647, "", false,
					gc.getVertexClass("PathDescription"), 0, 2147483647, "");
				ec.setAbstract(true);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsRecordIdOf",
					gc.getVertexClass("RecordId"), 1, 1, "", false,
					gc.getVertexClass("RecordElement"), 1, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsExponentiatedPathOf",
					gc.getVertexClass("PathDescription"), 1, 1, "", false,
					gc.getVertexClass("ExponentiatedPathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsPathDescriptionOf"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsStartRestrOf",
					gc.getVertexClass("Expression"), 0, 1, "", false,
					gc.getVertexClass("PathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsTypeExprOfDeclaration",
					gc.getVertexClass("Expression"), 0, 1, "", false,
					gc.getVertexClass("SimpleDeclaration"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsTypeExprOf"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsIteratedPathOf",
					gc.getVertexClass("PathDescription"), 1, 1, "", false,
					gc.getVertexClass("IteratedPathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsPathDescriptionOf"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsExprOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("Definition"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsConstraintOf",
					gc.getVertexClass("Expression"), 0, 2147483647, "", false,
					gc.getVertexClass("Declaration"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsRecordExprOf",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("RecordElement"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("Greql2Aggregation"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsBoundExprOfDefinition",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("DefinitionExpression"), 0, 1, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsBoundExprOf"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsAlternativePathOf",
					gc.getVertexClass("PathDescription"), 2, 2147483647, "", false,
					gc.getVertexClass("AlternativePathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsPathDescriptionOf"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsTransposedPathOf",
					gc.getVertexClass("PathDescription"), 1, 1, "", false,
					gc.getVertexClass("TransposedPathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsPathDescriptionOf"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsOptionalPathOf",
					gc.getVertexClass("PathDescription"), 1, 1, "", false,
					gc.getVertexClass("OptionalPathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsPathDescriptionOf"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsSubPathOf",
					gc.getVertexClass("PathDescription"), 2, 2, "", false,
					gc.getVertexClass("IntermediateVertexPathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsPathDescriptionOf"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsBoundExprOfQuantifier",
					gc.getVertexClass("Expression"), 1, 1, "", false,
					gc.getVertexClass("QuantifiedExpression"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsBoundExprOf"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("IsSequenceElementOf",
					gc.getVertexClass("PathDescription"), 2, 2147483647, "", false,
					gc.getVertexClass("SequentialPathDescription"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsPathDescriptionOf"));
			}

		}

		graphFactory = new Greql2SchemaFactory();

	}

	/**
	 * Creates a new Greql2 graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	 */
	public Greql2 createGreql2(int vMax, int eMax) {
		return (Greql2) graphFactory.createGraph(Greql2.class, null, this, vMax, eMax);
	}
	
	/**
	 * Creates a new Greql2 graph with the ID <code>id</code> initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param id the id name of the new graph
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	 */
	public Greql2 createGreql2(String id, int vMax, int eMax) {
		return (Greql2) graphFactory.createGraph(Greql2.class, id, this, vMax, eMax);
	}
	
	/**
	 * Loads a Greql2 graph from the file <code>filename</code>.
	 *
	 * @param filename the name of the file
	 * @return the loaded Greql2
	 * @throw GraphIOException if the graph cannot be loaded
	 */
	public Greql2 loadGreql2(String filename) throws GraphIOException {
		return loadGreql2(filename, null);
	}
	
	/**
	 * Loads a Greql2 graph from the file <code>filename</code>.
	 *
	 * @param filename the name of the file
	 * @param pf a progress function to monitor graph loading
	 * @return the loaded Greql2
	 * @throw GraphIOException if the graph cannot be loaded
	 */
	public Greql2 loadGreql2(String filename, ProgressFunction pf) throws GraphIOException {
		Graph graph = GraphIO.loadGraphFromFile(filename, pf);
		if (!graph.getGraphClass().getName().equals("Greql2")) {
			throw new GraphIOException("Graph in file '" + filename + " is not an instance of GraphClass Greql2");
		}
		return (Greql2) graph;
	}

}
