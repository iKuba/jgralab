/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.impl.EdgeVertexListImpl;

public interface EdgeVertexList extends Greql2Vertex, Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<EdgeVertexListImpl> IMPLEMENTATION_CLASS = EdgeVertexListImpl.class;

	/**
	 * @return the next EdgeVertexList vertex in the global vertex sequence
	 */
	public EdgeVertexList getNextEdgeVertexList();

	/**
	 * @return the next EdgeVertexList vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of EdgeVertexList are accepted
	 */
	public EdgeVertexList getNextEdgeVertexList(boolean noSubClasses);

	/**
	 * @return the next Greql2Vertex vertex in the global vertex sequence
	 */
	public Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the first edge of class IsElementOf at this vertex
	 */
	public IsElementOf getFirstIsElementOf();

	/**
	 * @return the first edge of class IsElementOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsElementOf getFirstIsElementOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsElementOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsElementOf are accepted
	 */
	public IsElementOf getFirstIsElementOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsElementOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsElementOf are accepted
	 */
	public IsElementOf getFirstIsElementOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsEdgeOrVertexExprOf at this vertex
	 */
	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf();

	/**
	 * @return the first edge of class IsEdgeOrVertexExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsEdgeOrVertexExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeOrVertexExprOf are accepted
	 */
	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsEdgeOrVertexExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeOrVertexExprOf are accepted
	 */
	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 */
	public IsBoundExprOf getFirstIsBoundExprOf();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 */
	public Greql2Aggregation getFirstGreql2Aggregation();

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 */
	public IsTypeExprOf getFirstIsTypeExprOf();

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsEdgeVertexListOf at this vertex
	 */
	public IsEdgeVertexListOf getFirstIsEdgeVertexListOf();

	/**
	 * @return the first edge of class IsEdgeVertexListOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsEdgeVertexListOf getFirstIsEdgeVertexListOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsEdgeVertexListOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeVertexListOf are accepted
	 */
	public IsEdgeVertexListOf getFirstIsEdgeVertexListOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsEdgeVertexListOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeVertexListOf are accepted
	 */
	public IsEdgeVertexListOf getFirstIsEdgeVertexListOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsElementOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsElementOf, ? extends Vertex>> getIsElementOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsElementOf
	 * @param noSubClasses toggles wether subclasses of IsElementOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsElementOf, ? extends Vertex>> getIsElementOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsElementOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsElementOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsElementOf, ? extends Vertex>> getIsElementOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsElementOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsElementOf, ? extends Vertex>> getIsElementOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeOrVertexExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeOrVertexExprOf
	 * @param noSubClasses toggles wether subclasses of IsEdgeOrVertexExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeOrVertexExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsEdgeOrVertexExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeOrVertexExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeVertexListOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeVertexListOf, ? extends Vertex>> getIsEdgeVertexListOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeVertexListOf
	 * @param noSubClasses toggles wether subclasses of IsEdgeVertexListOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeVertexListOf, ? extends Vertex>> getIsEdgeVertexListOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeVertexListOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsEdgeVertexListOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeVertexListOf, ? extends Vertex>> getIsEdgeVertexListOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeVertexListOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeVertexListOf, ? extends Vertex>> getIsEdgeVertexListOfIncidences(EdgeDirection direction);

}
