/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.greql2.schema.impl.Greql2ExpressionImpl;

public interface Greql2Expression extends Greql2Vertex, Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<Greql2ExpressionImpl> IMPLEMENTATION_CLASS = Greql2ExpressionImpl.class;

	public String get_costModel();

	public String get_optimizer();

	public String get_queryText();

	public void set_costModel(String _costModel);

	public void set_optimizer(String _optimizer);

	public void set_queryText(String _queryText);

	/**
	 * @return the next Greql2Expression vertex in the global vertex sequence
	 */
	public Greql2Expression getNextGreql2Expression();

	/**
	 * @return the next Greql2Expression vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of Greql2Expression are accepted
	 */
	public Greql2Expression getNextGreql2Expression(boolean noSubClasses);

	/**
	 * @return the next Greql2Vertex vertex in the global vertex sequence
	 */
	public Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 */
	public IsBoundExprOf getFirstIsBoundExprOf();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 */
	public Greql2Aggregation getFirstGreql2Aggregation();

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 */
	public IsTypeExprOf getFirstIsTypeExprOf();

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsIdOf at this vertex
	 */
	public IsIdOf getFirstIsIdOf();

	/**
	 * @return the first edge of class IsIdOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsIdOf getFirstIsIdOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsIdOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsIdOf are accepted
	 */
	public IsIdOf getFirstIsIdOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsIdOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsIdOf are accepted
	 */
	public IsIdOf getFirstIsIdOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsBoundVarOf at this vertex
	 */
	public IsBoundVarOf getFirstIsBoundVarOf();

	/**
	 * @return the first edge of class IsBoundVarOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundVarOf getFirstIsBoundVarOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsBoundVarOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsBoundVarOf are accepted
	 */
	public IsBoundVarOf getFirstIsBoundVarOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsBoundVarOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsBoundVarOf are accepted
	 */
	public IsBoundVarOf getFirstIsBoundVarOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 */
	public IsQueryExprOf getFirstIsQueryExprOf();

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsQueryExprOf getFirstIsQueryExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsQueryExprOf are accepted
	 */
	public IsQueryExprOf getFirstIsQueryExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsQueryExprOf are accepted
	 */
	public IsQueryExprOf getFirstIsQueryExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundVarOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundVarOf, ? extends Vertex>> getIsBoundVarOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundVarOf
	 * @param noSubClasses toggles wether subclasses of IsBoundVarOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundVarOf, ? extends Vertex>> getIsBoundVarOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundVarOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsBoundVarOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundVarOf, ? extends Vertex>> getIsBoundVarOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundVarOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundVarOf, ? extends Vertex>> getIsBoundVarOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsIdOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsIdOf, ? extends Vertex>> getIsIdOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsIdOf
	 * @param noSubClasses toggles wether subclasses of IsIdOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsIdOf, ? extends Vertex>> getIsIdOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsIdOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsIdOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsIdOf, ? extends Vertex>> getIsIdOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsIdOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsIdOf, ? extends Vertex>> getIsIdOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQueryExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQueryExprOf
	 * @param noSubClasses toggles wether subclasses of IsQueryExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQueryExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsQueryExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQueryExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(EdgeDirection direction);

}
