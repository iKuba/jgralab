/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

public interface Expression extends Greql2Vertex, Vertex {

	/**
	 * @return the next Expression vertex in the global vertex sequence
	 */
	public Expression getNextExpression();

	/**
	 * @return the next Greql2Vertex vertex in the global vertex sequence
	 */
	public Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the first edge of class IsConditionOf at this vertex
	 */
	public IsConditionOf getFirstIsConditionOf();

	/**
	 * @return the first edge of class IsConditionOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsConditionOf getFirstIsConditionOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsConditionOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsConditionOf are accepted
	 */
	public IsConditionOf getFirstIsConditionOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsConditionOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsConditionOf are accepted
	 */
	public IsConditionOf getFirstIsConditionOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsTypeRestrOf at this vertex
	 */
	public IsTypeRestrOf getFirstIsTypeRestrOf();

	/**
	 * @return the first edge of class IsTypeRestrOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeRestrOf getFirstIsTypeRestrOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeRestrOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeRestrOf are accepted
	 */
	public IsTypeRestrOf getFirstIsTypeRestrOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsTypeRestrOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeRestrOf are accepted
	 */
	public IsTypeRestrOf getFirstIsTypeRestrOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 */
	public IsConstraintOf getFirstIsConstraintOf();

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsConstraintOf getFirstIsConstraintOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsConstraintOf are accepted
	 */
	public IsConstraintOf getFirstIsConstraintOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsConstraintOf are accepted
	 */
	public IsConstraintOf getFirstIsConstraintOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsRestrictedExprOf at this vertex
	 */
	public IsRestrictedExprOf getFirstIsRestrictedExprOf();

	/**
	 * @return the first edge of class IsRestrictedExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsRestrictedExprOf getFirstIsRestrictedExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRestrictedExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRestrictedExprOf are accepted
	 */
	public IsRestrictedExprOf getFirstIsRestrictedExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsRestrictedExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRestrictedExprOf are accepted
	 */
	public IsRestrictedExprOf getFirstIsRestrictedExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 */
	public IsRecordExprOf getFirstIsRecordExprOf();

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsRecordExprOf getFirstIsRecordExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRecordExprOf are accepted
	 */
	public IsRecordExprOf getFirstIsRecordExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRecordExprOf are accepted
	 */
	public IsRecordExprOf getFirstIsRecordExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsBoundExprOfDefinition at this vertex
	 */
	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinition();

	/**
	 * @return the first edge of class IsBoundExprOfDefinition at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinition(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsBoundExprOfDefinition at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsBoundExprOfDefinition are accepted
	 */
	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinition(boolean noSubClasses);

	/**
	 * @return the first edge of class IsBoundExprOfDefinition at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsBoundExprOfDefinition are accepted
	 */
	public IsBoundExprOfDefinition getFirstIsBoundExprOfDefinition(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsPathOf at this vertex
	 */
	public IsPathOf getFirstIsPathOf();

	/**
	 * @return the first edge of class IsPathOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsPathOf getFirstIsPathOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsPathOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsPathOf are accepted
	 */
	public IsPathOf getFirstIsPathOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsPathOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsPathOf are accepted
	 */
	public IsPathOf getFirstIsPathOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 */
	public Greql2Aggregation getFirstGreql2Aggregation();

	/**
	 * @return the first edge of class Greql2Aggregation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public Greql2Aggregation getFirstGreql2Aggregation(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 */
	public IsTypeExprOf getFirstIsTypeExprOf();

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOf getFirstIsTypeExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsStartExprOf at this vertex
	 */
	public IsStartExprOf getFirstIsStartExprOf();

	/**
	 * @return the first edge of class IsStartExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsStartExprOf getFirstIsStartExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsStartExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsStartExprOf are accepted
	 */
	public IsStartExprOf getFirstIsStartExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsStartExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsStartExprOf are accepted
	 */
	public IsStartExprOf getFirstIsStartExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 */
	public IsQueryExprOf getFirstIsQueryExprOf();

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsQueryExprOf getFirstIsQueryExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsQueryExprOf are accepted
	 */
	public IsQueryExprOf getFirstIsQueryExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsQueryExprOf are accepted
	 */
	public IsQueryExprOf getFirstIsQueryExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsEdgeOrVertexExprOf at this vertex
	 */
	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf();

	/**
	 * @return the first edge of class IsEdgeOrVertexExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsEdgeOrVertexExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeOrVertexExprOf are accepted
	 */
	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsEdgeOrVertexExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeOrVertexExprOf are accepted
	 */
	public IsEdgeOrVertexExprOf getFirstIsEdgeOrVertexExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsBoundExprOfQuantifier at this vertex
	 */
	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifier();

	/**
	 * @return the first edge of class IsBoundExprOfQuantifier at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifier(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsBoundExprOfQuantifier at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsBoundExprOfQuantifier are accepted
	 */
	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifier(boolean noSubClasses);

	/**
	 * @return the first edge of class IsBoundExprOfQuantifier at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsBoundExprOfQuantifier are accepted
	 */
	public IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifier(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsRowHeaderExprOf at this vertex
	 */
	public IsRowHeaderExprOf getFirstIsRowHeaderExprOf();

	/**
	 * @return the first edge of class IsRowHeaderExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsRowHeaderExprOf getFirstIsRowHeaderExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRowHeaderExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRowHeaderExprOf are accepted
	 */
	public IsRowHeaderExprOf getFirstIsRowHeaderExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsRowHeaderExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRowHeaderExprOf are accepted
	 */
	public IsRowHeaderExprOf getFirstIsRowHeaderExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsRootOf at this vertex
	 */
	public IsRootOf getFirstIsRootOf();

	/**
	 * @return the first edge of class IsRootOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsRootOf getFirstIsRootOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRootOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRootOf are accepted
	 */
	public IsRootOf getFirstIsRootOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsRootOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRootOf are accepted
	 */
	public IsRootOf getFirstIsRootOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsTypeExprOfFunction at this vertex
	 */
	public IsTypeExprOfFunction getFirstIsTypeExprOfFunction();

	/**
	 * @return the first edge of class IsTypeExprOfFunction at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOfFunction getFirstIsTypeExprOfFunction(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOfFunction at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeExprOfFunction are accepted
	 */
	public IsTypeExprOfFunction getFirstIsTypeExprOfFunction(boolean noSubClasses);

	/**
	 * @return the first edge of class IsTypeExprOfFunction at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeExprOfFunction are accepted
	 */
	public IsTypeExprOfFunction getFirstIsTypeExprOfFunction(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsArgumentOf at this vertex
	 */
	public IsArgumentOf getFirstIsArgumentOf();

	/**
	 * @return the first edge of class IsArgumentOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsArgumentOf getFirstIsArgumentOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsArgumentOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsArgumentOf are accepted
	 */
	public IsArgumentOf getFirstIsArgumentOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsArgumentOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsArgumentOf are accepted
	 */
	public IsArgumentOf getFirstIsArgumentOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsCompResultDefOf at this vertex
	 */
	public IsCompResultDefOf getFirstIsCompResultDefOf();

	/**
	 * @return the first edge of class IsCompResultDefOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsCompResultDefOf getFirstIsCompResultDefOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsCompResultDefOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsCompResultDefOf are accepted
	 */
	public IsCompResultDefOf getFirstIsCompResultDefOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsCompResultDefOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsCompResultDefOf are accepted
	 */
	public IsCompResultDefOf getFirstIsCompResultDefOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsLastValueOf at this vertex
	 */
	public IsLastValueOf getFirstIsLastValueOf();

	/**
	 * @return the first edge of class IsLastValueOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsLastValueOf getFirstIsLastValueOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsLastValueOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsLastValueOf are accepted
	 */
	public IsLastValueOf getFirstIsLastValueOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsLastValueOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsLastValueOf are accepted
	 */
	public IsLastValueOf getFirstIsLastValueOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsFirstValueOf at this vertex
	 */
	public IsFirstValueOf getFirstIsFirstValueOf();

	/**
	 * @return the first edge of class IsFirstValueOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsFirstValueOf getFirstIsFirstValueOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsFirstValueOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsFirstValueOf are accepted
	 */
	public IsFirstValueOf getFirstIsFirstValueOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsFirstValueOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsFirstValueOf are accepted
	 */
	public IsFirstValueOf getFirstIsFirstValueOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsEdgeExprOf at this vertex
	 */
	public IsEdgeExprOf getFirstIsEdgeExprOf();

	/**
	 * @return the first edge of class IsEdgeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsEdgeExprOf getFirstIsEdgeExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsEdgeExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeExprOf are accepted
	 */
	public IsEdgeExprOf getFirstIsEdgeExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsEdgeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsEdgeExprOf are accepted
	 */
	public IsEdgeExprOf getFirstIsEdgeExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsTableHeaderOf at this vertex
	 */
	public IsTableHeaderOf getFirstIsTableHeaderOf();

	/**
	 * @return the first edge of class IsTableHeaderOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTableHeaderOf getFirstIsTableHeaderOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTableHeaderOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTableHeaderOf are accepted
	 */
	public IsTableHeaderOf getFirstIsTableHeaderOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsTableHeaderOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTableHeaderOf are accepted
	 */
	public IsTableHeaderOf getFirstIsTableHeaderOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsColumnHeaderExprOf at this vertex
	 */
	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOf();

	/**
	 * @return the first edge of class IsColumnHeaderExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsColumnHeaderExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsColumnHeaderExprOf are accepted
	 */
	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsColumnHeaderExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsColumnHeaderExprOf are accepted
	 */
	public IsColumnHeaderExprOf getFirstIsColumnHeaderExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsRestrictionOf at this vertex
	 */
	public IsRestrictionOf getFirstIsRestrictionOf();

	/**
	 * @return the first edge of class IsRestrictionOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsRestrictionOf getFirstIsRestrictionOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRestrictionOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRestrictionOf are accepted
	 */
	public IsRestrictionOf getFirstIsRestrictionOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsRestrictionOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsRestrictionOf are accepted
	 */
	public IsRestrictionOf getFirstIsRestrictionOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsPartOf at this vertex
	 */
	public IsPartOf getFirstIsPartOf();

	/**
	 * @return the first edge of class IsPartOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsPartOf getFirstIsPartOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsPartOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsPartOf are accepted
	 */
	public IsPartOf getFirstIsPartOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsPartOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsPartOf are accepted
	 */
	public IsPartOf getFirstIsPartOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 */
	public IsBoundExprOf getFirstIsBoundExprOf();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsBoundExprOf getFirstIsBoundExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTrueExprOf at this vertex
	 */
	public IsTrueExprOf getFirstIsTrueExprOf();

	/**
	 * @return the first edge of class IsTrueExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTrueExprOf getFirstIsTrueExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTrueExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTrueExprOf are accepted
	 */
	public IsTrueExprOf getFirstIsTrueExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsTrueExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTrueExprOf are accepted
	 */
	public IsTrueExprOf getFirstIsTrueExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsIntermediateVertexOf at this vertex
	 */
	public IsIntermediateVertexOf getFirstIsIntermediateVertexOf();

	/**
	 * @return the first edge of class IsIntermediateVertexOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsIntermediateVertexOf getFirstIsIntermediateVertexOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsIntermediateVertexOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsIntermediateVertexOf are accepted
	 */
	public IsIntermediateVertexOf getFirstIsIntermediateVertexOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsIntermediateVertexOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsIntermediateVertexOf are accepted
	 */
	public IsIntermediateVertexOf getFirstIsIntermediateVertexOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsGoalRestrOf at this vertex
	 */
	public IsGoalRestrOf getFirstIsGoalRestrOf();

	/**
	 * @return the first edge of class IsGoalRestrOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsGoalRestrOf getFirstIsGoalRestrOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsGoalRestrOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsGoalRestrOf are accepted
	 */
	public IsGoalRestrOf getFirstIsGoalRestrOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsGoalRestrOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsGoalRestrOf are accepted
	 */
	public IsGoalRestrOf getFirstIsGoalRestrOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsFalseExprOf at this vertex
	 */
	public IsFalseExprOf getFirstIsFalseExprOf();

	/**
	 * @return the first edge of class IsFalseExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsFalseExprOf getFirstIsFalseExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsFalseExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsFalseExprOf are accepted
	 */
	public IsFalseExprOf getFirstIsFalseExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsFalseExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsFalseExprOf are accepted
	 */
	public IsFalseExprOf getFirstIsFalseExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsNullExprOf at this vertex
	 */
	public IsNullExprOf getFirstIsNullExprOf();

	/**
	 * @return the first edge of class IsNullExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsNullExprOf getFirstIsNullExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsNullExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsNullExprOf are accepted
	 */
	public IsNullExprOf getFirstIsNullExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsNullExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsNullExprOf are accepted
	 */
	public IsNullExprOf getFirstIsNullExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsStartRestrOf at this vertex
	 */
	public IsStartRestrOf getFirstIsStartRestrOf();

	/**
	 * @return the first edge of class IsStartRestrOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsStartRestrOf getFirstIsStartRestrOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsStartRestrOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsStartRestrOf are accepted
	 */
	public IsStartRestrOf getFirstIsStartRestrOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsStartRestrOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsStartRestrOf are accepted
	 */
	public IsStartRestrOf getFirstIsStartRestrOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsTargetExprOf at this vertex
	 */
	public IsTargetExprOf getFirstIsTargetExprOf();

	/**
	 * @return the first edge of class IsTargetExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTargetExprOf getFirstIsTargetExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTargetExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTargetExprOf are accepted
	 */
	public IsTargetExprOf getFirstIsTargetExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsTargetExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTargetExprOf are accepted
	 */
	public IsTargetExprOf getFirstIsTargetExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 */
	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration();

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeExprOfDeclaration are accepted
	 */
	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration(boolean noSubClasses);

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsTypeExprOfDeclaration are accepted
	 */
	public IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsExprOf at this vertex
	 */
	public IsExprOf getFirstIsExprOf();

	/**
	 * @return the first edge of class IsExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsExprOf getFirstIsExprOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsExprOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsExprOf are accepted
	 */
	public IsExprOf getFirstIsExprOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsExprOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsExprOf are accepted
	 */
	public IsExprOf getFirstIsExprOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubgraphOf at this vertex
	 */
	public IsSubgraphOf getFirstIsSubgraphOf();

	/**
	 * @return the first edge of class IsSubgraphOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSubgraphOf getFirstIsSubgraphOf(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSubgraphOf at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubgraphOf are accepted
	 */
	public IsSubgraphOf getFirstIsSubgraphOf(boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubgraphOf at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubgraphOf are accepted
	 */
	public IsSubgraphOf getFirstIsSubgraphOf(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeRestrOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeRestrOf, ? extends Vertex>> getIsTypeRestrOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeRestrOf
	 * @param noSubClasses toggles wether subclasses of IsTypeRestrOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeRestrOf, ? extends Vertex>> getIsTypeRestrOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeRestrOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsTypeRestrOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeRestrOf, ? extends Vertex>> getIsTypeRestrOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeRestrOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeRestrOf, ? extends Vertex>> getIsTypeRestrOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConditionOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsConditionOf, ? extends Vertex>> getIsConditionOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConditionOf
	 * @param noSubClasses toggles wether subclasses of IsConditionOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsConditionOf, ? extends Vertex>> getIsConditionOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConditionOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsConditionOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsConditionOf, ? extends Vertex>> getIsConditionOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConditionOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsConditionOf, ? extends Vertex>> getIsConditionOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConstraintOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConstraintOf
	 * @param noSubClasses toggles wether subclasses of IsConstraintOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConstraintOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsConstraintOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsConstraintOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsConstraintOf, ? extends Vertex>> getIsConstraintOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRestrictedExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsRestrictedExprOf, ? extends Vertex>> getIsRestrictedExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRestrictedExprOf
	 * @param noSubClasses toggles wether subclasses of IsRestrictedExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRestrictedExprOf, ? extends Vertex>> getIsRestrictedExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRestrictedExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsRestrictedExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRestrictedExprOf, ? extends Vertex>> getIsRestrictedExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRestrictedExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsRestrictedExprOf, ? extends Vertex>> getIsRestrictedExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOfDefinition or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfDefinition, ? extends Vertex>> getIsBoundExprOfDefinitionIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOfDefinition
	 * @param noSubClasses toggles wether subclasses of IsBoundExprOfDefinition should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfDefinition, ? extends Vertex>> getIsBoundExprOfDefinitionIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOfDefinition
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsBoundExprOfDefinition should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfDefinition, ? extends Vertex>> getIsBoundExprOfDefinitionIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOfDefinition
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfDefinition, ? extends Vertex>> getIsBoundExprOfDefinitionIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordExprOf
	 * @param noSubClasses toggles wether subclasses of IsRecordExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsRecordExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRecordExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsRecordExprOf, ? extends Vertex>> getIsRecordExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsPathOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsPathOf, ? extends Vertex>> getIsPathOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsPathOf
	 * @param noSubClasses toggles wether subclasses of IsPathOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsPathOf, ? extends Vertex>> getIsPathOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsPathOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsPathOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsPathOf, ? extends Vertex>> getIsPathOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsPathOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsPathOf, ? extends Vertex>> getIsPathOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOf
	 * @param noSubClasses toggles wether subclasses of IsTypeExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsTypeExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOf, ? extends Vertex>> getIsTypeExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQueryExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQueryExprOf
	 * @param noSubClasses toggles wether subclasses of IsQueryExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQueryExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsQueryExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsQueryExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsQueryExprOf, ? extends Vertex>> getIsQueryExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsStartExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsStartExprOf, ? extends Vertex>> getIsStartExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsStartExprOf
	 * @param noSubClasses toggles wether subclasses of IsStartExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsStartExprOf, ? extends Vertex>> getIsStartExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsStartExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsStartExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsStartExprOf, ? extends Vertex>> getIsStartExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsStartExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsStartExprOf, ? extends Vertex>> getIsStartExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeOrVertexExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeOrVertexExprOf
	 * @param noSubClasses toggles wether subclasses of IsEdgeOrVertexExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeOrVertexExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsEdgeOrVertexExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeOrVertexExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeOrVertexExprOf, ? extends Vertex>> getIsEdgeOrVertexExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOfQuantifier or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfQuantifier, ? extends Vertex>> getIsBoundExprOfQuantifierIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOfQuantifier
	 * @param noSubClasses toggles wether subclasses of IsBoundExprOfQuantifier should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfQuantifier, ? extends Vertex>> getIsBoundExprOfQuantifierIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOfQuantifier
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsBoundExprOfQuantifier should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfQuantifier, ? extends Vertex>> getIsBoundExprOfQuantifierIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOfQuantifier
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOfQuantifier, ? extends Vertex>> getIsBoundExprOfQuantifierIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRowHeaderExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsRowHeaderExprOf, ? extends Vertex>> getIsRowHeaderExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRowHeaderExprOf
	 * @param noSubClasses toggles wether subclasses of IsRowHeaderExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRowHeaderExprOf, ? extends Vertex>> getIsRowHeaderExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRowHeaderExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsRowHeaderExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRowHeaderExprOf, ? extends Vertex>> getIsRowHeaderExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRowHeaderExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsRowHeaderExprOf, ? extends Vertex>> getIsRowHeaderExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRootOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsRootOf, ? extends Vertex>> getIsRootOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRootOf
	 * @param noSubClasses toggles wether subclasses of IsRootOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRootOf, ? extends Vertex>> getIsRootOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRootOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsRootOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRootOf, ? extends Vertex>> getIsRootOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRootOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsRootOf, ? extends Vertex>> getIsRootOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfFunction or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfFunction, ? extends Vertex>> getIsTypeExprOfFunctionIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfFunction
	 * @param noSubClasses toggles wether subclasses of IsTypeExprOfFunction should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfFunction, ? extends Vertex>> getIsTypeExprOfFunctionIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfFunction
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsTypeExprOfFunction should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfFunction, ? extends Vertex>> getIsTypeExprOfFunctionIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfFunction
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfFunction, ? extends Vertex>> getIsTypeExprOfFunctionIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsArgumentOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsArgumentOf, ? extends Vertex>> getIsArgumentOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsArgumentOf
	 * @param noSubClasses toggles wether subclasses of IsArgumentOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsArgumentOf, ? extends Vertex>> getIsArgumentOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsArgumentOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsArgumentOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsArgumentOf, ? extends Vertex>> getIsArgumentOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsArgumentOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsArgumentOf, ? extends Vertex>> getIsArgumentOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsCompResultDefOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsCompResultDefOf, ? extends Vertex>> getIsCompResultDefOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsCompResultDefOf
	 * @param noSubClasses toggles wether subclasses of IsCompResultDefOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsCompResultDefOf, ? extends Vertex>> getIsCompResultDefOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsCompResultDefOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsCompResultDefOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsCompResultDefOf, ? extends Vertex>> getIsCompResultDefOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsCompResultDefOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsCompResultDefOf, ? extends Vertex>> getIsCompResultDefOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsLastValueOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsLastValueOf, ? extends Vertex>> getIsLastValueOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsLastValueOf
	 * @param noSubClasses toggles wether subclasses of IsLastValueOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsLastValueOf, ? extends Vertex>> getIsLastValueOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsLastValueOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsLastValueOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsLastValueOf, ? extends Vertex>> getIsLastValueOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsLastValueOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsLastValueOf, ? extends Vertex>> getIsLastValueOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsFirstValueOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsFirstValueOf, ? extends Vertex>> getIsFirstValueOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsFirstValueOf
	 * @param noSubClasses toggles wether subclasses of IsFirstValueOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsFirstValueOf, ? extends Vertex>> getIsFirstValueOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsFirstValueOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsFirstValueOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsFirstValueOf, ? extends Vertex>> getIsFirstValueOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsFirstValueOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsFirstValueOf, ? extends Vertex>> getIsFirstValueOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeExprOf, ? extends Vertex>> getIsEdgeExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeExprOf
	 * @param noSubClasses toggles wether subclasses of IsEdgeExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeExprOf, ? extends Vertex>> getIsEdgeExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsEdgeExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeExprOf, ? extends Vertex>> getIsEdgeExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsEdgeExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsEdgeExprOf, ? extends Vertex>> getIsEdgeExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTableHeaderOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsTableHeaderOf, ? extends Vertex>> getIsTableHeaderOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTableHeaderOf
	 * @param noSubClasses toggles wether subclasses of IsTableHeaderOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTableHeaderOf, ? extends Vertex>> getIsTableHeaderOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTableHeaderOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsTableHeaderOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTableHeaderOf, ? extends Vertex>> getIsTableHeaderOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTableHeaderOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsTableHeaderOf, ? extends Vertex>> getIsTableHeaderOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsColumnHeaderExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsColumnHeaderExprOf, ? extends Vertex>> getIsColumnHeaderExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsColumnHeaderExprOf
	 * @param noSubClasses toggles wether subclasses of IsColumnHeaderExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsColumnHeaderExprOf, ? extends Vertex>> getIsColumnHeaderExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsColumnHeaderExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsColumnHeaderExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsColumnHeaderExprOf, ? extends Vertex>> getIsColumnHeaderExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsColumnHeaderExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsColumnHeaderExprOf, ? extends Vertex>> getIsColumnHeaderExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRestrictionOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsRestrictionOf, ? extends Vertex>> getIsRestrictionOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRestrictionOf
	 * @param noSubClasses toggles wether subclasses of IsRestrictionOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRestrictionOf, ? extends Vertex>> getIsRestrictionOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRestrictionOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsRestrictionOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsRestrictionOf, ? extends Vertex>> getIsRestrictionOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsRestrictionOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsRestrictionOf, ? extends Vertex>> getIsRestrictionOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsPartOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsPartOf, ? extends Vertex>> getIsPartOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsPartOf
	 * @param noSubClasses toggles wether subclasses of IsPartOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsPartOf, ? extends Vertex>> getIsPartOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsPartOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsPartOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsPartOf, ? extends Vertex>> getIsPartOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsPartOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsPartOf, ? extends Vertex>> getIsPartOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOf
	 * @param noSubClasses toggles wether subclasses of IsBoundExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsBoundExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsBoundExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsBoundExprOf, ? extends Vertex>> getIsBoundExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTrueExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsTrueExprOf, ? extends Vertex>> getIsTrueExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTrueExprOf
	 * @param noSubClasses toggles wether subclasses of IsTrueExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTrueExprOf, ? extends Vertex>> getIsTrueExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTrueExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsTrueExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTrueExprOf, ? extends Vertex>> getIsTrueExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTrueExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsTrueExprOf, ? extends Vertex>> getIsTrueExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsIntermediateVertexOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsIntermediateVertexOf, ? extends Vertex>> getIsIntermediateVertexOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsIntermediateVertexOf
	 * @param noSubClasses toggles wether subclasses of IsIntermediateVertexOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsIntermediateVertexOf, ? extends Vertex>> getIsIntermediateVertexOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsIntermediateVertexOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsIntermediateVertexOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsIntermediateVertexOf, ? extends Vertex>> getIsIntermediateVertexOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsIntermediateVertexOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsIntermediateVertexOf, ? extends Vertex>> getIsIntermediateVertexOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsNullExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsNullExprOf, ? extends Vertex>> getIsNullExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsNullExprOf
	 * @param noSubClasses toggles wether subclasses of IsNullExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsNullExprOf, ? extends Vertex>> getIsNullExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsNullExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsNullExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsNullExprOf, ? extends Vertex>> getIsNullExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsNullExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsNullExprOf, ? extends Vertex>> getIsNullExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsFalseExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsFalseExprOf, ? extends Vertex>> getIsFalseExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsFalseExprOf
	 * @param noSubClasses toggles wether subclasses of IsFalseExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsFalseExprOf, ? extends Vertex>> getIsFalseExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsFalseExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsFalseExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsFalseExprOf, ? extends Vertex>> getIsFalseExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsFalseExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsFalseExprOf, ? extends Vertex>> getIsFalseExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsGoalRestrOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsGoalRestrOf, ? extends Vertex>> getIsGoalRestrOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsGoalRestrOf
	 * @param noSubClasses toggles wether subclasses of IsGoalRestrOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsGoalRestrOf, ? extends Vertex>> getIsGoalRestrOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsGoalRestrOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsGoalRestrOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsGoalRestrOf, ? extends Vertex>> getIsGoalRestrOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsGoalRestrOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsGoalRestrOf, ? extends Vertex>> getIsGoalRestrOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTargetExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsTargetExprOf, ? extends Vertex>> getIsTargetExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTargetExprOf
	 * @param noSubClasses toggles wether subclasses of IsTargetExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTargetExprOf, ? extends Vertex>> getIsTargetExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTargetExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsTargetExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTargetExprOf, ? extends Vertex>> getIsTargetExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTargetExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsTargetExprOf, ? extends Vertex>> getIsTargetExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsStartRestrOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsStartRestrOf, ? extends Vertex>> getIsStartRestrOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsStartRestrOf
	 * @param noSubClasses toggles wether subclasses of IsStartRestrOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsStartRestrOf, ? extends Vertex>> getIsStartRestrOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsStartRestrOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsStartRestrOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsStartRestrOf, ? extends Vertex>> getIsStartRestrOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsStartRestrOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsStartRestrOf, ? extends Vertex>> getIsStartRestrOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration
	 * @param noSubClasses toggles wether subclasses of IsTypeExprOfDeclaration should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsTypeExprOfDeclaration should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsTypeExprOfDeclaration, ? extends Vertex>> getIsTypeExprOfDeclarationIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubgraphOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubgraphOf
	 * @param noSubClasses toggles wether subclasses of IsSubgraphOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubgraphOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsSubgraphOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubgraphOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsSubgraphOf, ? extends Vertex>> getIsSubgraphOfIncidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsExprOf or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsExprOf
	 * @param noSubClasses toggles wether subclasses of IsExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsExprOf should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsExprOf
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsExprOf, ? extends Vertex>> getIsExprOfIncidences(EdgeDirection direction);

}
