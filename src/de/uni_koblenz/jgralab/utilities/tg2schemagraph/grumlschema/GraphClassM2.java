/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl.GraphClassM2Impl;

public interface GraphClassM2 extends AttributedElementClassM2, Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<GraphClassM2Impl> IMPLEMENTATION_CLASS = GraphClassM2Impl.class;

	/**
	 * @return the next AttributedElementClassM2 vertex in the global vertex sequence
	 */
	public AttributedElementClassM2 getNextAttributedElementClassM2();

	/**
	 * @return the next GraphClassM2 vertex in the global vertex sequence
	 */
	public GraphClassM2 getNextGraphClassM2();

	/**
	 * @return the next GraphClassM2 vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of GraphClassM2 are accepted
	 */
	public GraphClassM2 getNextGraphClassM2(boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubGraphClassOfM2 at this vertex
	 */
	public IsSubGraphClassOfM2 getFirstIsSubGraphClassOfM2();

	/**
	 * @return the first edge of class IsSubGraphClassOfM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSubGraphClassOfM2 getFirstIsSubGraphClassOfM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSubGraphClassOfM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubGraphClassOfM2 are accepted
	 */
	public IsSubGraphClassOfM2 getFirstIsSubGraphClassOfM2(boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubGraphClassOfM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubGraphClassOfM2 are accepted
	 */
	public IsSubGraphClassOfM2 getFirstIsSubGraphClassOfM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 */
	public HasAttributeM2 getFirstHasAttributeM2();

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public HasAttributeM2 getFirstHasAttributeM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasAttributeM2 are accepted
	 */
	public HasAttributeM2 getFirstHasAttributeM2(boolean noSubClasses);

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasAttributeM2 are accepted
	 */
	public HasAttributeM2 getFirstHasAttributeM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2();

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphElementClassM2 are accepted
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2(boolean noSubClasses);

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphElementClassM2 are accepted
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class ContainsGraphClassM2 at this vertex
	 */
	public ContainsGraphClassM2 getFirstContainsGraphClassM2();

	/**
	 * @return the first edge of class ContainsGraphClassM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public ContainsGraphClassM2 getFirstContainsGraphClassM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class ContainsGraphClassM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphClassM2 are accepted
	 */
	public ContainsGraphClassM2 getFirstContainsGraphClassM2(boolean noSubClasses);

	/**
	 * @return the first edge of class ContainsGraphClassM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphClassM2 are accepted
	 */
	public ContainsGraphClassM2 getFirstContainsGraphClassM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubClassOfM2 at this vertex
	 */
	public IsSubClassOfM2 getFirstIsSubClassOfM2();

	/**
	 * @return the first edge of class IsSubClassOfM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSubClassOfM2 getFirstIsSubClassOfM2(EdgeDirection orientation);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubGraphClassOfM2 or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsSubGraphClassOfM2, ? extends Vertex>> getIsSubGraphClassOfM2Incidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubGraphClassOfM2
	 * @param noSubClasses toggles wether subclasses of IsSubGraphClassOfM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSubGraphClassOfM2, ? extends Vertex>> getIsSubGraphClassOfM2Incidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubGraphClassOfM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsSubGraphClassOfM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSubGraphClassOfM2, ? extends Vertex>> getIsSubGraphClassOfM2Incidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubGraphClassOfM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsSubGraphClassOfM2, ? extends Vertex>> getIsSubGraphClassOfM2Incidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphElementClassM2 or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphElementClassM2, ? extends Vertex>> getContainsGraphElementClassM2Incidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphElementClassM2
	 * @param noSubClasses toggles wether subclasses of ContainsGraphElementClassM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphElementClassM2, ? extends Vertex>> getContainsGraphElementClassM2Incidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphElementClassM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of ContainsGraphElementClassM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphElementClassM2, ? extends Vertex>> getContainsGraphElementClassM2Incidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphElementClassM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphElementClassM2, ? extends Vertex>> getContainsGraphElementClassM2Incidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphClassM2 or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphClassM2
	 * @param noSubClasses toggles wether subclasses of ContainsGraphClassM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphClassM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of ContainsGraphClassM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphClassM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences(EdgeDirection direction);

}
