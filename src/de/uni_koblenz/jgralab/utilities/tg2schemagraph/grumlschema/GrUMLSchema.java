/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema;

import de.uni_koblenz.jgralab.impl.SchemaImpl;

import de.uni_koblenz.jgralab.AggregationClass;
import de.uni_koblenz.jgralab.CompositionClass;
import de.uni_koblenz.jgralab.EdgeClass;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphClass;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.ProgressFunction;
import de.uni_koblenz.jgralab.VertexClass;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl.GrUMLSchemaFactory;

/**
 * The schema GrUMLSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class GrUMLSchema extends SchemaImpl {

	/**
	 * the singleton instance
	 */
	static GrUMLSchema theInstance = null;
	
	/**
	 * @return the singleton instance of GrUMLSchema
	 */
	public static GrUMLSchema instance() {
		if (theInstance == null) {
			theInstance = new GrUMLSchema();
		}
		return theInstance;
	}
	
	/**
	 * Creates a GrUMLSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private GrUMLSchema() {
		super("GrUMLSchema", "de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema");

		createListDomain(getDomain("String"));

		{
			GraphClass gc = createGraphClass("GrUMLSchemaGraph");
			gc.setAbstract(false);

			{
				VertexClass vc = gc.createVertexClass("SchemaM2");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("name", getDomain("String")));
			}

			{
				VertexClass vc = gc.createVertexClass("DomainM2");
				vc.setAbstract(true);
			}

			{
				VertexClass vc = gc.createVertexClass("AttributeM2");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("name", getDomain("String")));
			}

			{
				VertexClass vc = gc.createVertexClass("BasicDomainM2");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("DomainM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("StringDomainM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("BasicDomainM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("ObjectDomainM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("BasicDomainM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("IntDomainM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("BasicDomainM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("AttributedElementClassM2");
				vc.setAbstract(true);
				vc.addAttribute(createAttribute("isAbstract", getDomain("Boolean")));
				vc.addAttribute(createAttribute("name", getDomain("String")));
			}

			{
				VertexClass vc = gc.createVertexClass("GraphClassM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("AttributedElementClassM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("GraphElementClassM2");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("AttributedElementClassM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("EnumDomainM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("BasicDomainM2"));
				vc.addAttribute(createAttribute("constants", getDomain("List<String>")));
			}

			{
				VertexClass vc = gc.createVertexClass("CompositeDomainM2");
				vc.setAbstract(true);
				vc.addSuperClass(gc.getVertexClass("DomainM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("EdgeClassM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("GraphElementClassM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("BooleanDomainM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("BasicDomainM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("LongDomainM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("BasicDomainM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("SetDomainM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("CompositeDomainM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("DoubleDomainM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("BasicDomainM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("VertexClassM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("GraphElementClassM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("ListDomainM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("CompositeDomainM2"));
			}

			{
				VertexClass vc = gc.createVertexClass("AggregationClassM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("EdgeClassM2"));
				vc.addAttribute(createAttribute("aggregateFrom", getDomain("Boolean")));
			}

			{
				VertexClass vc = gc.createVertexClass("RecordDomainM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("CompositeDomainM2"));
				vc.addAttribute(createAttribute("name", getDomain("String")));
			}

			{
				VertexClass vc = gc.createVertexClass("CompositionClassM2");
				vc.setAbstract(false);
				vc.addSuperClass(gc.getVertexClass("AggregationClassM2"));
			}

			{
				AggregationClass ec = gc.createAggregationClass("FromM2",
					gc.getVertexClass("EdgeClassM2"), 0, 2147483647, "", true,
					gc.getVertexClass("VertexClassM2"), 1, 1, "");
				ec.setAbstract(false);
				ec.addAttribute(createAttribute("max", getDomain("Integer")));
				ec.addAttribute(createAttribute("min", getDomain("Integer")));
				ec.addAttribute(createAttribute("roleName", getDomain("String")));
			}

			{
				EdgeClass ec = gc.createEdgeClass("HasBaseDomainM2",
					gc.getVertexClass("CompositeDomainM2"), 0, 2147483647, "",
					gc.getVertexClass("DomainM2"), 0, 1, "");
				ec.setAbstract(false);
			}

			{
				AggregationClass ec = gc.createAggregationClass("ToM2",
					gc.getVertexClass("EdgeClassM2"), 0, 2147483647, "", true,
					gc.getVertexClass("VertexClassM2"), 1, 1, "");
				ec.setAbstract(false);
				ec.addAttribute(createAttribute("max", getDomain("Integer")));
				ec.addAttribute(createAttribute("min", getDomain("Integer")));
				ec.addAttribute(createAttribute("roleName", getDomain("String")));
			}

			{
				AggregationClass ec = gc.createAggregationClass("HasAttributeM2",
					gc.getVertexClass("AttributeM2"), 0, 2147483647, "", false,
					gc.getVertexClass("AttributedElementClassM2"), 1, 1, "");
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = gc.createEdgeClass("HasDomainM2",
					gc.getVertexClass("DomainM2"), 1, 1, "",
					gc.getVertexClass("AttributeM2"), 0, 2147483647, "");
				ec.setAbstract(false);
			}

			{
				CompositionClass ec = gc.createCompositionClass("ContainsGraphElementClassM2",
					gc.getVertexClass("GraphElementClassM2"), 0, 2147483647, "", false,
					gc.getVertexClass("GraphClassM2"), 1, 1, "");
				ec.setAbstract(false);
			}

			{
				CompositionClass ec = gc.createCompositionClass("ContainsGraphClassM2",
					gc.getVertexClass("GraphClassM2"), 1, 2147483647, "", false,
					gc.getVertexClass("SchemaM2"), 1, 1, "");
				ec.setAbstract(false);
			}

			{
				AggregationClass ec = gc.createAggregationClass("HasRecordDomainComponentM2",
					gc.getVertexClass("RecordDomainM2"), 0, 2147483647, "", true,
					gc.getVertexClass("DomainM2"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addAttribute(createAttribute("name", getDomain("String")));
			}

			{
				EdgeClass ec = gc.createEdgeClass("IsSubClassOfM2",
					gc.getVertexClass("AttributedElementClassM2"), 0, 2147483647, "",
					gc.getVertexClass("AttributedElementClassM2"), 0, 2147483647, "");
				ec.setAbstract(true);
			}

			{
				EdgeClass ec = gc.createEdgeClass("IsSubGraphClassOfM2",
					gc.getVertexClass("GraphClassM2"), 0, 2147483647, "",
					gc.getVertexClass("GraphClassM2"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsSubClassOfM2"));
			}

			{
				EdgeClass ec = gc.createEdgeClass("IsSubEdgeClassOfM2",
					gc.getVertexClass("EdgeClassM2"), 0, 2147483647, "",
					gc.getVertexClass("EdgeClassM2"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsSubClassOfM2"));
			}

			{
				EdgeClass ec = gc.createEdgeClass("IsSubVertexClassOfM2",
					gc.getVertexClass("VertexClassM2"), 0, 2147483647, "",
					gc.getVertexClass("VertexClassM2"), 0, 2147483647, "");
				ec.setAbstract(false);
				ec.addSuperClass(gc.getEdgeClass("IsSubClassOfM2"));
			}

		}

		graphFactory = new GrUMLSchemaFactory();

	}

	/**
	 * Creates a new GrUMLSchemaGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	 */
	public GrUMLSchemaGraph createGrUMLSchemaGraph(int vMax, int eMax) {
		return (GrUMLSchemaGraph) graphFactory.createGraph(GrUMLSchemaGraph.class, null, this, vMax, eMax);
	}
	
	/**
	 * Creates a new GrUMLSchemaGraph graph with the ID <code>id</code> initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param id the id name of the new graph
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	 */
	public GrUMLSchemaGraph createGrUMLSchemaGraph(String id, int vMax, int eMax) {
		return (GrUMLSchemaGraph) graphFactory.createGraph(GrUMLSchemaGraph.class, id, this, vMax, eMax);
	}
	
	/**
	 * Loads a GrUMLSchemaGraph graph from the file <code>filename</code>.
	 *
	 * @param filename the name of the file
	 * @return the loaded GrUMLSchemaGraph
	 * @throw GraphIOException if the graph cannot be loaded
	 */
	public GrUMLSchemaGraph loadGrUMLSchemaGraph(String filename) throws GraphIOException {
		return loadGrUMLSchemaGraph(filename, null);
	}
	
	/**
	 * Loads a GrUMLSchemaGraph graph from the file <code>filename</code>.
	 *
	 * @param filename the name of the file
	 * @param pf a progress function to monitor graph loading
	 * @return the loaded GrUMLSchemaGraph
	 * @throw GraphIOException if the graph cannot be loaded
	 */
	public GrUMLSchemaGraph loadGrUMLSchemaGraph(String filename, ProgressFunction pf) throws GraphIOException {
		Graph graph = GraphIO.loadGraphFromFile(filename, pf);
		if (!graph.getGraphClass().getName().equals("GrUMLSchemaGraph")) {
			throw new GraphIOException("Graph in file '" + filename + " is not an instance of GraphClass GrUMLSchemaGraph");
		}
		return (GrUMLSchemaGraph) graph;
	}

}
