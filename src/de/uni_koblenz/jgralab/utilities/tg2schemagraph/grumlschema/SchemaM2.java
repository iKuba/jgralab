/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl.SchemaM2Impl;

public interface SchemaM2 extends Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<SchemaM2Impl> IMPLEMENTATION_CLASS = SchemaM2Impl.class;

	public String getName();

	public void setName(String name);

	/**
	 * @return the next SchemaM2 vertex in the global vertex sequence
	 */
	public SchemaM2 getNextSchemaM2();

	/**
	 * @return the next SchemaM2 vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of SchemaM2 are accepted
	 */
	public SchemaM2 getNextSchemaM2(boolean noSubClasses);

	/**
	 * @return the first edge of class ContainsGraphClassM2 at this vertex
	 */
	public ContainsGraphClassM2 getFirstContainsGraphClassM2();

	/**
	 * @return the first edge of class ContainsGraphClassM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public ContainsGraphClassM2 getFirstContainsGraphClassM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class ContainsGraphClassM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphClassM2 are accepted
	 */
	public ContainsGraphClassM2 getFirstContainsGraphClassM2(boolean noSubClasses);

	/**
	 * @return the first edge of class ContainsGraphClassM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphClassM2 are accepted
	 */
	public ContainsGraphClassM2 getFirstContainsGraphClassM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphClassM2 or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphClassM2
	 * @param noSubClasses toggles wether subclasses of ContainsGraphClassM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphClassM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of ContainsGraphClassM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphClassM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences(EdgeDirection direction);

}
