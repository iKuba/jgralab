/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

public interface AttributedElementClassM2 extends Vertex {

	public boolean isIsAbstract();

	public String getName();

	public void setIsAbstract(boolean isAbstract);

	public void setName(String name);

	/**
	 * @return the next AttributedElementClassM2 vertex in the global vertex sequence
	 */
	public AttributedElementClassM2 getNextAttributedElementClassM2();

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 */
	public HasAttributeM2 getFirstHasAttributeM2();

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public HasAttributeM2 getFirstHasAttributeM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasAttributeM2 are accepted
	 */
	public HasAttributeM2 getFirstHasAttributeM2(boolean noSubClasses);

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasAttributeM2 are accepted
	 */
	public HasAttributeM2 getFirstHasAttributeM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubClassOfM2 at this vertex
	 */
	public IsSubClassOfM2 getFirstIsSubClassOfM2();

	/**
	 * @return the first edge of class IsSubClassOfM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSubClassOfM2 getFirstIsSubClassOfM2(EdgeDirection orientation);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type HasAttributeM2 or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends HasAttributeM2, ? extends Vertex>> getHasAttributeM2Incidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type HasAttributeM2
	 * @param noSubClasses toggles wether subclasses of HasAttributeM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends HasAttributeM2, ? extends Vertex>> getHasAttributeM2Incidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type HasAttributeM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of HasAttributeM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends HasAttributeM2, ? extends Vertex>> getHasAttributeM2Incidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type HasAttributeM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends HasAttributeM2, ? extends Vertex>> getHasAttributeM2Incidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubClassOfM2 or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsSubClassOfM2, ? extends Vertex>> getIsSubClassOfM2Incidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubClassOfM2
	 * @param noSubClasses toggles wether subclasses of IsSubClassOfM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSubClassOfM2, ? extends Vertex>> getIsSubClassOfM2Incidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubClassOfM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsSubClassOfM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSubClassOfM2, ? extends Vertex>> getIsSubClassOfM2Incidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubClassOfM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsSubClassOfM2, ? extends Vertex>> getIsSubClassOfM2Incidences(EdgeDirection direction);

}
