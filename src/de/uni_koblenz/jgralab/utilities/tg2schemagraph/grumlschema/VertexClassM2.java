/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl.VertexClassM2Impl;

public interface VertexClassM2 extends AttributedElementClassM2, GraphElementClassM2, Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<VertexClassM2Impl> IMPLEMENTATION_CLASS = VertexClassM2Impl.class;

	/**
	 * @return the next AttributedElementClassM2 vertex in the global vertex sequence
	 */
	public AttributedElementClassM2 getNextAttributedElementClassM2();

	/**
	 * @return the next GraphElementClassM2 vertex in the global vertex sequence
	 */
	public GraphElementClassM2 getNextGraphElementClassM2();

	/**
	 * @return the next VertexClassM2 vertex in the global vertex sequence
	 */
	public VertexClassM2 getNextVertexClassM2();

	/**
	 * @return the next VertexClassM2 vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of VertexClassM2 are accepted
	 */
	public VertexClassM2 getNextVertexClassM2(boolean noSubClasses);

	/**
	 * @return the first edge of class FromM2 at this vertex
	 */
	public FromM2 getFirstFromM2();

	/**
	 * @return the first edge of class FromM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public FromM2 getFirstFromM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class FromM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of FromM2 are accepted
	 */
	public FromM2 getFirstFromM2(boolean noSubClasses);

	/**
	 * @return the first edge of class FromM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of FromM2 are accepted
	 */
	public FromM2 getFirstFromM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class ToM2 at this vertex
	 */
	public ToM2 getFirstToM2();

	/**
	 * @return the first edge of class ToM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public ToM2 getFirstToM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class ToM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ToM2 are accepted
	 */
	public ToM2 getFirstToM2(boolean noSubClasses);

	/**
	 * @return the first edge of class ToM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ToM2 are accepted
	 */
	public ToM2 getFirstToM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 */
	public HasAttributeM2 getFirstHasAttributeM2();

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public HasAttributeM2 getFirstHasAttributeM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasAttributeM2 are accepted
	 */
	public HasAttributeM2 getFirstHasAttributeM2(boolean noSubClasses);

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasAttributeM2 are accepted
	 */
	public HasAttributeM2 getFirstHasAttributeM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2();

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphElementClassM2 are accepted
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2(boolean noSubClasses);

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphElementClassM2 are accepted
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubVertexClassOfM2 at this vertex
	 */
	public IsSubVertexClassOfM2 getFirstIsSubVertexClassOfM2();

	/**
	 * @return the first edge of class IsSubVertexClassOfM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSubVertexClassOfM2 getFirstIsSubVertexClassOfM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSubVertexClassOfM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubVertexClassOfM2 are accepted
	 */
	public IsSubVertexClassOfM2 getFirstIsSubVertexClassOfM2(boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubVertexClassOfM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubVertexClassOfM2 are accepted
	 */
	public IsSubVertexClassOfM2 getFirstIsSubVertexClassOfM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubClassOfM2 at this vertex
	 */
	public IsSubClassOfM2 getFirstIsSubClassOfM2();

	/**
	 * @return the first edge of class IsSubClassOfM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSubClassOfM2 getFirstIsSubClassOfM2(EdgeDirection orientation);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type FromM2 or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends FromM2, ? extends Vertex>> getFromM2Incidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type FromM2
	 * @param noSubClasses toggles wether subclasses of FromM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends FromM2, ? extends Vertex>> getFromM2Incidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type FromM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of FromM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends FromM2, ? extends Vertex>> getFromM2Incidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type FromM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends FromM2, ? extends Vertex>> getFromM2Incidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ToM2 or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends ToM2, ? extends Vertex>> getToM2Incidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ToM2
	 * @param noSubClasses toggles wether subclasses of ToM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends ToM2, ? extends Vertex>> getToM2Incidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ToM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of ToM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends ToM2, ? extends Vertex>> getToM2Incidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ToM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends ToM2, ? extends Vertex>> getToM2Incidences(EdgeDirection direction);

	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubVertexClassOfM2 or subtypes
	 */
	public Iterable<EdgeVertexPair<? extends IsSubVertexClassOfM2, ? extends Vertex>> getIsSubVertexClassOfM2Incidences();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubVertexClassOfM2
	 * @param noSubClasses toggles wether subclasses of IsSubVertexClassOfM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSubVertexClassOfM2, ? extends Vertex>> getIsSubVertexClassOfM2Incidences(boolean noSubClasses);
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubVertexClassOfM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 * @param noSubClasses toggles wether subclasses of IsSubVertexClassOfM2 should be excluded
	 */
	public Iterable<EdgeVertexPair<? extends IsSubVertexClassOfM2, ? extends Vertex>> getIsSubVertexClassOfM2Incidences(EdgeDirection direction, boolean noSubClasses);
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubVertexClassOfM2
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the iterable
	 */
	public Iterable<EdgeVertexPair<? extends IsSubVertexClassOfM2, ? extends Vertex>> getIsSubVertexClassOfM2Incidences(EdgeDirection direction);

}
