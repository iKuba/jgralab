/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema;

import de.uni_koblenz.jgralab.Aggregation;
import de.uni_koblenz.jgralab.Composition;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl.GrUMLSchemaGraphImpl;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.AttributeM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.AttributedElementClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.CompositeDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.DomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.EdgeClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.GraphClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.GraphElementClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.RecordDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.SchemaM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.VertexClassM2;

public interface GrUMLSchemaGraph extends Graph {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<GrUMLSchemaGraphImpl> IMPLEMENTATION_CLASS = GrUMLSchemaGraphImpl.class;

	// ------------------------ Code for AggregationClassM2 ------------------------

	/**
	 * @return the AggregationClassM2 vertex with specified <code>id</code>
	 */
	public AggregationClassM2 getAggregationClassM2(int id);

	/**
	 * @return the first AggregationClassM2 vertex in this graph
	 */
	public AggregationClassM2 getFirstAggregationClassM2();

	/**
	 * @return the first AggregationClassM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of AggregationClassM2 are accepted
	 */
	public AggregationClassM2 getFirstAggregationClassM2(boolean noSubClasses);

	/**
	 * Creates a new AggregationClassM2 vertex in this graph.
	 *
	*/
	public AggregationClassM2 createAggregationClassM2();

	/**
	 * Creates a new AggregationClassM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public AggregationClassM2 createAggregationClassM2(int id);

	// ------------------------ Code for AttributeM2 ------------------------

	/**
	 * @return the AttributeM2 vertex with specified <code>id</code>
	 */
	public AttributeM2 getAttributeM2(int id);

	/**
	 * @return the first AttributeM2 vertex in this graph
	 */
	public AttributeM2 getFirstAttributeM2();

	/**
	 * @return the first AttributeM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of AttributeM2 are accepted
	 */
	public AttributeM2 getFirstAttributeM2(boolean noSubClasses);

	/**
	 * Creates a new AttributeM2 vertex in this graph.
	 *
	*/
	public AttributeM2 createAttributeM2();

	/**
	 * Creates a new AttributeM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public AttributeM2 createAttributeM2(int id);

	// ------------------------ Code for AttributedElementClassM2 ------------------------

	/**
	 * @return the AttributedElementClassM2 vertex with specified <code>id</code>
	 */
	public AttributedElementClassM2 getAttributedElementClassM2(int id);

	/**
	 * @return the first AttributedElementClassM2 vertex in this graph
	 */
	public AttributedElementClassM2 getFirstAttributedElementClassM2();

	// ------------------------ Code for BasicDomainM2 ------------------------

	/**
	 * @return the BasicDomainM2 vertex with specified <code>id</code>
	 */
	public BasicDomainM2 getBasicDomainM2(int id);

	/**
	 * @return the first BasicDomainM2 vertex in this graph
	 */
	public BasicDomainM2 getFirstBasicDomainM2();

	// ------------------------ Code for BooleanDomainM2 ------------------------

	/**
	 * @return the BooleanDomainM2 vertex with specified <code>id</code>
	 */
	public BooleanDomainM2 getBooleanDomainM2(int id);

	/**
	 * @return the first BooleanDomainM2 vertex in this graph
	 */
	public BooleanDomainM2 getFirstBooleanDomainM2();

	/**
	 * @return the first BooleanDomainM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of BooleanDomainM2 are accepted
	 */
	public BooleanDomainM2 getFirstBooleanDomainM2(boolean noSubClasses);

	/**
	 * Creates a new BooleanDomainM2 vertex in this graph.
	 *
	*/
	public BooleanDomainM2 createBooleanDomainM2();

	/**
	 * Creates a new BooleanDomainM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public BooleanDomainM2 createBooleanDomainM2(int id);

	// ------------------------ Code for CompositeDomainM2 ------------------------

	/**
	 * @return the CompositeDomainM2 vertex with specified <code>id</code>
	 */
	public CompositeDomainM2 getCompositeDomainM2(int id);

	/**
	 * @return the first CompositeDomainM2 vertex in this graph
	 */
	public CompositeDomainM2 getFirstCompositeDomainM2();

	// ------------------------ Code for CompositionClassM2 ------------------------

	/**
	 * @return the CompositionClassM2 vertex with specified <code>id</code>
	 */
	public CompositionClassM2 getCompositionClassM2(int id);

	/**
	 * @return the first CompositionClassM2 vertex in this graph
	 */
	public CompositionClassM2 getFirstCompositionClassM2();

	/**
	 * @return the first CompositionClassM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of CompositionClassM2 are accepted
	 */
	public CompositionClassM2 getFirstCompositionClassM2(boolean noSubClasses);

	/**
	 * Creates a new CompositionClassM2 vertex in this graph.
	 *
	*/
	public CompositionClassM2 createCompositionClassM2();

	/**
	 * Creates a new CompositionClassM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public CompositionClassM2 createCompositionClassM2(int id);

	// ------------------------ Code for ContainsGraphClassM2 ------------------------

	/**
	 * @return the ContainsGraphClassM2 edge with specified <code>id</code>
	 */
	public ContainsGraphClassM2 getContainsGraphClassM2(int id);

	/**
	 * @return the first ContainsGraphClassM2 edge in this graph
	 */
	public ContainsGraphClassM2 getFirstContainsGraphClassM2InGraph();

	/**
	 * @return the first ContainsGraphClassM2 edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphClassM2 are accepted
	 */
	public ContainsGraphClassM2 getFirstContainsGraphClassM2InGraph(boolean noSubClasses);

	/**
	 * Creates a new ContainsGraphClassM2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public ContainsGraphClassM2 createContainsGraphClassM2(GraphClassM2 alpha, SchemaM2 omega);

	/**
	 * Creates a new ContainsGraphClassM2 edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public ContainsGraphClassM2 createContainsGraphClassM2(int id, GraphClassM2 alpha, SchemaM2 omega);

	// ------------------------ Code for ContainsGraphElementClassM2 ------------------------

	/**
	 * @return the ContainsGraphElementClassM2 edge with specified <code>id</code>
	 */
	public ContainsGraphElementClassM2 getContainsGraphElementClassM2(int id);

	/**
	 * @return the first ContainsGraphElementClassM2 edge in this graph
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2InGraph();

	/**
	 * @return the first ContainsGraphElementClassM2 edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphElementClassM2 are accepted
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2InGraph(boolean noSubClasses);

	/**
	 * Creates a new ContainsGraphElementClassM2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public ContainsGraphElementClassM2 createContainsGraphElementClassM2(GraphElementClassM2 alpha, GraphClassM2 omega);

	/**
	 * Creates a new ContainsGraphElementClassM2 edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public ContainsGraphElementClassM2 createContainsGraphElementClassM2(int id, GraphElementClassM2 alpha, GraphClassM2 omega);

	// ------------------------ Code for DomainM2 ------------------------

	/**
	 * @return the DomainM2 vertex with specified <code>id</code>
	 */
	public DomainM2 getDomainM2(int id);

	/**
	 * @return the first DomainM2 vertex in this graph
	 */
	public DomainM2 getFirstDomainM2();

	// ------------------------ Code for DoubleDomainM2 ------------------------

	/**
	 * @return the DoubleDomainM2 vertex with specified <code>id</code>
	 */
	public DoubleDomainM2 getDoubleDomainM2(int id);

	/**
	 * @return the first DoubleDomainM2 vertex in this graph
	 */
	public DoubleDomainM2 getFirstDoubleDomainM2();

	/**
	 * @return the first DoubleDomainM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of DoubleDomainM2 are accepted
	 */
	public DoubleDomainM2 getFirstDoubleDomainM2(boolean noSubClasses);

	/**
	 * Creates a new DoubleDomainM2 vertex in this graph.
	 *
	*/
	public DoubleDomainM2 createDoubleDomainM2();

	/**
	 * Creates a new DoubleDomainM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public DoubleDomainM2 createDoubleDomainM2(int id);

	// ------------------------ Code for EdgeClassM2 ------------------------

	/**
	 * @return the EdgeClassM2 vertex with specified <code>id</code>
	 */
	public EdgeClassM2 getEdgeClassM2(int id);

	/**
	 * @return the first EdgeClassM2 vertex in this graph
	 */
	public EdgeClassM2 getFirstEdgeClassM2();

	/**
	 * @return the first EdgeClassM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of EdgeClassM2 are accepted
	 */
	public EdgeClassM2 getFirstEdgeClassM2(boolean noSubClasses);

	/**
	 * Creates a new EdgeClassM2 vertex in this graph.
	 *
	*/
	public EdgeClassM2 createEdgeClassM2();

	/**
	 * Creates a new EdgeClassM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public EdgeClassM2 createEdgeClassM2(int id);

	// ------------------------ Code for EnumDomainM2 ------------------------

	/**
	 * @return the EnumDomainM2 vertex with specified <code>id</code>
	 */
	public EnumDomainM2 getEnumDomainM2(int id);

	/**
	 * @return the first EnumDomainM2 vertex in this graph
	 */
	public EnumDomainM2 getFirstEnumDomainM2();

	/**
	 * @return the first EnumDomainM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of EnumDomainM2 are accepted
	 */
	public EnumDomainM2 getFirstEnumDomainM2(boolean noSubClasses);

	/**
	 * Creates a new EnumDomainM2 vertex in this graph.
	 *
	*/
	public EnumDomainM2 createEnumDomainM2();

	/**
	 * Creates a new EnumDomainM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public EnumDomainM2 createEnumDomainM2(int id);

	// ------------------------ Code for FromM2 ------------------------

	/**
	 * @return the FromM2 edge with specified <code>id</code>
	 */
	public FromM2 getFromM2(int id);

	/**
	 * @return the first FromM2 edge in this graph
	 */
	public FromM2 getFirstFromM2InGraph();

	/**
	 * @return the first FromM2 edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of FromM2 are accepted
	 */
	public FromM2 getFirstFromM2InGraph(boolean noSubClasses);

	/**
	 * Creates a new FromM2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public FromM2 createFromM2(EdgeClassM2 alpha, VertexClassM2 omega);

	/**
	 * Creates a new FromM2 edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public FromM2 createFromM2(int id, EdgeClassM2 alpha, VertexClassM2 omega);

	// ------------------------ Code for GraphClassM2 ------------------------

	/**
	 * @return the GraphClassM2 vertex with specified <code>id</code>
	 */
	public GraphClassM2 getGraphClassM2(int id);

	/**
	 * @return the first GraphClassM2 vertex in this graph
	 */
	public GraphClassM2 getFirstGraphClassM2();

	/**
	 * @return the first GraphClassM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of GraphClassM2 are accepted
	 */
	public GraphClassM2 getFirstGraphClassM2(boolean noSubClasses);

	/**
	 * Creates a new GraphClassM2 vertex in this graph.
	 *
	*/
	public GraphClassM2 createGraphClassM2();

	/**
	 * Creates a new GraphClassM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public GraphClassM2 createGraphClassM2(int id);

	// ------------------------ Code for GraphElementClassM2 ------------------------

	/**
	 * @return the GraphElementClassM2 vertex with specified <code>id</code>
	 */
	public GraphElementClassM2 getGraphElementClassM2(int id);

	/**
	 * @return the first GraphElementClassM2 vertex in this graph
	 */
	public GraphElementClassM2 getFirstGraphElementClassM2();

	// ------------------------ Code for HasAttributeM2 ------------------------

	/**
	 * @return the HasAttributeM2 edge with specified <code>id</code>
	 */
	public HasAttributeM2 getHasAttributeM2(int id);

	/**
	 * @return the first HasAttributeM2 edge in this graph
	 */
	public HasAttributeM2 getFirstHasAttributeM2InGraph();

	/**
	 * @return the first HasAttributeM2 edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasAttributeM2 are accepted
	 */
	public HasAttributeM2 getFirstHasAttributeM2InGraph(boolean noSubClasses);

	/**
	 * Creates a new HasAttributeM2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public HasAttributeM2 createHasAttributeM2(AttributeM2 alpha, AttributedElementClassM2 omega);

	/**
	 * Creates a new HasAttributeM2 edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public HasAttributeM2 createHasAttributeM2(int id, AttributeM2 alpha, AttributedElementClassM2 omega);

	// ------------------------ Code for HasBaseDomainM2 ------------------------

	/**
	 * @return the HasBaseDomainM2 edge with specified <code>id</code>
	 */
	public HasBaseDomainM2 getHasBaseDomainM2(int id);

	/**
	 * @return the first HasBaseDomainM2 edge in this graph
	 */
	public HasBaseDomainM2 getFirstHasBaseDomainM2InGraph();

	/**
	 * @return the first HasBaseDomainM2 edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasBaseDomainM2 are accepted
	 */
	public HasBaseDomainM2 getFirstHasBaseDomainM2InGraph(boolean noSubClasses);

	/**
	 * Creates a new HasBaseDomainM2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public HasBaseDomainM2 createHasBaseDomainM2(CompositeDomainM2 alpha, DomainM2 omega);

	/**
	 * Creates a new HasBaseDomainM2 edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public HasBaseDomainM2 createHasBaseDomainM2(int id, CompositeDomainM2 alpha, DomainM2 omega);

	// ------------------------ Code for HasDomainM2 ------------------------

	/**
	 * @return the HasDomainM2 edge with specified <code>id</code>
	 */
	public HasDomainM2 getHasDomainM2(int id);

	/**
	 * @return the first HasDomainM2 edge in this graph
	 */
	public HasDomainM2 getFirstHasDomainM2InGraph();

	/**
	 * @return the first HasDomainM2 edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasDomainM2 are accepted
	 */
	public HasDomainM2 getFirstHasDomainM2InGraph(boolean noSubClasses);

	/**
	 * Creates a new HasDomainM2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public HasDomainM2 createHasDomainM2(DomainM2 alpha, AttributeM2 omega);

	/**
	 * Creates a new HasDomainM2 edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public HasDomainM2 createHasDomainM2(int id, DomainM2 alpha, AttributeM2 omega);

	// ------------------------ Code for HasRecordDomainComponentM2 ------------------------

	/**
	 * @return the HasRecordDomainComponentM2 edge with specified <code>id</code>
	 */
	public HasRecordDomainComponentM2 getHasRecordDomainComponentM2(int id);

	/**
	 * @return the first HasRecordDomainComponentM2 edge in this graph
	 */
	public HasRecordDomainComponentM2 getFirstHasRecordDomainComponentM2InGraph();

	/**
	 * @return the first HasRecordDomainComponentM2 edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasRecordDomainComponentM2 are accepted
	 */
	public HasRecordDomainComponentM2 getFirstHasRecordDomainComponentM2InGraph(boolean noSubClasses);

	/**
	 * Creates a new HasRecordDomainComponentM2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public HasRecordDomainComponentM2 createHasRecordDomainComponentM2(RecordDomainM2 alpha, DomainM2 omega);

	/**
	 * Creates a new HasRecordDomainComponentM2 edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public HasRecordDomainComponentM2 createHasRecordDomainComponentM2(int id, RecordDomainM2 alpha, DomainM2 omega);

	// ------------------------ Code for IntDomainM2 ------------------------

	/**
	 * @return the IntDomainM2 vertex with specified <code>id</code>
	 */
	public IntDomainM2 getIntDomainM2(int id);

	/**
	 * @return the first IntDomainM2 vertex in this graph
	 */
	public IntDomainM2 getFirstIntDomainM2();

	/**
	 * @return the first IntDomainM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IntDomainM2 are accepted
	 */
	public IntDomainM2 getFirstIntDomainM2(boolean noSubClasses);

	/**
	 * Creates a new IntDomainM2 vertex in this graph.
	 *
	*/
	public IntDomainM2 createIntDomainM2();

	/**
	 * Creates a new IntDomainM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public IntDomainM2 createIntDomainM2(int id);

	// ------------------------ Code for IsSubClassOfM2 ------------------------

	/**
	 * @return the IsSubClassOfM2 edge with specified <code>id</code>
	 */
	public IsSubClassOfM2 getIsSubClassOfM2(int id);

	/**
	 * @return the first IsSubClassOfM2 edge in this graph
	 */
	public IsSubClassOfM2 getFirstIsSubClassOfM2InGraph();

	// ------------------------ Code for IsSubEdgeClassOfM2 ------------------------

	/**
	 * @return the IsSubEdgeClassOfM2 edge with specified <code>id</code>
	 */
	public IsSubEdgeClassOfM2 getIsSubEdgeClassOfM2(int id);

	/**
	 * @return the first IsSubEdgeClassOfM2 edge in this graph
	 */
	public IsSubEdgeClassOfM2 getFirstIsSubEdgeClassOfM2InGraph();

	/**
	 * @return the first IsSubEdgeClassOfM2 edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubEdgeClassOfM2 are accepted
	 */
	public IsSubEdgeClassOfM2 getFirstIsSubEdgeClassOfM2InGraph(boolean noSubClasses);

	/**
	 * Creates a new IsSubEdgeClassOfM2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSubEdgeClassOfM2 createIsSubEdgeClassOfM2(EdgeClassM2 alpha, EdgeClassM2 omega);

	/**
	 * Creates a new IsSubEdgeClassOfM2 edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSubEdgeClassOfM2 createIsSubEdgeClassOfM2(int id, EdgeClassM2 alpha, EdgeClassM2 omega);

	// ------------------------ Code for IsSubGraphClassOfM2 ------------------------

	/**
	 * @return the IsSubGraphClassOfM2 edge with specified <code>id</code>
	 */
	public IsSubGraphClassOfM2 getIsSubGraphClassOfM2(int id);

	/**
	 * @return the first IsSubGraphClassOfM2 edge in this graph
	 */
	public IsSubGraphClassOfM2 getFirstIsSubGraphClassOfM2InGraph();

	/**
	 * @return the first IsSubGraphClassOfM2 edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubGraphClassOfM2 are accepted
	 */
	public IsSubGraphClassOfM2 getFirstIsSubGraphClassOfM2InGraph(boolean noSubClasses);

	/**
	 * Creates a new IsSubGraphClassOfM2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSubGraphClassOfM2 createIsSubGraphClassOfM2(GraphClassM2 alpha, GraphClassM2 omega);

	/**
	 * Creates a new IsSubGraphClassOfM2 edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSubGraphClassOfM2 createIsSubGraphClassOfM2(int id, GraphClassM2 alpha, GraphClassM2 omega);

	// ------------------------ Code for IsSubVertexClassOfM2 ------------------------

	/**
	 * @return the IsSubVertexClassOfM2 edge with specified <code>id</code>
	 */
	public IsSubVertexClassOfM2 getIsSubVertexClassOfM2(int id);

	/**
	 * @return the first IsSubVertexClassOfM2 edge in this graph
	 */
	public IsSubVertexClassOfM2 getFirstIsSubVertexClassOfM2InGraph();

	/**
	 * @return the first IsSubVertexClassOfM2 edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubVertexClassOfM2 are accepted
	 */
	public IsSubVertexClassOfM2 getFirstIsSubVertexClassOfM2InGraph(boolean noSubClasses);

	/**
	 * Creates a new IsSubVertexClassOfM2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSubVertexClassOfM2 createIsSubVertexClassOfM2(VertexClassM2 alpha, VertexClassM2 omega);

	/**
	 * Creates a new IsSubVertexClassOfM2 edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public IsSubVertexClassOfM2 createIsSubVertexClassOfM2(int id, VertexClassM2 alpha, VertexClassM2 omega);

	// ------------------------ Code for ListDomainM2 ------------------------

	/**
	 * @return the ListDomainM2 vertex with specified <code>id</code>
	 */
	public ListDomainM2 getListDomainM2(int id);

	/**
	 * @return the first ListDomainM2 vertex in this graph
	 */
	public ListDomainM2 getFirstListDomainM2();

	/**
	 * @return the first ListDomainM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ListDomainM2 are accepted
	 */
	public ListDomainM2 getFirstListDomainM2(boolean noSubClasses);

	/**
	 * Creates a new ListDomainM2 vertex in this graph.
	 *
	*/
	public ListDomainM2 createListDomainM2();

	/**
	 * Creates a new ListDomainM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public ListDomainM2 createListDomainM2(int id);

	// ------------------------ Code for LongDomainM2 ------------------------

	/**
	 * @return the LongDomainM2 vertex with specified <code>id</code>
	 */
	public LongDomainM2 getLongDomainM2(int id);

	/**
	 * @return the first LongDomainM2 vertex in this graph
	 */
	public LongDomainM2 getFirstLongDomainM2();

	/**
	 * @return the first LongDomainM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of LongDomainM2 are accepted
	 */
	public LongDomainM2 getFirstLongDomainM2(boolean noSubClasses);

	/**
	 * Creates a new LongDomainM2 vertex in this graph.
	 *
	*/
	public LongDomainM2 createLongDomainM2();

	/**
	 * Creates a new LongDomainM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public LongDomainM2 createLongDomainM2(int id);

	// ------------------------ Code for ObjectDomainM2 ------------------------

	/**
	 * @return the ObjectDomainM2 vertex with specified <code>id</code>
	 */
	public ObjectDomainM2 getObjectDomainM2(int id);

	/**
	 * @return the first ObjectDomainM2 vertex in this graph
	 */
	public ObjectDomainM2 getFirstObjectDomainM2();

	/**
	 * @return the first ObjectDomainM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ObjectDomainM2 are accepted
	 */
	public ObjectDomainM2 getFirstObjectDomainM2(boolean noSubClasses);

	/**
	 * Creates a new ObjectDomainM2 vertex in this graph.
	 *
	*/
	public ObjectDomainM2 createObjectDomainM2();

	/**
	 * Creates a new ObjectDomainM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public ObjectDomainM2 createObjectDomainM2(int id);

	// ------------------------ Code for RecordDomainM2 ------------------------

	/**
	 * @return the RecordDomainM2 vertex with specified <code>id</code>
	 */
	public RecordDomainM2 getRecordDomainM2(int id);

	/**
	 * @return the first RecordDomainM2 vertex in this graph
	 */
	public RecordDomainM2 getFirstRecordDomainM2();

	/**
	 * @return the first RecordDomainM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of RecordDomainM2 are accepted
	 */
	public RecordDomainM2 getFirstRecordDomainM2(boolean noSubClasses);

	/**
	 * Creates a new RecordDomainM2 vertex in this graph.
	 *
	*/
	public RecordDomainM2 createRecordDomainM2();

	/**
	 * Creates a new RecordDomainM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public RecordDomainM2 createRecordDomainM2(int id);

	// ------------------------ Code for SchemaM2 ------------------------

	/**
	 * @return the SchemaM2 vertex with specified <code>id</code>
	 */
	public SchemaM2 getSchemaM2(int id);

	/**
	 * @return the first SchemaM2 vertex in this graph
	 */
	public SchemaM2 getFirstSchemaM2();

	/**
	 * @return the first SchemaM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of SchemaM2 are accepted
	 */
	public SchemaM2 getFirstSchemaM2(boolean noSubClasses);

	/**
	 * Creates a new SchemaM2 vertex in this graph.
	 *
	*/
	public SchemaM2 createSchemaM2();

	/**
	 * Creates a new SchemaM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public SchemaM2 createSchemaM2(int id);

	// ------------------------ Code for SetDomainM2 ------------------------

	/**
	 * @return the SetDomainM2 vertex with specified <code>id</code>
	 */
	public SetDomainM2 getSetDomainM2(int id);

	/**
	 * @return the first SetDomainM2 vertex in this graph
	 */
	public SetDomainM2 getFirstSetDomainM2();

	/**
	 * @return the first SetDomainM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of SetDomainM2 are accepted
	 */
	public SetDomainM2 getFirstSetDomainM2(boolean noSubClasses);

	/**
	 * Creates a new SetDomainM2 vertex in this graph.
	 *
	*/
	public SetDomainM2 createSetDomainM2();

	/**
	 * Creates a new SetDomainM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public SetDomainM2 createSetDomainM2(int id);

	// ------------------------ Code for StringDomainM2 ------------------------

	/**
	 * @return the StringDomainM2 vertex with specified <code>id</code>
	 */
	public StringDomainM2 getStringDomainM2(int id);

	/**
	 * @return the first StringDomainM2 vertex in this graph
	 */
	public StringDomainM2 getFirstStringDomainM2();

	/**
	 * @return the first StringDomainM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of StringDomainM2 are accepted
	 */
	public StringDomainM2 getFirstStringDomainM2(boolean noSubClasses);

	/**
	 * Creates a new StringDomainM2 vertex in this graph.
	 *
	*/
	public StringDomainM2 createStringDomainM2();

	/**
	 * Creates a new StringDomainM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public StringDomainM2 createStringDomainM2(int id);

	// ------------------------ Code for ToM2 ------------------------

	/**
	 * @return the ToM2 edge with specified <code>id</code>
	 */
	public ToM2 getToM2(int id);

	/**
	 * @return the first ToM2 edge in this graph
	 */
	public ToM2 getFirstToM2InGraph();

	/**
	 * @return the first ToM2 edge in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ToM2 are accepted
	 */
	public ToM2 getFirstToM2InGraph(boolean noSubClasses);

	/**
	 * Creates a new ToM2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public ToM2 createToM2(EdgeClassM2 alpha, VertexClassM2 omega);

	/**
	 * Creates a new ToM2 edge in this graph.
	 *
	 * @param id the <code>id</code> of the edge
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public ToM2 createToM2(int id, EdgeClassM2 alpha, VertexClassM2 omega);

	// ------------------------ Code for VertexClassM2 ------------------------

	/**
	 * @return the VertexClassM2 vertex with specified <code>id</code>
	 */
	public VertexClassM2 getVertexClassM2(int id);

	/**
	 * @return the first VertexClassM2 vertex in this graph
	 */
	public VertexClassM2 getFirstVertexClassM2();

	/**
	 * @return the first VertexClassM2 vertex in this graph
	 * @param noSubClasses if set to <code>true</code>, no subclasses of VertexClassM2 are accepted
	 */
	public VertexClassM2 getFirstVertexClassM2(boolean noSubClasses);

	/**
	 * Creates a new VertexClassM2 vertex in this graph.
	 *
	*/
	public VertexClassM2 createVertexClassM2();

	/**
	 * Creates a new VertexClassM2 vertex in this graph.
	 *
	 * @param id the <code>id</code> of the vertex
	*/
	public VertexClassM2 createVertexClassM2(int id);

	/**
	 * Returns an iterable for all edges of this vertex that are of type HasBaseDomainM2 or subtypes
	 */
	public Iterable<? extends HasBaseDomainM2> getHasBaseDomainM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type HasBaseDomainM2
	 * @param noSubClasses toggles wether subclasses of HasBaseDomainM2 should be excluded
	 */
	public Iterable<? extends HasBaseDomainM2> getHasBaseDomainM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsSubEdgeClassOfM2 or subtypes
	 */
	public Iterable<? extends IsSubEdgeClassOfM2> getIsSubEdgeClassOfM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubEdgeClassOfM2
	 * @param noSubClasses toggles wether subclasses of IsSubEdgeClassOfM2 should be excluded
	 */
	public Iterable<? extends IsSubEdgeClassOfM2> getIsSubEdgeClassOfM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type HasAttributeM2 or subtypes
	 */
	public Iterable<? extends HasAttributeM2> getHasAttributeM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type HasAttributeM2
	 * @param noSubClasses toggles wether subclasses of HasAttributeM2 should be excluded
	 */
	public Iterable<? extends HasAttributeM2> getHasAttributeM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type ContainsGraphElementClassM2 or subtypes
	 */
	public Iterable<? extends ContainsGraphElementClassM2> getContainsGraphElementClassM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphElementClassM2
	 * @param noSubClasses toggles wether subclasses of ContainsGraphElementClassM2 should be excluded
	 */
	public Iterable<? extends ContainsGraphElementClassM2> getContainsGraphElementClassM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type ContainsGraphClassM2 or subtypes
	 */
	public Iterable<? extends ContainsGraphClassM2> getContainsGraphClassM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ContainsGraphClassM2
	 * @param noSubClasses toggles wether subclasses of ContainsGraphClassM2 should be excluded
	 */
	public Iterable<? extends ContainsGraphClassM2> getContainsGraphClassM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type FromM2 or subtypes
	 */
	public Iterable<? extends FromM2> getFromM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type FromM2
	 * @param noSubClasses toggles wether subclasses of FromM2 should be excluded
	 */
	public Iterable<? extends FromM2> getFromM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsSubGraphClassOfM2 or subtypes
	 */
	public Iterable<? extends IsSubGraphClassOfM2> getIsSubGraphClassOfM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubGraphClassOfM2
	 * @param noSubClasses toggles wether subclasses of IsSubGraphClassOfM2 should be excluded
	 */
	public Iterable<? extends IsSubGraphClassOfM2> getIsSubGraphClassOfM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type ToM2 or subtypes
	 */
	public Iterable<? extends ToM2> getToM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type ToM2
	 * @param noSubClasses toggles wether subclasses of ToM2 should be excluded
	 */
	public Iterable<? extends ToM2> getToM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type HasDomainM2 or subtypes
	 */
	public Iterable<? extends HasDomainM2> getHasDomainM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type HasDomainM2
	 * @param noSubClasses toggles wether subclasses of HasDomainM2 should be excluded
	 */
	public Iterable<? extends HasDomainM2> getHasDomainM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsSubVertexClassOfM2 or subtypes
	 */
	public Iterable<? extends IsSubVertexClassOfM2> getIsSubVertexClassOfM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubVertexClassOfM2
	 * @param noSubClasses toggles wether subclasses of IsSubVertexClassOfM2 should be excluded
	 */
	public Iterable<? extends IsSubVertexClassOfM2> getIsSubVertexClassOfM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type HasRecordDomainComponentM2 or subtypes
	 */
	public Iterable<? extends HasRecordDomainComponentM2> getHasRecordDomainComponentM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type HasRecordDomainComponentM2
	 * @param noSubClasses toggles wether subclasses of HasRecordDomainComponentM2 should be excluded
	 */
	public Iterable<? extends HasRecordDomainComponentM2> getHasRecordDomainComponentM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all edges of this vertex that are of type IsSubClassOfM2 or subtypes
	 */
	public Iterable<? extends IsSubClassOfM2> getIsSubClassOfM2Edges();
	
	/**
	 * Returns an iterable for all incidence edges of this vertex that are of type IsSubClassOfM2
	 * @param noSubClasses toggles wether subclasses of IsSubClassOfM2 should be excluded
	 */
	public Iterable<? extends IsSubClassOfM2> getIsSubClassOfM2Edges(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type EnumDomainM2 or subtypes
	 */
	public Iterable<? extends EnumDomainM2> getEnumDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type EnumDomainM2
	 * @param noSubClasses toggles wether subclasses of EnumDomainM2 should be excluded
	 */
	public Iterable<? extends EnumDomainM2> getEnumDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type CompositeDomainM2 or subtypes
	 */
	public Iterable<? extends CompositeDomainM2> getCompositeDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type CompositeDomainM2
	 * @param noSubClasses toggles wether subclasses of CompositeDomainM2 should be excluded
	 */
	public Iterable<? extends CompositeDomainM2> getCompositeDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type SchemaM2 or subtypes
	 */
	public Iterable<? extends SchemaM2> getSchemaM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type SchemaM2
	 * @param noSubClasses toggles wether subclasses of SchemaM2 should be excluded
	 */
	public Iterable<? extends SchemaM2> getSchemaM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type DomainM2 or subtypes
	 */
	public Iterable<? extends DomainM2> getDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type DomainM2
	 * @param noSubClasses toggles wether subclasses of DomainM2 should be excluded
	 */
	public Iterable<? extends DomainM2> getDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type EdgeClassM2 or subtypes
	 */
	public Iterable<? extends EdgeClassM2> getEdgeClassM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type EdgeClassM2
	 * @param noSubClasses toggles wether subclasses of EdgeClassM2 should be excluded
	 */
	public Iterable<? extends EdgeClassM2> getEdgeClassM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type BooleanDomainM2 or subtypes
	 */
	public Iterable<? extends BooleanDomainM2> getBooleanDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type BooleanDomainM2
	 * @param noSubClasses toggles wether subclasses of BooleanDomainM2 should be excluded
	 */
	public Iterable<? extends BooleanDomainM2> getBooleanDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type AttributeM2 or subtypes
	 */
	public Iterable<? extends AttributeM2> getAttributeM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type AttributeM2
	 * @param noSubClasses toggles wether subclasses of AttributeM2 should be excluded
	 */
	public Iterable<? extends AttributeM2> getAttributeM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type LongDomainM2 or subtypes
	 */
	public Iterable<? extends LongDomainM2> getLongDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type LongDomainM2
	 * @param noSubClasses toggles wether subclasses of LongDomainM2 should be excluded
	 */
	public Iterable<? extends LongDomainM2> getLongDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type CompositionClassM2 or subtypes
	 */
	public Iterable<? extends CompositionClassM2> getCompositionClassM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type CompositionClassM2
	 * @param noSubClasses toggles wether subclasses of CompositionClassM2 should be excluded
	 */
	public Iterable<? extends CompositionClassM2> getCompositionClassM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type SetDomainM2 or subtypes
	 */
	public Iterable<? extends SetDomainM2> getSetDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type SetDomainM2
	 * @param noSubClasses toggles wether subclasses of SetDomainM2 should be excluded
	 */
	public Iterable<? extends SetDomainM2> getSetDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type DoubleDomainM2 or subtypes
	 */
	public Iterable<? extends DoubleDomainM2> getDoubleDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type DoubleDomainM2
	 * @param noSubClasses toggles wether subclasses of DoubleDomainM2 should be excluded
	 */
	public Iterable<? extends DoubleDomainM2> getDoubleDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type BasicDomainM2 or subtypes
	 */
	public Iterable<? extends BasicDomainM2> getBasicDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type BasicDomainM2
	 * @param noSubClasses toggles wether subclasses of BasicDomainM2 should be excluded
	 */
	public Iterable<? extends BasicDomainM2> getBasicDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type VertexClassM2 or subtypes
	 */
	public Iterable<? extends VertexClassM2> getVertexClassM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type VertexClassM2
	 * @param noSubClasses toggles wether subclasses of VertexClassM2 should be excluded
	 */
	public Iterable<? extends VertexClassM2> getVertexClassM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type ListDomainM2 or subtypes
	 */
	public Iterable<? extends ListDomainM2> getListDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type ListDomainM2
	 * @param noSubClasses toggles wether subclasses of ListDomainM2 should be excluded
	 */
	public Iterable<? extends ListDomainM2> getListDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type AggregationClassM2 or subtypes
	 */
	public Iterable<? extends AggregationClassM2> getAggregationClassM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type AggregationClassM2
	 * @param noSubClasses toggles wether subclasses of AggregationClassM2 should be excluded
	 */
	public Iterable<? extends AggregationClassM2> getAggregationClassM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type StringDomainM2 or subtypes
	 */
	public Iterable<? extends StringDomainM2> getStringDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type StringDomainM2
	 * @param noSubClasses toggles wether subclasses of StringDomainM2 should be excluded
	 */
	public Iterable<? extends StringDomainM2> getStringDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type ObjectDomainM2 or subtypes
	 */
	public Iterable<? extends ObjectDomainM2> getObjectDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type ObjectDomainM2
	 * @param noSubClasses toggles wether subclasses of ObjectDomainM2 should be excluded
	 */
	public Iterable<? extends ObjectDomainM2> getObjectDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type IntDomainM2 or subtypes
	 */
	public Iterable<? extends IntDomainM2> getIntDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type IntDomainM2
	 * @param noSubClasses toggles wether subclasses of IntDomainM2 should be excluded
	 */
	public Iterable<? extends IntDomainM2> getIntDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type AttributedElementClassM2 or subtypes
	 */
	public Iterable<? extends AttributedElementClassM2> getAttributedElementClassM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type AttributedElementClassM2
	 * @param noSubClasses toggles wether subclasses of AttributedElementClassM2 should be excluded
	 */
	public Iterable<? extends AttributedElementClassM2> getAttributedElementClassM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type GraphClassM2 or subtypes
	 */
	public Iterable<? extends GraphClassM2> getGraphClassM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type GraphClassM2
	 * @param noSubClasses toggles wether subclasses of GraphClassM2 should be excluded
	 */
	public Iterable<? extends GraphClassM2> getGraphClassM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type RecordDomainM2 or subtypes
	 */
	public Iterable<? extends RecordDomainM2> getRecordDomainM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type RecordDomainM2
	 * @param noSubClasses toggles wether subclasses of RecordDomainM2 should be excluded
	 */
	public Iterable<? extends RecordDomainM2> getRecordDomainM2Vertices(boolean noSubClasses);

	/**
	 * Returns an iterable for all vertexs of this vertex that are of type GraphElementClassM2 or subtypes
	 */
	public Iterable<? extends GraphElementClassM2> getGraphElementClassM2Vertices();
	
	/**
	 * Returns an iterable for all incidence vertexs of this vertex that are of type GraphElementClassM2
	 * @param noSubClasses toggles wether subclasses of GraphElementClassM2 should be excluded
	 */
	public Iterable<? extends GraphElementClassM2> getGraphElementClassM2Vertices(boolean noSubClasses);

}
