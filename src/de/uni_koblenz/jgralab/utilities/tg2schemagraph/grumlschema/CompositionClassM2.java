/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl.CompositionClassM2Impl;

public interface CompositionClassM2 extends AggregationClassM2, AttributedElementClassM2, EdgeClassM2, GraphElementClassM2, Vertex {

	/**
	 * refers to the default implementation class of this interface
	 */
	public static final Class<CompositionClassM2Impl> IMPLEMENTATION_CLASS = CompositionClassM2Impl.class;

	/**
	 * @return the next AggregationClassM2 vertex in the global vertex sequence
	 */
	public AggregationClassM2 getNextAggregationClassM2();

	/**
	 * @return the next AggregationClassM2 vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of AggregationClassM2 are accepted
	 */
	public AggregationClassM2 getNextAggregationClassM2(boolean noSubClasses);

	/**
	 * @return the next AttributedElementClassM2 vertex in the global vertex sequence
	 */
	public AttributedElementClassM2 getNextAttributedElementClassM2();

	/**
	 * @return the next CompositionClassM2 vertex in the global vertex sequence
	 */
	public CompositionClassM2 getNextCompositionClassM2();

	/**
	 * @return the next CompositionClassM2 vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of CompositionClassM2 are accepted
	 */
	public CompositionClassM2 getNextCompositionClassM2(boolean noSubClasses);

	/**
	 * @return the next EdgeClassM2 vertex in the global vertex sequence
	 */
	public EdgeClassM2 getNextEdgeClassM2();

	/**
	 * @return the next EdgeClassM2 vertex in the global vertex sequence
	 * @param noSubClasses if set to <code>true</code>, no subclasses of EdgeClassM2 are accepted
	 */
	public EdgeClassM2 getNextEdgeClassM2(boolean noSubClasses);

	/**
	 * @return the next GraphElementClassM2 vertex in the global vertex sequence
	 */
	public GraphElementClassM2 getNextGraphElementClassM2();

	/**
	 * @return the first edge of class FromM2 at this vertex
	 */
	public FromM2 getFirstFromM2();

	/**
	 * @return the first edge of class FromM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public FromM2 getFirstFromM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class FromM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of FromM2 are accepted
	 */
	public FromM2 getFirstFromM2(boolean noSubClasses);

	/**
	 * @return the first edge of class FromM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of FromM2 are accepted
	 */
	public FromM2 getFirstFromM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class ToM2 at this vertex
	 */
	public ToM2 getFirstToM2();

	/**
	 * @return the first edge of class ToM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public ToM2 getFirstToM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class ToM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ToM2 are accepted
	 */
	public ToM2 getFirstToM2(boolean noSubClasses);

	/**
	 * @return the first edge of class ToM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ToM2 are accepted
	 */
	public ToM2 getFirstToM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 */
	public HasAttributeM2 getFirstHasAttributeM2();

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public HasAttributeM2 getFirstHasAttributeM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasAttributeM2 are accepted
	 */
	public HasAttributeM2 getFirstHasAttributeM2(boolean noSubClasses);

	/**
	 * @return the first edge of class HasAttributeM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of HasAttributeM2 are accepted
	 */
	public HasAttributeM2 getFirstHasAttributeM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubEdgeClassOfM2 at this vertex
	 */
	public IsSubEdgeClassOfM2 getFirstIsSubEdgeClassOfM2();

	/**
	 * @return the first edge of class IsSubEdgeClassOfM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSubEdgeClassOfM2 getFirstIsSubEdgeClassOfM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSubEdgeClassOfM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubEdgeClassOfM2 are accepted
	 */
	public IsSubEdgeClassOfM2 getFirstIsSubEdgeClassOfM2(boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubEdgeClassOfM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of IsSubEdgeClassOfM2 are accepted
	 */
	public IsSubEdgeClassOfM2 getFirstIsSubEdgeClassOfM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2();

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2(EdgeDirection orientation);

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphElementClassM2 are accepted
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2(boolean noSubClasses);

	/**
	 * @return the first edge of class ContainsGraphElementClassM2 at this vertex
	 * @param orientation the orientation of the edge
	 * @param noSubClasses if set to <code>true</code>, no subclasses of ContainsGraphElementClassM2 are accepted
	 */
	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2(EdgeDirection orientation, boolean noSubClasses);

	/**
	 * @return the first edge of class IsSubClassOfM2 at this vertex
	 */
	public IsSubClassOfM2 getFirstIsSubClassOfM2();

	/**
	 * @return the first edge of class IsSubClassOfM2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public IsSubClassOfM2 getFirstIsSubClassOfM2(EdgeDirection orientation);

}
