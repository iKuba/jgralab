/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl;

import de.uni_koblenz.jgralab.impl.array.VertexImpl;
import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.VertexClass;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.CompositeDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.DomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.HasBaseDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.HasDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.HasRecordDomainComponentM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.SetDomainM2;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class SetDomainM2Impl extends VertexImpl implements CompositeDomainM2, DomainM2, SetDomainM2, Vertex {

	public SetDomainM2Impl(int id, Graph g) {
		super(id, g, (VertexClass)g.getGraphClass().getGraphElementClass("SetDomainM2"));
	}

	public Class<? extends AttributedElement> getM1Class() {
		return SetDomainM2.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		throw new NoSuchFieldException("SetDomainM2 doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		throw new NoSuchFieldException("SetDomainM2 doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	/* add all valid from edges */
	private static Set<Class<? extends Edge>> validFromEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidAlpha()
	 */
	public boolean isValidAlpha(Edge edge) {
		return validFromEdges.contains(edge.getClass());
	}
	
	{

		validFromEdges.add(HasBaseDomainM2Impl.class);

		validFromEdges.add(HasDomainM2Impl.class);

	}
	
	/* add all valid to edges */
	private static Set<Class<? extends Edge>> validToEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidOemga()
	 */
	public boolean isValidOmega(Edge edge) {
		return validToEdges.contains(edge.getClass());
	}
	
	{

		validToEdges.add(HasBaseDomainM2Impl.class);

		validToEdges.add(HasRecordDomainComponentM2Impl.class);

	}

	public CompositeDomainM2 getNextCompositeDomainM2() {
		return (CompositeDomainM2)getNextVertexOfClass(CompositeDomainM2.class);
	}

	public DomainM2 getNextDomainM2() {
		return (DomainM2)getNextVertexOfClass(DomainM2.class);
	}

	public SetDomainM2 getNextSetDomainM2() {
		return (SetDomainM2)getNextVertexOfClass(SetDomainM2.class);
	}

	public SetDomainM2 getNextSetDomainM2(boolean noSubClasses) {
		return (SetDomainM2)getNextVertexOfClass(SetDomainM2.class, noSubClasses);
	}

	public HasBaseDomainM2 getFirstHasBaseDomainM2() {
		return (HasBaseDomainM2)getFirstEdgeOfClass(HasBaseDomainM2.class);
	}

	public HasBaseDomainM2 getFirstHasBaseDomainM2(EdgeDirection orientation) {
		return (HasBaseDomainM2)getFirstEdgeOfClass(HasBaseDomainM2.class, orientation);
	}

	public HasBaseDomainM2 getFirstHasBaseDomainM2(boolean noSubClasses) {
		return (HasBaseDomainM2)getFirstEdgeOfClass(HasBaseDomainM2.class, noSubClasses);
	}

	public HasBaseDomainM2 getFirstHasBaseDomainM2(EdgeDirection orientation, boolean noSubClasses) {
		return (HasBaseDomainM2)getFirstEdgeOfClass(HasBaseDomainM2.class, orientation, noSubClasses);
	}

	public HasDomainM2 getFirstHasDomainM2() {
		return (HasDomainM2)getFirstEdgeOfClass(HasDomainM2.class);
	}

	public HasDomainM2 getFirstHasDomainM2(EdgeDirection orientation) {
		return (HasDomainM2)getFirstEdgeOfClass(HasDomainM2.class, orientation);
	}

	public HasDomainM2 getFirstHasDomainM2(boolean noSubClasses) {
		return (HasDomainM2)getFirstEdgeOfClass(HasDomainM2.class, noSubClasses);
	}

	public HasDomainM2 getFirstHasDomainM2(EdgeDirection orientation, boolean noSubClasses) {
		return (HasDomainM2)getFirstEdgeOfClass(HasDomainM2.class, orientation, noSubClasses);
	}

	public HasRecordDomainComponentM2 getFirstHasRecordDomainComponentM2() {
		return (HasRecordDomainComponentM2)getFirstEdgeOfClass(HasRecordDomainComponentM2.class);
	}

	public HasRecordDomainComponentM2 getFirstHasRecordDomainComponentM2(EdgeDirection orientation) {
		return (HasRecordDomainComponentM2)getFirstEdgeOfClass(HasRecordDomainComponentM2.class, orientation);
	}

	public HasRecordDomainComponentM2 getFirstHasRecordDomainComponentM2(boolean noSubClasses) {
		return (HasRecordDomainComponentM2)getFirstEdgeOfClass(HasRecordDomainComponentM2.class, noSubClasses);
	}

	public HasRecordDomainComponentM2 getFirstHasRecordDomainComponentM2(EdgeDirection orientation, boolean noSubClasses) {
		return (HasRecordDomainComponentM2)getFirstEdgeOfClass(HasRecordDomainComponentM2.class, orientation, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends HasBaseDomainM2, ? extends Vertex>> getHasBaseDomainM2Incidences() {
		return new IncidenceIterable<HasBaseDomainM2, Vertex>(this, HasBaseDomainM2.class);
	}
	
	public Iterable<EdgeVertexPair<? extends HasBaseDomainM2, ? extends Vertex>> getHasBaseDomainM2Incidences(boolean noSubClasses) {
		return new IncidenceIterable<HasBaseDomainM2, Vertex>(this, HasBaseDomainM2.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends HasBaseDomainM2, ? extends Vertex>> getHasBaseDomainM2Incidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<HasBaseDomainM2, Vertex>(this, HasBaseDomainM2.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends HasBaseDomainM2, ? extends Vertex>> getHasBaseDomainM2Incidences(EdgeDirection direction) {
		return new IncidenceIterable<HasBaseDomainM2, Vertex>(this, HasBaseDomainM2.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends HasDomainM2, ? extends Vertex>> getHasDomainM2Incidences() {
		return new IncidenceIterable<HasDomainM2, Vertex>(this, HasDomainM2.class);
	}
	
	public Iterable<EdgeVertexPair<? extends HasDomainM2, ? extends Vertex>> getHasDomainM2Incidences(boolean noSubClasses) {
		return new IncidenceIterable<HasDomainM2, Vertex>(this, HasDomainM2.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends HasDomainM2, ? extends Vertex>> getHasDomainM2Incidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<HasDomainM2, Vertex>(this, HasDomainM2.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends HasDomainM2, ? extends Vertex>> getHasDomainM2Incidences(EdgeDirection direction) {
		return new IncidenceIterable<HasDomainM2, Vertex>(this, HasDomainM2.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends HasRecordDomainComponentM2, ? extends Vertex>> getHasRecordDomainComponentM2Incidences() {
		return new IncidenceIterable<HasRecordDomainComponentM2, Vertex>(this, HasRecordDomainComponentM2.class);
	}
	
	public Iterable<EdgeVertexPair<? extends HasRecordDomainComponentM2, ? extends Vertex>> getHasRecordDomainComponentM2Incidences(boolean noSubClasses) {
		return new IncidenceIterable<HasRecordDomainComponentM2, Vertex>(this, HasRecordDomainComponentM2.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends HasRecordDomainComponentM2, ? extends Vertex>> getHasRecordDomainComponentM2Incidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<HasRecordDomainComponentM2, Vertex>(this, HasRecordDomainComponentM2.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends HasRecordDomainComponentM2, ? extends Vertex>> getHasRecordDomainComponentM2Incidences(EdgeDirection direction) {
		return new IncidenceIterable<HasRecordDomainComponentM2, Vertex>(this, HasRecordDomainComponentM2.class, direction);
	}

}
