/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl;

import de.uni_koblenz.jgralab.impl.array.ReversedAggregationImpl;
import de.uni_koblenz.jgralab.impl.array.EdgeImpl;

import de.uni_koblenz.jgralab.Aggregation;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.FromM2;

import java.io.IOException;

public class ReversedFromM2Impl extends ReversedAggregationImpl implements Aggregation, FromM2 {

	ReversedFromM2Impl(EdgeImpl e, Graph g) {
		super(e, g);
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		return ((FromM2)normalEdge).getAttribute(attributeName);
	}

	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		((FromM2)normalEdge).setAttribute(attributeName, data);
	}

	public int getMax() {
		return ((FromM2)normalEdge).getMax();
	}

	public int getMin() {
		return ((FromM2)normalEdge).getMin();
	}

	public String getRoleName() {
		return ((FromM2)normalEdge).getRoleName();
	}

	public void setMax(int max) {
		((FromM2)normalEdge).setMax(max);
	}

	public void setMin(int min) {
		((FromM2)normalEdge).setMin(min);
	}

	public void setRoleName(String roleName) {
		((FromM2)normalEdge).setRoleName(roleName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public FromM2 getNextFromM2InGraph() {
		return ((FromM2)normalEdge).getNextFromM2InGraph();
	}

	public FromM2 getNextFromM2InGraph(boolean noSubClasses) {
		return ((FromM2)normalEdge).getNextFromM2InGraph(noSubClasses);
	}

	public FromM2 getNextFromM2() {
		return (FromM2)getNextEdgeOfClass(FromM2.class);
	}

	public FromM2 getNextFromM2(EdgeDirection orientation) {
		return (FromM2)getNextEdgeOfClass(FromM2.class, orientation);
	}

	public FromM2 getNextFromM2(boolean noSubClasses) {
		return (FromM2)getNextEdgeOfClass(FromM2.class, noSubClasses);
	}

	public FromM2 getNextFromM2(EdgeDirection orientation, boolean noSubClasses) {
		return (FromM2)getNextEdgeOfClass(FromM2.class, orientation, noSubClasses);
	}

}
