/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl;

import de.uni_koblenz.jgralab.impl.array.AggregationImpl;

import de.uni_koblenz.jgralab.AggregationClass;
import de.uni_koblenz.jgralab.Aggregation;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl.ReversedFromM2Impl;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.FromM2;

import java.io.IOException;
/**
FromVertexClass: EdgeClassM2
FromRoleName : 
ToVertexClass: VertexClassM2
toRoleName : 
 */

public class FromM2Impl extends AggregationImpl implements Aggregation, FromM2 {

	protected int max;

	protected int min;

	protected String roleName;

	public FromM2Impl(int id, Graph g) {
		super(id, g, (AggregationClass)g.getGraphClass().getGraphElementClass("FromM2"));
		reversedEdge = new ReversedFromM2Impl(this, g);
	}

	public Class<? extends AttributedElement> getM1Class() {
		return FromM2.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		if (attributeName.equals("max")) return max;
		if (attributeName.equals("min")) return min;
		if (attributeName.equals("roleName")) return roleName;
		throw new NoSuchFieldException("FromM2 doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		if (attributeName.equals("max")) {
			setMax((Integer) data);
			return;
		}
		if (attributeName.equals("min")) {
			setMin((Integer) data);
			return;
		}
		if (attributeName.equals("roleName")) {
			setRoleName((String) data);
			return;
		}
		throw new NoSuchFieldException("FromM2 doesn't contain an attribute " + attributeName);
	}

	public int getMax() {
		return max;
	}

	public int getMin() {
		return min;
	}

	public String getRoleName() {
		return roleName;
	}

	public void setMax(int max) {
		this.max = max;
		modified();
	}

	public void setMin(int min) {
		this.min = min;
		modified();
	}

	public void setRoleName(String roleName) {
		this.roleName = roleName;
		modified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		max = io.matchInteger();
		setMax(max);
		min = io.matchInteger();
		setMin(min);
		roleName = io.matchUtfString();
		setRoleName(roleName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeInteger(max);
		io.writeInteger(min);
		io.writeUtfString(roleName);
	}

	public FromM2 getNextFromM2InGraph() {
		return (FromM2)getNextEdgeOfClassInGraph(FromM2.class);
	}

	public FromM2 getNextFromM2InGraph(boolean noSubClasses) {
		return (FromM2)getNextEdgeOfClassInGraph(FromM2.class, noSubClasses);
	}

	public FromM2 getNextFromM2() {
		return (FromM2)getNextEdgeOfClass(FromM2.class);
	}

	public FromM2 getNextFromM2(EdgeDirection orientation) {
		return (FromM2)getNextEdgeOfClass(FromM2.class, orientation);
	}

	public FromM2 getNextFromM2(boolean noSubClasses) {
		return (FromM2)getNextEdgeOfClass(FromM2.class, noSubClasses);
	}

	public FromM2 getNextFromM2(EdgeDirection orientation, boolean noSubClasses) {
		return (FromM2)getNextEdgeOfClass(FromM2.class, orientation, noSubClasses);
	}

}
