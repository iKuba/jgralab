/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl;

import de.uni_koblenz.jgralab.impl.array.VertexImpl;
import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.VertexClass;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.AttributeM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.HasAttributeM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.HasDomainM2;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class AttributeM2Impl extends VertexImpl implements AttributeM2, Vertex {

	protected String name;

	public AttributeM2Impl(int id, Graph g) {
		super(id, g, (VertexClass)g.getGraphClass().getGraphElementClass("AttributeM2"));
	}

	public Class<? extends AttributedElement> getM1Class() {
		return AttributeM2.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		if (attributeName.equals("name")) return name;
		throw new NoSuchFieldException("AttributeM2 doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		if (attributeName.equals("name")) {
			setName((String) data);
			return;
		}
		throw new NoSuchFieldException("AttributeM2 doesn't contain an attribute " + attributeName);
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
		modified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		name = io.matchUtfString();
		setName(name);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(name);
	}

	/* add all valid from edges */
	private static Set<Class<? extends Edge>> validFromEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidAlpha()
	 */
	public boolean isValidAlpha(Edge edge) {
		return validFromEdges.contains(edge.getClass());
	}
	
	{

		validFromEdges.add(HasAttributeM2Impl.class);

	}
	
	/* add all valid to edges */
	private static Set<Class<? extends Edge>> validToEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidOemga()
	 */
	public boolean isValidOmega(Edge edge) {
		return validToEdges.contains(edge.getClass());
	}
	
	{

		validToEdges.add(HasDomainM2Impl.class);

	}

	public AttributeM2 getNextAttributeM2() {
		return (AttributeM2)getNextVertexOfClass(AttributeM2.class);
	}

	public AttributeM2 getNextAttributeM2(boolean noSubClasses) {
		return (AttributeM2)getNextVertexOfClass(AttributeM2.class, noSubClasses);
	}

	public HasAttributeM2 getFirstHasAttributeM2() {
		return (HasAttributeM2)getFirstEdgeOfClass(HasAttributeM2.class);
	}

	public HasAttributeM2 getFirstHasAttributeM2(EdgeDirection orientation) {
		return (HasAttributeM2)getFirstEdgeOfClass(HasAttributeM2.class, orientation);
	}

	public HasAttributeM2 getFirstHasAttributeM2(boolean noSubClasses) {
		return (HasAttributeM2)getFirstEdgeOfClass(HasAttributeM2.class, noSubClasses);
	}

	public HasAttributeM2 getFirstHasAttributeM2(EdgeDirection orientation, boolean noSubClasses) {
		return (HasAttributeM2)getFirstEdgeOfClass(HasAttributeM2.class, orientation, noSubClasses);
	}

	public HasDomainM2 getFirstHasDomainM2() {
		return (HasDomainM2)getFirstEdgeOfClass(HasDomainM2.class);
	}

	public HasDomainM2 getFirstHasDomainM2(EdgeDirection orientation) {
		return (HasDomainM2)getFirstEdgeOfClass(HasDomainM2.class, orientation);
	}

	public HasDomainM2 getFirstHasDomainM2(boolean noSubClasses) {
		return (HasDomainM2)getFirstEdgeOfClass(HasDomainM2.class, noSubClasses);
	}

	public HasDomainM2 getFirstHasDomainM2(EdgeDirection orientation, boolean noSubClasses) {
		return (HasDomainM2)getFirstEdgeOfClass(HasDomainM2.class, orientation, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends HasAttributeM2, ? extends Vertex>> getHasAttributeM2Incidences() {
		return new IncidenceIterable<HasAttributeM2, Vertex>(this, HasAttributeM2.class);
	}
	
	public Iterable<EdgeVertexPair<? extends HasAttributeM2, ? extends Vertex>> getHasAttributeM2Incidences(boolean noSubClasses) {
		return new IncidenceIterable<HasAttributeM2, Vertex>(this, HasAttributeM2.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends HasAttributeM2, ? extends Vertex>> getHasAttributeM2Incidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<HasAttributeM2, Vertex>(this, HasAttributeM2.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends HasAttributeM2, ? extends Vertex>> getHasAttributeM2Incidences(EdgeDirection direction) {
		return new IncidenceIterable<HasAttributeM2, Vertex>(this, HasAttributeM2.class, direction);
	}

	public Iterable<EdgeVertexPair<? extends HasDomainM2, ? extends Vertex>> getHasDomainM2Incidences() {
		return new IncidenceIterable<HasDomainM2, Vertex>(this, HasDomainM2.class);
	}
	
	public Iterable<EdgeVertexPair<? extends HasDomainM2, ? extends Vertex>> getHasDomainM2Incidences(boolean noSubClasses) {
		return new IncidenceIterable<HasDomainM2, Vertex>(this, HasDomainM2.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends HasDomainM2, ? extends Vertex>> getHasDomainM2Incidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<HasDomainM2, Vertex>(this, HasDomainM2.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends HasDomainM2, ? extends Vertex>> getHasDomainM2Incidences(EdgeDirection direction) {
		return new IncidenceIterable<HasDomainM2, Vertex>(this, HasDomainM2.class, direction);
	}

}
