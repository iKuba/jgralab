/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl;

import de.uni_koblenz.jgralab.impl.array.GraphImpl;
import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.Aggregation;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.Composition;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeClass;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.Schema;
import de.uni_koblenz.jgralab.Vertex;
import de.uni_koblenz.jgralab.VertexClass;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.AggregationClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.AttributeM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.AttributedElementClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.BasicDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.BooleanDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.CompositeDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.CompositionClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.ContainsGraphClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.ContainsGraphElementClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.DomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.DoubleDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.EdgeClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.EnumDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.FromM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.GrUMLSchemaGraph;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.GraphClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.GraphElementClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.HasAttributeM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.HasBaseDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.HasDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.HasRecordDomainComponentM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.IntDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.IsSubClassOfM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.IsSubEdgeClassOfM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.IsSubGraphClassOfM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.IsSubVertexClassOfM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.ListDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.LongDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.ObjectDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.RecordDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.SchemaM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.SetDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.StringDomainM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.ToM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.VertexClassM2;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.GrUMLSchema;

import java.io.IOException;

public class GrUMLSchemaGraphImpl extends GraphImpl implements GrUMLSchemaGraph, Graph {

	public GrUMLSchemaGraphImpl(Schema schema, int vMax, int eMax) {
		this(null, schema, vMax, eMax);
	}
	
	public GrUMLSchemaGraphImpl(java.lang.String id, Schema schema, int vMax, int eMax) {
		super(id, schema.getGraphClass("GrUMLSchemaGraph"), schema, vMax, eMax);
	}
	
	public static GrUMLSchemaGraph create(int vMax, int eMax) {
		return (GrUMLSchemaGraph) GrUMLSchema.instance().createGrUMLSchemaGraph(null, vMax, eMax);
	}
	
	public static GrUMLSchemaGraph create(String id, int vMax, int eMax) {
		return (GrUMLSchemaGraph) GrUMLSchema.instance().createGrUMLSchemaGraph(id, vMax, eMax);
	}

	public Class<? extends AttributedElement> getM1Class() {
		return GrUMLSchemaGraph.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		throw new NoSuchFieldException("GrUMLSchemaGraph doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		throw new NoSuchFieldException("GrUMLSchemaGraph doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	// ------------------------ Code for AggregationClassM2 ------------------------

	public AggregationClassM2 getAggregationClassM2(int id) {
		return (AggregationClassM2)getVertex(id);
	}

	public AggregationClassM2 getFirstAggregationClassM2() {
		return (AggregationClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("AggregationClassM2"));
	}

	public AggregationClassM2 getFirstAggregationClassM2(boolean noSubClasses) {
		return (AggregationClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("AggregationClassM2"), noSubClasses);
	}

	public AggregationClassM2 createAggregationClassM2() {
		AggregationClassM2 newVertex = (AggregationClassM2) graphFactory.createVertex(AggregationClassM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public AggregationClassM2 createAggregationClassM2(int id) {
		AggregationClassM2 newVertex = (AggregationClassM2) graphFactory.createVertex(AggregationClassM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for AttributeM2 ------------------------

	public AttributeM2 getAttributeM2(int id) {
		return (AttributeM2)getVertex(id);
	}

	public AttributeM2 getFirstAttributeM2() {
		return (AttributeM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("AttributeM2"));
	}

	public AttributeM2 getFirstAttributeM2(boolean noSubClasses) {
		return (AttributeM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("AttributeM2"), noSubClasses);
	}

	public AttributeM2 createAttributeM2() {
		AttributeM2 newVertex = (AttributeM2) graphFactory.createVertex(AttributeM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public AttributeM2 createAttributeM2(int id) {
		AttributeM2 newVertex = (AttributeM2) graphFactory.createVertex(AttributeM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for AttributedElementClassM2 ------------------------

	public AttributedElementClassM2 getAttributedElementClassM2(int id) {
		return (AttributedElementClassM2)getVertex(id);
	}

	public AttributedElementClassM2 getFirstAttributedElementClassM2() {
		return (AttributedElementClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("AttributedElementClassM2"));
	}

	// ------------------------ Code for BasicDomainM2 ------------------------

	public BasicDomainM2 getBasicDomainM2(int id) {
		return (BasicDomainM2)getVertex(id);
	}

	public BasicDomainM2 getFirstBasicDomainM2() {
		return (BasicDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("BasicDomainM2"));
	}

	// ------------------------ Code for BooleanDomainM2 ------------------------

	public BooleanDomainM2 getBooleanDomainM2(int id) {
		return (BooleanDomainM2)getVertex(id);
	}

	public BooleanDomainM2 getFirstBooleanDomainM2() {
		return (BooleanDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("BooleanDomainM2"));
	}

	public BooleanDomainM2 getFirstBooleanDomainM2(boolean noSubClasses) {
		return (BooleanDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("BooleanDomainM2"), noSubClasses);
	}

	public BooleanDomainM2 createBooleanDomainM2() {
		BooleanDomainM2 newVertex = (BooleanDomainM2) graphFactory.createVertex(BooleanDomainM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public BooleanDomainM2 createBooleanDomainM2(int id) {
		BooleanDomainM2 newVertex = (BooleanDomainM2) graphFactory.createVertex(BooleanDomainM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for CompositeDomainM2 ------------------------

	public CompositeDomainM2 getCompositeDomainM2(int id) {
		return (CompositeDomainM2)getVertex(id);
	}

	public CompositeDomainM2 getFirstCompositeDomainM2() {
		return (CompositeDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("CompositeDomainM2"));
	}

	// ------------------------ Code for CompositionClassM2 ------------------------

	public CompositionClassM2 getCompositionClassM2(int id) {
		return (CompositionClassM2)getVertex(id);
	}

	public CompositionClassM2 getFirstCompositionClassM2() {
		return (CompositionClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("CompositionClassM2"));
	}

	public CompositionClassM2 getFirstCompositionClassM2(boolean noSubClasses) {
		return (CompositionClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("CompositionClassM2"), noSubClasses);
	}

	public CompositionClassM2 createCompositionClassM2() {
		CompositionClassM2 newVertex = (CompositionClassM2) graphFactory.createVertex(CompositionClassM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public CompositionClassM2 createCompositionClassM2(int id) {
		CompositionClassM2 newVertex = (CompositionClassM2) graphFactory.createVertex(CompositionClassM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for ContainsGraphClassM2 ------------------------

	public ContainsGraphClassM2 getContainsGraphClassM2(int id) {
		return (ContainsGraphClassM2)getEdge(id);
	}

	public ContainsGraphClassM2 getFirstContainsGraphClassM2InGraph() {
		return (ContainsGraphClassM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("ContainsGraphClassM2"));
	}

	public ContainsGraphClassM2 getFirstContainsGraphClassM2InGraph(boolean noSubClasses) {
		return (ContainsGraphClassM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("ContainsGraphClassM2"), noSubClasses);
	}

	public ContainsGraphClassM2 createContainsGraphClassM2(GraphClassM2 alpha, SchemaM2 omega) {
		ContainsGraphClassM2 newEdge = (ContainsGraphClassM2) graphFactory.createEdge(ContainsGraphClassM2.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public ContainsGraphClassM2 createContainsGraphClassM2(int id, GraphClassM2 alpha, SchemaM2 omega) {
		ContainsGraphClassM2 newEdge = (ContainsGraphClassM2) graphFactory.createEdge(ContainsGraphClassM2.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for ContainsGraphElementClassM2 ------------------------

	public ContainsGraphElementClassM2 getContainsGraphElementClassM2(int id) {
		return (ContainsGraphElementClassM2)getEdge(id);
	}

	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2InGraph() {
		return (ContainsGraphElementClassM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("ContainsGraphElementClassM2"));
	}

	public ContainsGraphElementClassM2 getFirstContainsGraphElementClassM2InGraph(boolean noSubClasses) {
		return (ContainsGraphElementClassM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("ContainsGraphElementClassM2"), noSubClasses);
	}

	public ContainsGraphElementClassM2 createContainsGraphElementClassM2(GraphElementClassM2 alpha, GraphClassM2 omega) {
		ContainsGraphElementClassM2 newEdge = (ContainsGraphElementClassM2) graphFactory.createEdge(ContainsGraphElementClassM2.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public ContainsGraphElementClassM2 createContainsGraphElementClassM2(int id, GraphElementClassM2 alpha, GraphClassM2 omega) {
		ContainsGraphElementClassM2 newEdge = (ContainsGraphElementClassM2) graphFactory.createEdge(ContainsGraphElementClassM2.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for DomainM2 ------------------------

	public DomainM2 getDomainM2(int id) {
		return (DomainM2)getVertex(id);
	}

	public DomainM2 getFirstDomainM2() {
		return (DomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("DomainM2"));
	}

	// ------------------------ Code for DoubleDomainM2 ------------------------

	public DoubleDomainM2 getDoubleDomainM2(int id) {
		return (DoubleDomainM2)getVertex(id);
	}

	public DoubleDomainM2 getFirstDoubleDomainM2() {
		return (DoubleDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("DoubleDomainM2"));
	}

	public DoubleDomainM2 getFirstDoubleDomainM2(boolean noSubClasses) {
		return (DoubleDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("DoubleDomainM2"), noSubClasses);
	}

	public DoubleDomainM2 createDoubleDomainM2() {
		DoubleDomainM2 newVertex = (DoubleDomainM2) graphFactory.createVertex(DoubleDomainM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public DoubleDomainM2 createDoubleDomainM2(int id) {
		DoubleDomainM2 newVertex = (DoubleDomainM2) graphFactory.createVertex(DoubleDomainM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for EdgeClassM2 ------------------------

	public EdgeClassM2 getEdgeClassM2(int id) {
		return (EdgeClassM2)getVertex(id);
	}

	public EdgeClassM2 getFirstEdgeClassM2() {
		return (EdgeClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgeClassM2"));
	}

	public EdgeClassM2 getFirstEdgeClassM2(boolean noSubClasses) {
		return (EdgeClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EdgeClassM2"), noSubClasses);
	}

	public EdgeClassM2 createEdgeClassM2() {
		EdgeClassM2 newVertex = (EdgeClassM2) graphFactory.createVertex(EdgeClassM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public EdgeClassM2 createEdgeClassM2(int id) {
		EdgeClassM2 newVertex = (EdgeClassM2) graphFactory.createVertex(EdgeClassM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for EnumDomainM2 ------------------------

	public EnumDomainM2 getEnumDomainM2(int id) {
		return (EnumDomainM2)getVertex(id);
	}

	public EnumDomainM2 getFirstEnumDomainM2() {
		return (EnumDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EnumDomainM2"));
	}

	public EnumDomainM2 getFirstEnumDomainM2(boolean noSubClasses) {
		return (EnumDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("EnumDomainM2"), noSubClasses);
	}

	public EnumDomainM2 createEnumDomainM2() {
		EnumDomainM2 newVertex = (EnumDomainM2) graphFactory.createVertex(EnumDomainM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public EnumDomainM2 createEnumDomainM2(int id) {
		EnumDomainM2 newVertex = (EnumDomainM2) graphFactory.createVertex(EnumDomainM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for FromM2 ------------------------

	public FromM2 getFromM2(int id) {
		return (FromM2)getEdge(id);
	}

	public FromM2 getFirstFromM2InGraph() {
		return (FromM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("FromM2"));
	}

	public FromM2 getFirstFromM2InGraph(boolean noSubClasses) {
		return (FromM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("FromM2"), noSubClasses);
	}

	public FromM2 createFromM2(EdgeClassM2 alpha, VertexClassM2 omega) {
		FromM2 newEdge = (FromM2) graphFactory.createEdge(FromM2.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public FromM2 createFromM2(int id, EdgeClassM2 alpha, VertexClassM2 omega) {
		FromM2 newEdge = (FromM2) graphFactory.createEdge(FromM2.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for GraphClassM2 ------------------------

	public GraphClassM2 getGraphClassM2(int id) {
		return (GraphClassM2)getVertex(id);
	}

	public GraphClassM2 getFirstGraphClassM2() {
		return (GraphClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("GraphClassM2"));
	}

	public GraphClassM2 getFirstGraphClassM2(boolean noSubClasses) {
		return (GraphClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("GraphClassM2"), noSubClasses);
	}

	public GraphClassM2 createGraphClassM2() {
		GraphClassM2 newVertex = (GraphClassM2) graphFactory.createVertex(GraphClassM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public GraphClassM2 createGraphClassM2(int id) {
		GraphClassM2 newVertex = (GraphClassM2) graphFactory.createVertex(GraphClassM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for GraphElementClassM2 ------------------------

	public GraphElementClassM2 getGraphElementClassM2(int id) {
		return (GraphElementClassM2)getVertex(id);
	}

	public GraphElementClassM2 getFirstGraphElementClassM2() {
		return (GraphElementClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("GraphElementClassM2"));
	}

	// ------------------------ Code for HasAttributeM2 ------------------------

	public HasAttributeM2 getHasAttributeM2(int id) {
		return (HasAttributeM2)getEdge(id);
	}

	public HasAttributeM2 getFirstHasAttributeM2InGraph() {
		return (HasAttributeM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("HasAttributeM2"));
	}

	public HasAttributeM2 getFirstHasAttributeM2InGraph(boolean noSubClasses) {
		return (HasAttributeM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("HasAttributeM2"), noSubClasses);
	}

	public HasAttributeM2 createHasAttributeM2(AttributeM2 alpha, AttributedElementClassM2 omega) {
		HasAttributeM2 newEdge = (HasAttributeM2) graphFactory.createEdge(HasAttributeM2.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public HasAttributeM2 createHasAttributeM2(int id, AttributeM2 alpha, AttributedElementClassM2 omega) {
		HasAttributeM2 newEdge = (HasAttributeM2) graphFactory.createEdge(HasAttributeM2.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for HasBaseDomainM2 ------------------------

	public HasBaseDomainM2 getHasBaseDomainM2(int id) {
		return (HasBaseDomainM2)getEdge(id);
	}

	public HasBaseDomainM2 getFirstHasBaseDomainM2InGraph() {
		return (HasBaseDomainM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("HasBaseDomainM2"));
	}

	public HasBaseDomainM2 getFirstHasBaseDomainM2InGraph(boolean noSubClasses) {
		return (HasBaseDomainM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("HasBaseDomainM2"), noSubClasses);
	}

	public HasBaseDomainM2 createHasBaseDomainM2(CompositeDomainM2 alpha, DomainM2 omega) {
		HasBaseDomainM2 newEdge = (HasBaseDomainM2) graphFactory.createEdge(HasBaseDomainM2.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public HasBaseDomainM2 createHasBaseDomainM2(int id, CompositeDomainM2 alpha, DomainM2 omega) {
		HasBaseDomainM2 newEdge = (HasBaseDomainM2) graphFactory.createEdge(HasBaseDomainM2.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for HasDomainM2 ------------------------

	public HasDomainM2 getHasDomainM2(int id) {
		return (HasDomainM2)getEdge(id);
	}

	public HasDomainM2 getFirstHasDomainM2InGraph() {
		return (HasDomainM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("HasDomainM2"));
	}

	public HasDomainM2 getFirstHasDomainM2InGraph(boolean noSubClasses) {
		return (HasDomainM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("HasDomainM2"), noSubClasses);
	}

	public HasDomainM2 createHasDomainM2(DomainM2 alpha, AttributeM2 omega) {
		HasDomainM2 newEdge = (HasDomainM2) graphFactory.createEdge(HasDomainM2.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public HasDomainM2 createHasDomainM2(int id, DomainM2 alpha, AttributeM2 omega) {
		HasDomainM2 newEdge = (HasDomainM2) graphFactory.createEdge(HasDomainM2.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for HasRecordDomainComponentM2 ------------------------

	public HasRecordDomainComponentM2 getHasRecordDomainComponentM2(int id) {
		return (HasRecordDomainComponentM2)getEdge(id);
	}

	public HasRecordDomainComponentM2 getFirstHasRecordDomainComponentM2InGraph() {
		return (HasRecordDomainComponentM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("HasRecordDomainComponentM2"));
	}

	public HasRecordDomainComponentM2 getFirstHasRecordDomainComponentM2InGraph(boolean noSubClasses) {
		return (HasRecordDomainComponentM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("HasRecordDomainComponentM2"), noSubClasses);
	}

	public HasRecordDomainComponentM2 createHasRecordDomainComponentM2(RecordDomainM2 alpha, DomainM2 omega) {
		HasRecordDomainComponentM2 newEdge = (HasRecordDomainComponentM2) graphFactory.createEdge(HasRecordDomainComponentM2.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public HasRecordDomainComponentM2 createHasRecordDomainComponentM2(int id, RecordDomainM2 alpha, DomainM2 omega) {
		HasRecordDomainComponentM2 newEdge = (HasRecordDomainComponentM2) graphFactory.createEdge(HasRecordDomainComponentM2.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IntDomainM2 ------------------------

	public IntDomainM2 getIntDomainM2(int id) {
		return (IntDomainM2)getVertex(id);
	}

	public IntDomainM2 getFirstIntDomainM2() {
		return (IntDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("IntDomainM2"));
	}

	public IntDomainM2 getFirstIntDomainM2(boolean noSubClasses) {
		return (IntDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("IntDomainM2"), noSubClasses);
	}

	public IntDomainM2 createIntDomainM2() {
		IntDomainM2 newVertex = (IntDomainM2) graphFactory.createVertex(IntDomainM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public IntDomainM2 createIntDomainM2(int id) {
		IntDomainM2 newVertex = (IntDomainM2) graphFactory.createVertex(IntDomainM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for IsSubClassOfM2 ------------------------

	public IsSubClassOfM2 getIsSubClassOfM2(int id) {
		return (IsSubClassOfM2)getEdge(id);
	}

	public IsSubClassOfM2 getFirstIsSubClassOfM2InGraph() {
		return (IsSubClassOfM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSubClassOfM2"));
	}

	// ------------------------ Code for IsSubEdgeClassOfM2 ------------------------

	public IsSubEdgeClassOfM2 getIsSubEdgeClassOfM2(int id) {
		return (IsSubEdgeClassOfM2)getEdge(id);
	}

	public IsSubEdgeClassOfM2 getFirstIsSubEdgeClassOfM2InGraph() {
		return (IsSubEdgeClassOfM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSubEdgeClassOfM2"));
	}

	public IsSubEdgeClassOfM2 getFirstIsSubEdgeClassOfM2InGraph(boolean noSubClasses) {
		return (IsSubEdgeClassOfM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSubEdgeClassOfM2"), noSubClasses);
	}

	public IsSubEdgeClassOfM2 createIsSubEdgeClassOfM2(EdgeClassM2 alpha, EdgeClassM2 omega) {
		IsSubEdgeClassOfM2 newEdge = (IsSubEdgeClassOfM2) graphFactory.createEdge(IsSubEdgeClassOfM2.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsSubEdgeClassOfM2 createIsSubEdgeClassOfM2(int id, EdgeClassM2 alpha, EdgeClassM2 omega) {
		IsSubEdgeClassOfM2 newEdge = (IsSubEdgeClassOfM2) graphFactory.createEdge(IsSubEdgeClassOfM2.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsSubGraphClassOfM2 ------------------------

	public IsSubGraphClassOfM2 getIsSubGraphClassOfM2(int id) {
		return (IsSubGraphClassOfM2)getEdge(id);
	}

	public IsSubGraphClassOfM2 getFirstIsSubGraphClassOfM2InGraph() {
		return (IsSubGraphClassOfM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSubGraphClassOfM2"));
	}

	public IsSubGraphClassOfM2 getFirstIsSubGraphClassOfM2InGraph(boolean noSubClasses) {
		return (IsSubGraphClassOfM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSubGraphClassOfM2"), noSubClasses);
	}

	public IsSubGraphClassOfM2 createIsSubGraphClassOfM2(GraphClassM2 alpha, GraphClassM2 omega) {
		IsSubGraphClassOfM2 newEdge = (IsSubGraphClassOfM2) graphFactory.createEdge(IsSubGraphClassOfM2.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsSubGraphClassOfM2 createIsSubGraphClassOfM2(int id, GraphClassM2 alpha, GraphClassM2 omega) {
		IsSubGraphClassOfM2 newEdge = (IsSubGraphClassOfM2) graphFactory.createEdge(IsSubGraphClassOfM2.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for IsSubVertexClassOfM2 ------------------------

	public IsSubVertexClassOfM2 getIsSubVertexClassOfM2(int id) {
		return (IsSubVertexClassOfM2)getEdge(id);
	}

	public IsSubVertexClassOfM2 getFirstIsSubVertexClassOfM2InGraph() {
		return (IsSubVertexClassOfM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSubVertexClassOfM2"));
	}

	public IsSubVertexClassOfM2 getFirstIsSubVertexClassOfM2InGraph(boolean noSubClasses) {
		return (IsSubVertexClassOfM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("IsSubVertexClassOfM2"), noSubClasses);
	}

	public IsSubVertexClassOfM2 createIsSubVertexClassOfM2(VertexClassM2 alpha, VertexClassM2 omega) {
		IsSubVertexClassOfM2 newEdge = (IsSubVertexClassOfM2) graphFactory.createEdge(IsSubVertexClassOfM2.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public IsSubVertexClassOfM2 createIsSubVertexClassOfM2(int id, VertexClassM2 alpha, VertexClassM2 omega) {
		IsSubVertexClassOfM2 newEdge = (IsSubVertexClassOfM2) graphFactory.createEdge(IsSubVertexClassOfM2.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for ListDomainM2 ------------------------

	public ListDomainM2 getListDomainM2(int id) {
		return (ListDomainM2)getVertex(id);
	}

	public ListDomainM2 getFirstListDomainM2() {
		return (ListDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ListDomainM2"));
	}

	public ListDomainM2 getFirstListDomainM2(boolean noSubClasses) {
		return (ListDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ListDomainM2"), noSubClasses);
	}

	public ListDomainM2 createListDomainM2() {
		ListDomainM2 newVertex = (ListDomainM2) graphFactory.createVertex(ListDomainM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public ListDomainM2 createListDomainM2(int id) {
		ListDomainM2 newVertex = (ListDomainM2) graphFactory.createVertex(ListDomainM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for LongDomainM2 ------------------------

	public LongDomainM2 getLongDomainM2(int id) {
		return (LongDomainM2)getVertex(id);
	}

	public LongDomainM2 getFirstLongDomainM2() {
		return (LongDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("LongDomainM2"));
	}

	public LongDomainM2 getFirstLongDomainM2(boolean noSubClasses) {
		return (LongDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("LongDomainM2"), noSubClasses);
	}

	public LongDomainM2 createLongDomainM2() {
		LongDomainM2 newVertex = (LongDomainM2) graphFactory.createVertex(LongDomainM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public LongDomainM2 createLongDomainM2(int id) {
		LongDomainM2 newVertex = (LongDomainM2) graphFactory.createVertex(LongDomainM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for ObjectDomainM2 ------------------------

	public ObjectDomainM2 getObjectDomainM2(int id) {
		return (ObjectDomainM2)getVertex(id);
	}

	public ObjectDomainM2 getFirstObjectDomainM2() {
		return (ObjectDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ObjectDomainM2"));
	}

	public ObjectDomainM2 getFirstObjectDomainM2(boolean noSubClasses) {
		return (ObjectDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("ObjectDomainM2"), noSubClasses);
	}

	public ObjectDomainM2 createObjectDomainM2() {
		ObjectDomainM2 newVertex = (ObjectDomainM2) graphFactory.createVertex(ObjectDomainM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public ObjectDomainM2 createObjectDomainM2(int id) {
		ObjectDomainM2 newVertex = (ObjectDomainM2) graphFactory.createVertex(ObjectDomainM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for RecordDomainM2 ------------------------

	public RecordDomainM2 getRecordDomainM2(int id) {
		return (RecordDomainM2)getVertex(id);
	}

	public RecordDomainM2 getFirstRecordDomainM2() {
		return (RecordDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RecordDomainM2"));
	}

	public RecordDomainM2 getFirstRecordDomainM2(boolean noSubClasses) {
		return (RecordDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("RecordDomainM2"), noSubClasses);
	}

	public RecordDomainM2 createRecordDomainM2() {
		RecordDomainM2 newVertex = (RecordDomainM2) graphFactory.createVertex(RecordDomainM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public RecordDomainM2 createRecordDomainM2(int id) {
		RecordDomainM2 newVertex = (RecordDomainM2) graphFactory.createVertex(RecordDomainM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for SchemaM2 ------------------------

	public SchemaM2 getSchemaM2(int id) {
		return (SchemaM2)getVertex(id);
	}

	public SchemaM2 getFirstSchemaM2() {
		return (SchemaM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SchemaM2"));
	}

	public SchemaM2 getFirstSchemaM2(boolean noSubClasses) {
		return (SchemaM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SchemaM2"), noSubClasses);
	}

	public SchemaM2 createSchemaM2() {
		SchemaM2 newVertex = (SchemaM2) graphFactory.createVertex(SchemaM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public SchemaM2 createSchemaM2(int id) {
		SchemaM2 newVertex = (SchemaM2) graphFactory.createVertex(SchemaM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for SetDomainM2 ------------------------

	public SetDomainM2 getSetDomainM2(int id) {
		return (SetDomainM2)getVertex(id);
	}

	public SetDomainM2 getFirstSetDomainM2() {
		return (SetDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SetDomainM2"));
	}

	public SetDomainM2 getFirstSetDomainM2(boolean noSubClasses) {
		return (SetDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("SetDomainM2"), noSubClasses);
	}

	public SetDomainM2 createSetDomainM2() {
		SetDomainM2 newVertex = (SetDomainM2) graphFactory.createVertex(SetDomainM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public SetDomainM2 createSetDomainM2(int id) {
		SetDomainM2 newVertex = (SetDomainM2) graphFactory.createVertex(SetDomainM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for StringDomainM2 ------------------------

	public StringDomainM2 getStringDomainM2(int id) {
		return (StringDomainM2)getVertex(id);
	}

	public StringDomainM2 getFirstStringDomainM2() {
		return (StringDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("StringDomainM2"));
	}

	public StringDomainM2 getFirstStringDomainM2(boolean noSubClasses) {
		return (StringDomainM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("StringDomainM2"), noSubClasses);
	}

	public StringDomainM2 createStringDomainM2() {
		StringDomainM2 newVertex = (StringDomainM2) graphFactory.createVertex(StringDomainM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public StringDomainM2 createStringDomainM2(int id) {
		StringDomainM2 newVertex = (StringDomainM2) graphFactory.createVertex(StringDomainM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	// ------------------------ Code for ToM2 ------------------------

	public ToM2 getToM2(int id) {
		return (ToM2)getEdge(id);
	}

	public ToM2 getFirstToM2InGraph() {
		return (ToM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("ToM2"));
	}

	public ToM2 getFirstToM2InGraph(boolean noSubClasses) {
		return (ToM2)getFirstEdgeOfClassInGraph((EdgeClass)getGraphClass().getGraphElementClass("ToM2"), noSubClasses);
	}

	public ToM2 createToM2(EdgeClassM2 alpha, VertexClassM2 omega) {
		ToM2 newEdge = (ToM2) graphFactory.createEdge(ToM2.class, 0, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	public ToM2 createToM2(int id, EdgeClassM2 alpha, VertexClassM2 omega) {
		ToM2 newEdge = (ToM2) graphFactory.createEdge(ToM2.class, id, this);
		addEdge(newEdge, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for VertexClassM2 ------------------------

	public VertexClassM2 getVertexClassM2(int id) {
		return (VertexClassM2)getVertex(id);
	}

	public VertexClassM2 getFirstVertexClassM2() {
		return (VertexClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("VertexClassM2"));
	}

	public VertexClassM2 getFirstVertexClassM2(boolean noSubClasses) {
		return (VertexClassM2)getFirstVertexOfClass((VertexClass)getGraphClass().getGraphElementClass("VertexClassM2"), noSubClasses);
	}

	public VertexClassM2 createVertexClassM2() {
		VertexClassM2 newVertex = (VertexClassM2) graphFactory.createVertex(VertexClassM2.class, 0, this);
		addVertex(newVertex);
		return newVertex;
	}

	public VertexClassM2 createVertexClassM2(int id) {
		VertexClassM2 newVertex = (VertexClassM2) graphFactory.createVertex(VertexClassM2.class, id, this);
		addVertex(newVertex);
		return newVertex;
	}

	public Iterable<? extends HasBaseDomainM2> getHasBaseDomainM2Edges() {
		return new EdgeIterable<HasBaseDomainM2>(this, HasBaseDomainM2.class);
	}
	
	public Iterable<? extends HasBaseDomainM2> getHasBaseDomainM2Edges(boolean noSubClasses) {
		return new EdgeIterable<HasBaseDomainM2>(this, HasBaseDomainM2.class, noSubClasses);
	}


	public Iterable<? extends IsSubEdgeClassOfM2> getIsSubEdgeClassOfM2Edges() {
		return new EdgeIterable<IsSubEdgeClassOfM2>(this, IsSubEdgeClassOfM2.class);
	}
	
	public Iterable<? extends IsSubEdgeClassOfM2> getIsSubEdgeClassOfM2Edges(boolean noSubClasses) {
		return new EdgeIterable<IsSubEdgeClassOfM2>(this, IsSubEdgeClassOfM2.class, noSubClasses);
	}


	public Iterable<? extends HasAttributeM2> getHasAttributeM2Edges() {
		return new EdgeIterable<HasAttributeM2>(this, HasAttributeM2.class);
	}
	
	public Iterable<? extends HasAttributeM2> getHasAttributeM2Edges(boolean noSubClasses) {
		return new EdgeIterable<HasAttributeM2>(this, HasAttributeM2.class, noSubClasses);
	}


	public Iterable<? extends ContainsGraphElementClassM2> getContainsGraphElementClassM2Edges() {
		return new EdgeIterable<ContainsGraphElementClassM2>(this, ContainsGraphElementClassM2.class);
	}
	
	public Iterable<? extends ContainsGraphElementClassM2> getContainsGraphElementClassM2Edges(boolean noSubClasses) {
		return new EdgeIterable<ContainsGraphElementClassM2>(this, ContainsGraphElementClassM2.class, noSubClasses);
	}


	public Iterable<? extends ContainsGraphClassM2> getContainsGraphClassM2Edges() {
		return new EdgeIterable<ContainsGraphClassM2>(this, ContainsGraphClassM2.class);
	}
	
	public Iterable<? extends ContainsGraphClassM2> getContainsGraphClassM2Edges(boolean noSubClasses) {
		return new EdgeIterable<ContainsGraphClassM2>(this, ContainsGraphClassM2.class, noSubClasses);
	}


	public Iterable<? extends FromM2> getFromM2Edges() {
		return new EdgeIterable<FromM2>(this, FromM2.class);
	}
	
	public Iterable<? extends FromM2> getFromM2Edges(boolean noSubClasses) {
		return new EdgeIterable<FromM2>(this, FromM2.class, noSubClasses);
	}


	public Iterable<? extends IsSubGraphClassOfM2> getIsSubGraphClassOfM2Edges() {
		return new EdgeIterable<IsSubGraphClassOfM2>(this, IsSubGraphClassOfM2.class);
	}
	
	public Iterable<? extends IsSubGraphClassOfM2> getIsSubGraphClassOfM2Edges(boolean noSubClasses) {
		return new EdgeIterable<IsSubGraphClassOfM2>(this, IsSubGraphClassOfM2.class, noSubClasses);
	}


	public Iterable<? extends ToM2> getToM2Edges() {
		return new EdgeIterable<ToM2>(this, ToM2.class);
	}
	
	public Iterable<? extends ToM2> getToM2Edges(boolean noSubClasses) {
		return new EdgeIterable<ToM2>(this, ToM2.class, noSubClasses);
	}


	public Iterable<? extends HasDomainM2> getHasDomainM2Edges() {
		return new EdgeIterable<HasDomainM2>(this, HasDomainM2.class);
	}
	
	public Iterable<? extends HasDomainM2> getHasDomainM2Edges(boolean noSubClasses) {
		return new EdgeIterable<HasDomainM2>(this, HasDomainM2.class, noSubClasses);
	}


	public Iterable<? extends IsSubVertexClassOfM2> getIsSubVertexClassOfM2Edges() {
		return new EdgeIterable<IsSubVertexClassOfM2>(this, IsSubVertexClassOfM2.class);
	}
	
	public Iterable<? extends IsSubVertexClassOfM2> getIsSubVertexClassOfM2Edges(boolean noSubClasses) {
		return new EdgeIterable<IsSubVertexClassOfM2>(this, IsSubVertexClassOfM2.class, noSubClasses);
	}


	public Iterable<? extends HasRecordDomainComponentM2> getHasRecordDomainComponentM2Edges() {
		return new EdgeIterable<HasRecordDomainComponentM2>(this, HasRecordDomainComponentM2.class);
	}
	
	public Iterable<? extends HasRecordDomainComponentM2> getHasRecordDomainComponentM2Edges(boolean noSubClasses) {
		return new EdgeIterable<HasRecordDomainComponentM2>(this, HasRecordDomainComponentM2.class, noSubClasses);
	}


	public Iterable<? extends IsSubClassOfM2> getIsSubClassOfM2Edges() {
		return new EdgeIterable<IsSubClassOfM2>(this, IsSubClassOfM2.class);
	}
	
	public Iterable<? extends IsSubClassOfM2> getIsSubClassOfM2Edges(boolean noSubClasses) {
		return new EdgeIterable<IsSubClassOfM2>(this, IsSubClassOfM2.class, noSubClasses);
	}


	public Iterable<? extends EnumDomainM2> getEnumDomainM2Vertices() {
		return new VertexIterable<EnumDomainM2>(this, EnumDomainM2.class);
	}
	
	public Iterable<? extends EnumDomainM2> getEnumDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<EnumDomainM2>(this, EnumDomainM2.class, noSubClasses);
	}


	public Iterable<? extends CompositeDomainM2> getCompositeDomainM2Vertices() {
		return new VertexIterable<CompositeDomainM2>(this, CompositeDomainM2.class);
	}
	
	public Iterable<? extends CompositeDomainM2> getCompositeDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<CompositeDomainM2>(this, CompositeDomainM2.class, noSubClasses);
	}


	public Iterable<? extends SchemaM2> getSchemaM2Vertices() {
		return new VertexIterable<SchemaM2>(this, SchemaM2.class);
	}
	
	public Iterable<? extends SchemaM2> getSchemaM2Vertices(boolean noSubClasses) {
		return new VertexIterable<SchemaM2>(this, SchemaM2.class, noSubClasses);
	}


	public Iterable<? extends DomainM2> getDomainM2Vertices() {
		return new VertexIterable<DomainM2>(this, DomainM2.class);
	}
	
	public Iterable<? extends DomainM2> getDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<DomainM2>(this, DomainM2.class, noSubClasses);
	}


	public Iterable<? extends EdgeClassM2> getEdgeClassM2Vertices() {
		return new VertexIterable<EdgeClassM2>(this, EdgeClassM2.class);
	}
	
	public Iterable<? extends EdgeClassM2> getEdgeClassM2Vertices(boolean noSubClasses) {
		return new VertexIterable<EdgeClassM2>(this, EdgeClassM2.class, noSubClasses);
	}


	public Iterable<? extends BooleanDomainM2> getBooleanDomainM2Vertices() {
		return new VertexIterable<BooleanDomainM2>(this, BooleanDomainM2.class);
	}
	
	public Iterable<? extends BooleanDomainM2> getBooleanDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<BooleanDomainM2>(this, BooleanDomainM2.class, noSubClasses);
	}


	public Iterable<? extends AttributeM2> getAttributeM2Vertices() {
		return new VertexIterable<AttributeM2>(this, AttributeM2.class);
	}
	
	public Iterable<? extends AttributeM2> getAttributeM2Vertices(boolean noSubClasses) {
		return new VertexIterable<AttributeM2>(this, AttributeM2.class, noSubClasses);
	}


	public Iterable<? extends LongDomainM2> getLongDomainM2Vertices() {
		return new VertexIterable<LongDomainM2>(this, LongDomainM2.class);
	}
	
	public Iterable<? extends LongDomainM2> getLongDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<LongDomainM2>(this, LongDomainM2.class, noSubClasses);
	}


	public Iterable<? extends CompositionClassM2> getCompositionClassM2Vertices() {
		return new VertexIterable<CompositionClassM2>(this, CompositionClassM2.class);
	}
	
	public Iterable<? extends CompositionClassM2> getCompositionClassM2Vertices(boolean noSubClasses) {
		return new VertexIterable<CompositionClassM2>(this, CompositionClassM2.class, noSubClasses);
	}


	public Iterable<? extends SetDomainM2> getSetDomainM2Vertices() {
		return new VertexIterable<SetDomainM2>(this, SetDomainM2.class);
	}
	
	public Iterable<? extends SetDomainM2> getSetDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<SetDomainM2>(this, SetDomainM2.class, noSubClasses);
	}


	public Iterable<? extends DoubleDomainM2> getDoubleDomainM2Vertices() {
		return new VertexIterable<DoubleDomainM2>(this, DoubleDomainM2.class);
	}
	
	public Iterable<? extends DoubleDomainM2> getDoubleDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<DoubleDomainM2>(this, DoubleDomainM2.class, noSubClasses);
	}


	public Iterable<? extends BasicDomainM2> getBasicDomainM2Vertices() {
		return new VertexIterable<BasicDomainM2>(this, BasicDomainM2.class);
	}
	
	public Iterable<? extends BasicDomainM2> getBasicDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<BasicDomainM2>(this, BasicDomainM2.class, noSubClasses);
	}


	public Iterable<? extends VertexClassM2> getVertexClassM2Vertices() {
		return new VertexIterable<VertexClassM2>(this, VertexClassM2.class);
	}
	
	public Iterable<? extends VertexClassM2> getVertexClassM2Vertices(boolean noSubClasses) {
		return new VertexIterable<VertexClassM2>(this, VertexClassM2.class, noSubClasses);
	}


	public Iterable<? extends ListDomainM2> getListDomainM2Vertices() {
		return new VertexIterable<ListDomainM2>(this, ListDomainM2.class);
	}
	
	public Iterable<? extends ListDomainM2> getListDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<ListDomainM2>(this, ListDomainM2.class, noSubClasses);
	}


	public Iterable<? extends AggregationClassM2> getAggregationClassM2Vertices() {
		return new VertexIterable<AggregationClassM2>(this, AggregationClassM2.class);
	}
	
	public Iterable<? extends AggregationClassM2> getAggregationClassM2Vertices(boolean noSubClasses) {
		return new VertexIterable<AggregationClassM2>(this, AggregationClassM2.class, noSubClasses);
	}


	public Iterable<? extends StringDomainM2> getStringDomainM2Vertices() {
		return new VertexIterable<StringDomainM2>(this, StringDomainM2.class);
	}
	
	public Iterable<? extends StringDomainM2> getStringDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<StringDomainM2>(this, StringDomainM2.class, noSubClasses);
	}


	public Iterable<? extends ObjectDomainM2> getObjectDomainM2Vertices() {
		return new VertexIterable<ObjectDomainM2>(this, ObjectDomainM2.class);
	}
	
	public Iterable<? extends ObjectDomainM2> getObjectDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<ObjectDomainM2>(this, ObjectDomainM2.class, noSubClasses);
	}


	public Iterable<? extends IntDomainM2> getIntDomainM2Vertices() {
		return new VertexIterable<IntDomainM2>(this, IntDomainM2.class);
	}
	
	public Iterable<? extends IntDomainM2> getIntDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<IntDomainM2>(this, IntDomainM2.class, noSubClasses);
	}


	public Iterable<? extends AttributedElementClassM2> getAttributedElementClassM2Vertices() {
		return new VertexIterable<AttributedElementClassM2>(this, AttributedElementClassM2.class);
	}
	
	public Iterable<? extends AttributedElementClassM2> getAttributedElementClassM2Vertices(boolean noSubClasses) {
		return new VertexIterable<AttributedElementClassM2>(this, AttributedElementClassM2.class, noSubClasses);
	}


	public Iterable<? extends GraphClassM2> getGraphClassM2Vertices() {
		return new VertexIterable<GraphClassM2>(this, GraphClassM2.class);
	}
	
	public Iterable<? extends GraphClassM2> getGraphClassM2Vertices(boolean noSubClasses) {
		return new VertexIterable<GraphClassM2>(this, GraphClassM2.class, noSubClasses);
	}


	public Iterable<? extends RecordDomainM2> getRecordDomainM2Vertices() {
		return new VertexIterable<RecordDomainM2>(this, RecordDomainM2.class);
	}
	
	public Iterable<? extends RecordDomainM2> getRecordDomainM2Vertices(boolean noSubClasses) {
		return new VertexIterable<RecordDomainM2>(this, RecordDomainM2.class, noSubClasses);
	}


	public Iterable<? extends GraphElementClassM2> getGraphElementClassM2Vertices() {
		return new VertexIterable<GraphElementClassM2>(this, GraphElementClassM2.class);
	}
	
	public Iterable<? extends GraphElementClassM2> getGraphElementClassM2Vertices(boolean noSubClasses) {
		return new VertexIterable<GraphElementClassM2>(this, GraphElementClassM2.class, noSubClasses);
	}


}
