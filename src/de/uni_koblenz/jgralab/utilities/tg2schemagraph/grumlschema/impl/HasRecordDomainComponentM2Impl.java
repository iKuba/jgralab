/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl;

import de.uni_koblenz.jgralab.impl.array.AggregationImpl;

import de.uni_koblenz.jgralab.AggregationClass;
import de.uni_koblenz.jgralab.Aggregation;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl.ReversedHasRecordDomainComponentM2Impl;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.HasRecordDomainComponentM2;

import java.io.IOException;
/**
FromVertexClass: RecordDomainM2
FromRoleName : 
ToVertexClass: DomainM2
toRoleName : 
 */

public class HasRecordDomainComponentM2Impl extends AggregationImpl implements Aggregation, HasRecordDomainComponentM2 {

	protected String name;

	public HasRecordDomainComponentM2Impl(int id, Graph g) {
		super(id, g, (AggregationClass)g.getGraphClass().getGraphElementClass("HasRecordDomainComponentM2"));
		reversedEdge = new ReversedHasRecordDomainComponentM2Impl(this, g);
	}

	public Class<? extends AttributedElement> getM1Class() {
		return HasRecordDomainComponentM2.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		if (attributeName.equals("name")) return name;
		throw new NoSuchFieldException("HasRecordDomainComponentM2 doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		if (attributeName.equals("name")) {
			setName((String) data);
			return;
		}
		throw new NoSuchFieldException("HasRecordDomainComponentM2 doesn't contain an attribute " + attributeName);
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
		modified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		name = io.matchUtfString();
		setName(name);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(name);
	}

	public HasRecordDomainComponentM2 getNextHasRecordDomainComponentM2InGraph() {
		return (HasRecordDomainComponentM2)getNextEdgeOfClassInGraph(HasRecordDomainComponentM2.class);
	}

	public HasRecordDomainComponentM2 getNextHasRecordDomainComponentM2InGraph(boolean noSubClasses) {
		return (HasRecordDomainComponentM2)getNextEdgeOfClassInGraph(HasRecordDomainComponentM2.class, noSubClasses);
	}

	public HasRecordDomainComponentM2 getNextHasRecordDomainComponentM2() {
		return (HasRecordDomainComponentM2)getNextEdgeOfClass(HasRecordDomainComponentM2.class);
	}

	public HasRecordDomainComponentM2 getNextHasRecordDomainComponentM2(EdgeDirection orientation) {
		return (HasRecordDomainComponentM2)getNextEdgeOfClass(HasRecordDomainComponentM2.class, orientation);
	}

	public HasRecordDomainComponentM2 getNextHasRecordDomainComponentM2(boolean noSubClasses) {
		return (HasRecordDomainComponentM2)getNextEdgeOfClass(HasRecordDomainComponentM2.class, noSubClasses);
	}

	public HasRecordDomainComponentM2 getNextHasRecordDomainComponentM2(EdgeDirection orientation, boolean noSubClasses) {
		return (HasRecordDomainComponentM2)getNextEdgeOfClass(HasRecordDomainComponentM2.class, orientation, noSubClasses);
	}

}
