/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.impl;

import de.uni_koblenz.jgralab.impl.array.VertexImpl;
import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.VertexClass;
import de.uni_koblenz.jgralab.AttributedElement;
import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.EdgeVertexPair;
import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.ContainsGraphClassM2;
import de.uni_koblenz.jgralab.utilities.tg2schemagraph.grumlschema.SchemaM2;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class SchemaM2Impl extends VertexImpl implements SchemaM2, Vertex {

	protected String name;

	public SchemaM2Impl(int id, Graph g) {
		super(id, g, (VertexClass)g.getGraphClass().getGraphElementClass("SchemaM2"));
	}

	public Class<? extends AttributedElement> getM1Class() {
		return SchemaM2.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		if (attributeName.equals("name")) return name;
		throw new NoSuchFieldException("SchemaM2 doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		if (attributeName.equals("name")) {
			setName((String) data);
			return;
		}
		throw new NoSuchFieldException("SchemaM2 doesn't contain an attribute " + attributeName);
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
		modified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		name = io.matchUtfString();
		setName(name);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(name);
	}

	/* add all valid from edges */
	private static Set<Class<? extends Edge>> validFromEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidAlpha()
	 */
	public boolean isValidAlpha(Edge edge) {
		return validFromEdges.contains(edge.getClass());
	}
	
	{

	}
	
	/* add all valid to edges */
	private static Set<Class<? extends Edge>> validToEdges = new HashSet<Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidOemga()
	 */
	public boolean isValidOmega(Edge edge) {
		return validToEdges.contains(edge.getClass());
	}
	
	{

		validToEdges.add(ContainsGraphClassM2Impl.class);

	}

	public SchemaM2 getNextSchemaM2() {
		return (SchemaM2)getNextVertexOfClass(SchemaM2.class);
	}

	public SchemaM2 getNextSchemaM2(boolean noSubClasses) {
		return (SchemaM2)getNextVertexOfClass(SchemaM2.class, noSubClasses);
	}

	public ContainsGraphClassM2 getFirstContainsGraphClassM2() {
		return (ContainsGraphClassM2)getFirstEdgeOfClass(ContainsGraphClassM2.class);
	}

	public ContainsGraphClassM2 getFirstContainsGraphClassM2(EdgeDirection orientation) {
		return (ContainsGraphClassM2)getFirstEdgeOfClass(ContainsGraphClassM2.class, orientation);
	}

	public ContainsGraphClassM2 getFirstContainsGraphClassM2(boolean noSubClasses) {
		return (ContainsGraphClassM2)getFirstEdgeOfClass(ContainsGraphClassM2.class, noSubClasses);
	}

	public ContainsGraphClassM2 getFirstContainsGraphClassM2(EdgeDirection orientation, boolean noSubClasses) {
		return (ContainsGraphClassM2)getFirstEdgeOfClass(ContainsGraphClassM2.class, orientation, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences() {
		return new IncidenceIterable<ContainsGraphClassM2, Vertex>(this, ContainsGraphClassM2.class);
	}
	
	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences(boolean noSubClasses) {
		return new IncidenceIterable<ContainsGraphClassM2, Vertex>(this, ContainsGraphClassM2.class, noSubClasses);
	}

	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences(EdgeDirection direction, boolean noSubClasses) {
		return  new IncidenceIterable<ContainsGraphClassM2, Vertex>(this, ContainsGraphClassM2.class, direction, noSubClasses);
	}
	
	public Iterable<EdgeVertexPair<? extends ContainsGraphClassM2, ? extends Vertex>> getContainsGraphClassM2Incidences(EdgeDirection direction) {
		return new IncidenceIterable<ContainsGraphClassM2, Vertex>(this, ContainsGraphClassM2.class, direction);
	}

}
