Schema de.uni_koblenz.jgralab.grumlschema.GrumlSchema;
GraphClass DefaultGraphClass;
Package;
VertexClass 'AggregationClass: EdgeClass {aggregateFrom: Boolean};
VertexClass Attribute {name: String};
abstract VertexClass AttributedElementClass {isAbstract: Boolean, qualifiedName: String};
VertexClass BooleanDomain: Domain;
abstract VertexClass CollectionDomain: Domain;
VertexClass 'CompositionClass: AggregationClass;
abstract VertexClass Domain {qualifiedName: String};
VertexClass DoubleDomain: Domain;
VertexClass 'EdgeClass: GraphElementClass;
VertexClass 'EnumDomain: Domain {enumConstants: List<String>};
VertexClass 'GraphClass: AttributedElementClass;
abstract VertexClass GraphElementClass: AttributedElementClass;
VertexClass IntDomain: Domain;
VertexClass ListDomain: CollectionDomain;
VertexClass LongDomain: Domain;
VertexClass MapDomain: Domain;
VertexClass 'Package {qualifiedName: String};
VertexClass 'RecordDomain: Domain;
VertexClass 'Schema {name: String, packagePrefix: String};
VertexClass SetDomain: CollectionDomain;
VertexClass StringDomain: Domain;
VertexClass 'VertexClass: GraphElementClass;
EdgeClass HasDomain from Attribute (0,*) to Domain (1,1);
AggregationClass HasAttribute from AttributedElementClass (1,1) to Attribute (0,*) aggregate from;
EdgeClass HasBaseDomain from CollectionDomain (0,*) to Domain (1,1);
AggregationClass ContainsDomain from 'Package (1,1) to Domain (0,*) aggregate from;
AggregationClass HasRecordDomainComponent from 'RecordDomain (0,*) to Domain (1,*) aggregate from {name: String};
// The key domain of a MapDomain must be any of the basic domains (IntDomain, DoubleDomain, LongDomain, StringDomain, BooleanDomain) or a EnumDomain.
EdgeClass HasKeyDomain from MapDomain (0,*) to Domain (1,1);
EdgeClass HasValueDomain from MapDomain (0,*) to Domain (1,1);
EdgeClass SpecializesEdgeClass from 'EdgeClass (0,*) to 'EdgeClass (0,*);
AggregationClass To from 'EdgeClass (0,*) to 'VertexClass (1,1) aggregate from {min: Integer, max: Integer, roleName: String, redefinedRoles: Set<String>};
AggregationClass From from 'EdgeClass (0,*) to 'VertexClass (1,1) aggregate from {max: Integer, min: Integer, roleName: String, redefinedRoles: Set<String>};
AggregationClass ContainsEnumDomain from 'Package (1,1) to 'EnumDomain (0,*) aggregate from;
AggregationClass DefinesGraphClass from 'Schema (1,1) to 'GraphClass (1,1) aggregate from;
AggregationClass ContainsGraphElementClass from 'Package (1,1) to GraphElementClass (0,*) aggregate from;
AggregationClass ContainsSubPackage from 'Package (0,*) to 'Package (0,1) aggregate to;
AggregationClass ContainsRecordDomain from 'Package (1,1) to 'RecordDomain (0,*) aggregate from;
AggregationClass ContainsDefaultPackage from 'Schema (0,1) to 'Package (1,1) aggregate from;
EdgeClass SpecializesVertexClass from 'VertexClass (0,*) to 'VertexClass (0,*);
